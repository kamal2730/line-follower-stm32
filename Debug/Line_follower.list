
Line_follower.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d5c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  08009f00  08009f00  0000af00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a348  0800a348  0000c22c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a348  0800a348  0000b348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a350  0800a350  0000c22c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a350  0800a350  0000b350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a354  0800a354  0000b354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000022c  20000000  0800a358  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000478  20000230  0800a584  0000c230  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200006a8  0800a584  0000c6a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c22c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a19  00000000  00000000  0000c25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000291f  00000000  00000000  0001cc75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  0001f598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cbd  00000000  00000000  000205e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018de7  00000000  00000000  000212a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012207  00000000  00000000  0003a08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cf46  00000000  00000000  0004c293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e91d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057cc  00000000  00000000  000e921c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000ee9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000230 	.word	0x20000230
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009ee4 	.word	0x08009ee4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000234 	.word	0x20000234
 80001dc:	08009ee4 	.word	0x08009ee4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_d2f>:
 8000bec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf4:	bf24      	itt	cs
 8000bf6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bfa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfe:	d90d      	bls.n	8000c1c <__aeabi_d2f+0x30>
 8000c00:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c0c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c14:	bf08      	it	eq
 8000c16:	f020 0001 	biceq.w	r0, r0, #1
 8000c1a:	4770      	bx	lr
 8000c1c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c20:	d121      	bne.n	8000c66 <__aeabi_d2f+0x7a>
 8000c22:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c26:	bfbc      	itt	lt
 8000c28:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	4770      	bxlt	lr
 8000c2e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c36:	f1c2 0218 	rsb	r2, r2, #24
 8000c3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c42:	fa20 f002 	lsr.w	r0, r0, r2
 8000c46:	bf18      	it	ne
 8000c48:	f040 0001 	orrne.w	r0, r0, #1
 8000c4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c58:	ea40 000c 	orr.w	r0, r0, ip
 8000c5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c64:	e7cc      	b.n	8000c00 <__aeabi_d2f+0x14>
 8000c66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6a:	d107      	bne.n	8000c7c <__aeabi_d2f+0x90>
 8000c6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c70:	bf1e      	ittt	ne
 8000c72:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c76:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c7a:	4770      	bxne	lr
 8000c7c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c80:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c84:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop

08000c8c <__aeabi_uldivmod>:
 8000c8c:	b953      	cbnz	r3, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c8e:	b94a      	cbnz	r2, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c90:	2900      	cmp	r1, #0
 8000c92:	bf08      	it	eq
 8000c94:	2800      	cmpeq	r0, #0
 8000c96:	bf1c      	itt	ne
 8000c98:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c9c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ca0:	f000 b9be 	b.w	8001020 <__aeabi_idiv0>
 8000ca4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cac:	f000 f83c 	bl	8000d28 <__udivmoddi4>
 8000cb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb8:	b004      	add	sp, #16
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_d2lz>:
 8000cbc:	b538      	push	{r3, r4, r5, lr}
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	460d      	mov	r5, r1
 8000cc6:	f7ff ff21 	bl	8000b0c <__aeabi_dcmplt>
 8000cca:	b928      	cbnz	r0, 8000cd8 <__aeabi_d2lz+0x1c>
 8000ccc:	4620      	mov	r0, r4
 8000cce:	4629      	mov	r1, r5
 8000cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd4:	f000 b80a 	b.w	8000cec <__aeabi_d2ulz>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cde:	f000 f805 	bl	8000cec <__aeabi_d2ulz>
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	bd38      	pop	{r3, r4, r5, pc}
 8000cea:	bf00      	nop

08000cec <__aeabi_d2ulz>:
 8000cec:	b5d0      	push	{r4, r6, r7, lr}
 8000cee:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <__aeabi_d2ulz+0x34>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	4606      	mov	r6, r0
 8000cf4:	460f      	mov	r7, r1
 8000cf6:	f7ff fc97 	bl	8000628 <__aeabi_dmul>
 8000cfa:	f7ff ff57 	bl	8000bac <__aeabi_d2uiz>
 8000cfe:	4604      	mov	r4, r0
 8000d00:	f7ff fc18 	bl	8000534 <__aeabi_ui2d>
 8000d04:	4b07      	ldr	r3, [pc, #28]	@ (8000d24 <__aeabi_d2ulz+0x38>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	f7ff fc8e 	bl	8000628 <__aeabi_dmul>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4630      	mov	r0, r6
 8000d12:	4639      	mov	r1, r7
 8000d14:	f7ff fad0 	bl	80002b8 <__aeabi_dsub>
 8000d18:	f7ff ff48 	bl	8000bac <__aeabi_d2uiz>
 8000d1c:	4621      	mov	r1, r4
 8000d1e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d20:	3df00000 	.word	0x3df00000
 8000d24:	41f00000 	.word	0x41f00000

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	468e      	mov	lr, r1
 8000d30:	4604      	mov	r4, r0
 8000d32:	4688      	mov	r8, r1
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d14a      	bne.n	8000dce <__udivmoddi4+0xa6>
 8000d38:	428a      	cmp	r2, r1
 8000d3a:	4617      	mov	r7, r2
 8000d3c:	d962      	bls.n	8000e04 <__udivmoddi4+0xdc>
 8000d3e:	fab2 f682 	clz	r6, r2
 8000d42:	b14e      	cbz	r6, 8000d58 <__udivmoddi4+0x30>
 8000d44:	f1c6 0320 	rsb	r3, r6, #32
 8000d48:	fa01 f806 	lsl.w	r8, r1, r6
 8000d4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d50:	40b7      	lsls	r7, r6
 8000d52:	ea43 0808 	orr.w	r8, r3, r8
 8000d56:	40b4      	lsls	r4, r6
 8000d58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5c:	fa1f fc87 	uxth.w	ip, r7
 8000d60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d64:	0c23      	lsrs	r3, r4, #16
 8000d66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0x62>
 8000d76:	18fb      	adds	r3, r7, r3
 8000d78:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d7c:	f080 80ea 	bcs.w	8000f54 <__udivmoddi4+0x22c>
 8000d80:	429a      	cmp	r2, r3
 8000d82:	f240 80e7 	bls.w	8000f54 <__udivmoddi4+0x22c>
 8000d86:	3902      	subs	r1, #2
 8000d88:	443b      	add	r3, r7
 8000d8a:	1a9a      	subs	r2, r3, r2
 8000d8c:	b2a3      	uxth	r3, r4
 8000d8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9e:	459c      	cmp	ip, r3
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x8e>
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000da8:	f080 80d6 	bcs.w	8000f58 <__udivmoddi4+0x230>
 8000dac:	459c      	cmp	ip, r3
 8000dae:	f240 80d3 	bls.w	8000f58 <__udivmoddi4+0x230>
 8000db2:	443b      	add	r3, r7
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dba:	eba3 030c 	sub.w	r3, r3, ip
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa2>
 8000dc2:	40f3      	lsrs	r3, r6
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xb6>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb0>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa2>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x14c>
 8000de6:	4573      	cmp	r3, lr
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xc8>
 8000dea:	4282      	cmp	r2, r0
 8000dec:	f200 8105 	bhi.w	8000ffa <__udivmoddi4+0x2d2>
 8000df0:	1a84      	subs	r4, r0, r2
 8000df2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	4690      	mov	r8, r2
 8000dfa:	2d00      	cmp	r5, #0
 8000dfc:	d0e5      	beq.n	8000dca <__udivmoddi4+0xa2>
 8000dfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000e02:	e7e2      	b.n	8000dca <__udivmoddi4+0xa2>
 8000e04:	2a00      	cmp	r2, #0
 8000e06:	f000 8090 	beq.w	8000f2a <__udivmoddi4+0x202>
 8000e0a:	fab2 f682 	clz	r6, r2
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f040 80a4 	bne.w	8000f5c <__udivmoddi4+0x234>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	0c03      	lsrs	r3, r0, #16
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	b280      	uxth	r0, r0
 8000e1e:	b2bc      	uxth	r4, r7
 8000e20:	2101      	movs	r1, #1
 8000e22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d907      	bls.n	8000e46 <__udivmoddi4+0x11e>
 8000e36:	18fb      	adds	r3, r7, r3
 8000e38:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e3c:	d202      	bcs.n	8000e44 <__udivmoddi4+0x11c>
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	f200 80e0 	bhi.w	8001004 <__udivmoddi4+0x2dc>
 8000e44:	46c4      	mov	ip, r8
 8000e46:	1a9b      	subs	r3, r3, r2
 8000e48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e54:	fb02 f404 	mul.w	r4, r2, r4
 8000e58:	429c      	cmp	r4, r3
 8000e5a:	d907      	bls.n	8000e6c <__udivmoddi4+0x144>
 8000e5c:	18fb      	adds	r3, r7, r3
 8000e5e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x142>
 8000e64:	429c      	cmp	r4, r3
 8000e66:	f200 80ca 	bhi.w	8000ffe <__udivmoddi4+0x2d6>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	1b1b      	subs	r3, r3, r4
 8000e6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x98>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa0e f401 	lsl.w	r4, lr, r1
 8000e84:	fa20 f306 	lsr.w	r3, r0, r6
 8000e88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e90:	4323      	orrs	r3, r4
 8000e92:	fa00 f801 	lsl.w	r8, r0, r1
 8000e96:	fa1f fc87 	uxth.w	ip, r7
 8000e9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9e:	0c1c      	lsrs	r4, r3, #16
 8000ea0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d909      	bls.n	8000ec8 <__udivmoddi4+0x1a0>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000eba:	f080 809c 	bcs.w	8000ff6 <__udivmoddi4+0x2ce>
 8000ebe:	45a6      	cmp	lr, r4
 8000ec0:	f240 8099 	bls.w	8000ff6 <__udivmoddi4+0x2ce>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	443c      	add	r4, r7
 8000ec8:	eba4 040e 	sub.w	r4, r4, lr
 8000ecc:	fa1f fe83 	uxth.w	lr, r3
 8000ed0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000edc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee0:	45a4      	cmp	ip, r4
 8000ee2:	d908      	bls.n	8000ef6 <__udivmoddi4+0x1ce>
 8000ee4:	193c      	adds	r4, r7, r4
 8000ee6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000eea:	f080 8082 	bcs.w	8000ff2 <__udivmoddi4+0x2ca>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d97f      	bls.n	8000ff2 <__udivmoddi4+0x2ca>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000efa:	eba4 040c 	sub.w	r4, r4, ip
 8000efe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f02:	4564      	cmp	r4, ip
 8000f04:	4673      	mov	r3, lr
 8000f06:	46e1      	mov	r9, ip
 8000f08:	d362      	bcc.n	8000fd0 <__udivmoddi4+0x2a8>
 8000f0a:	d05f      	beq.n	8000fcc <__udivmoddi4+0x2a4>
 8000f0c:	b15d      	cbz	r5, 8000f26 <__udivmoddi4+0x1fe>
 8000f0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000f12:	eb64 0409 	sbc.w	r4, r4, r9
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1e:	431e      	orrs	r6, r3
 8000f20:	40cc      	lsrs	r4, r1
 8000f22:	e9c5 6400 	strd	r6, r4, [r5]
 8000f26:	2100      	movs	r1, #0
 8000f28:	e74f      	b.n	8000dca <__udivmoddi4+0xa2>
 8000f2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2e:	0c01      	lsrs	r1, r0, #16
 8000f30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f34:	b280      	uxth	r0, r0
 8000f36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	463c      	mov	r4, r7
 8000f40:	46b8      	mov	r8, r7
 8000f42:	46be      	mov	lr, r7
 8000f44:	2620      	movs	r6, #32
 8000f46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f4a:	eba2 0208 	sub.w	r2, r2, r8
 8000f4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f52:	e766      	b.n	8000e22 <__udivmoddi4+0xfa>
 8000f54:	4601      	mov	r1, r0
 8000f56:	e718      	b.n	8000d8a <__udivmoddi4+0x62>
 8000f58:	4610      	mov	r0, r2
 8000f5a:	e72c      	b.n	8000db6 <__udivmoddi4+0x8e>
 8000f5c:	f1c6 0220 	rsb	r2, r6, #32
 8000f60:	fa2e f302 	lsr.w	r3, lr, r2
 8000f64:	40b7      	lsls	r7, r6
 8000f66:	40b1      	lsls	r1, r6
 8000f68:	fa20 f202 	lsr.w	r2, r0, r2
 8000f6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f70:	430a      	orrs	r2, r1
 8000f72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f76:	b2bc      	uxth	r4, r7
 8000f78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f7c:	0c11      	lsrs	r1, r2, #16
 8000f7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f82:	fb08 f904 	mul.w	r9, r8, r4
 8000f86:	40b0      	lsls	r0, r6
 8000f88:	4589      	cmp	r9, r1
 8000f8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8e:	b280      	uxth	r0, r0
 8000f90:	d93e      	bls.n	8001010 <__udivmoddi4+0x2e8>
 8000f92:	1879      	adds	r1, r7, r1
 8000f94:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f98:	d201      	bcs.n	8000f9e <__udivmoddi4+0x276>
 8000f9a:	4589      	cmp	r9, r1
 8000f9c:	d81f      	bhi.n	8000fde <__udivmoddi4+0x2b6>
 8000f9e:	eba1 0109 	sub.w	r1, r1, r9
 8000fa2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa6:	fb09 f804 	mul.w	r8, r9, r4
 8000faa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fae:	b292      	uxth	r2, r2
 8000fb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb4:	4542      	cmp	r2, r8
 8000fb6:	d229      	bcs.n	800100c <__udivmoddi4+0x2e4>
 8000fb8:	18ba      	adds	r2, r7, r2
 8000fba:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000fbe:	d2c4      	bcs.n	8000f4a <__udivmoddi4+0x222>
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d2c2      	bcs.n	8000f4a <__udivmoddi4+0x222>
 8000fc4:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc8:	443a      	add	r2, r7
 8000fca:	e7be      	b.n	8000f4a <__udivmoddi4+0x222>
 8000fcc:	45f0      	cmp	r8, lr
 8000fce:	d29d      	bcs.n	8000f0c <__udivmoddi4+0x1e4>
 8000fd0:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd8:	3801      	subs	r0, #1
 8000fda:	46e1      	mov	r9, ip
 8000fdc:	e796      	b.n	8000f0c <__udivmoddi4+0x1e4>
 8000fde:	eba7 0909 	sub.w	r9, r7, r9
 8000fe2:	4449      	add	r1, r9
 8000fe4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fec:	fb09 f804 	mul.w	r8, r9, r4
 8000ff0:	e7db      	b.n	8000faa <__udivmoddi4+0x282>
 8000ff2:	4673      	mov	r3, lr
 8000ff4:	e77f      	b.n	8000ef6 <__udivmoddi4+0x1ce>
 8000ff6:	4650      	mov	r0, sl
 8000ff8:	e766      	b.n	8000ec8 <__udivmoddi4+0x1a0>
 8000ffa:	4608      	mov	r0, r1
 8000ffc:	e6fd      	b.n	8000dfa <__udivmoddi4+0xd2>
 8000ffe:	443b      	add	r3, r7
 8001000:	3a02      	subs	r2, #2
 8001002:	e733      	b.n	8000e6c <__udivmoddi4+0x144>
 8001004:	f1ac 0c02 	sub.w	ip, ip, #2
 8001008:	443b      	add	r3, r7
 800100a:	e71c      	b.n	8000e46 <__udivmoddi4+0x11e>
 800100c:	4649      	mov	r1, r9
 800100e:	e79c      	b.n	8000f4a <__udivmoddi4+0x222>
 8001010:	eba1 0109 	sub.w	r1, r1, r9
 8001014:	46c4      	mov	ip, r8
 8001016:	fbb1 f9fe 	udiv	r9, r1, lr
 800101a:	fb09 f804 	mul.w	r8, r9, r4
 800101e:	e7c4      	b.n	8000faa <__udivmoddi4+0x282>

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <setMotorSpeed>:

/* USER CODE END PFP */
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Motor control function
void setMotorSpeed(uint8_t motor, int32_t speed) {
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	6039      	str	r1, [r7, #0]
 800102e:	71fb      	strb	r3, [r7, #7]
    uint16_t pwm = abs(speed);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	bfb8      	it	lt
 8001036:	425b      	neglt	r3, r3
 8001038:	81fb      	strh	r3, [r7, #14]
    if (pwm > 200) pwm = 200;  // Limit max speed
 800103a:	89fb      	ldrh	r3, [r7, #14]
 800103c:	2bc8      	cmp	r3, #200	@ 0xc8
 800103e:	d901      	bls.n	8001044 <setMotorSpeed+0x20>
 8001040:	23c8      	movs	r3, #200	@ 0xc8
 8001042:	81fb      	strh	r3, [r7, #14]

    if (motor == 0) {  // Left motor
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d110      	bne.n	800106c <setMotorSpeed+0x48>
        if (speed > 0) {
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	dd06      	ble.n	800105e <setMotorSpeed+0x3a>
            TIM1->CCR1 = pwm;
 8001050:	4a14      	ldr	r2, [pc, #80]	@ (80010a4 <setMotorSpeed+0x80>)
 8001052:	89fb      	ldrh	r3, [r7, #14]
 8001054:	6353      	str	r3, [r2, #52]	@ 0x34
            TIM1->CCR2 = 0;
 8001056:	4b13      	ldr	r3, [pc, #76]	@ (80010a4 <setMotorSpeed+0x80>)
 8001058:	2200      	movs	r2, #0
 800105a:	639a      	str	r2, [r3, #56]	@ 0x38
        } else {
            TIM2->CCR1 = 0;
            TIM3->CCR1 = pwm;
        }
    }
}
 800105c:	e01b      	b.n	8001096 <setMotorSpeed+0x72>
            TIM1->CCR1 = 0;
 800105e:	4b11      	ldr	r3, [pc, #68]	@ (80010a4 <setMotorSpeed+0x80>)
 8001060:	2200      	movs	r2, #0
 8001062:	635a      	str	r2, [r3, #52]	@ 0x34
            TIM1->CCR2 = pwm;
 8001064:	4a0f      	ldr	r2, [pc, #60]	@ (80010a4 <setMotorSpeed+0x80>)
 8001066:	89fb      	ldrh	r3, [r7, #14]
 8001068:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800106a:	e014      	b.n	8001096 <setMotorSpeed+0x72>
    else if (motor == 1) {  // Right motor
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d111      	bne.n	8001096 <setMotorSpeed+0x72>
        if (speed > 0) {
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd07      	ble.n	8001088 <setMotorSpeed+0x64>
            TIM2->CCR1 = pwm;
 8001078:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800107c:	89fb      	ldrh	r3, [r7, #14]
 800107e:	6353      	str	r3, [r2, #52]	@ 0x34
            TIM3->CCR1 = 0;
 8001080:	4b09      	ldr	r3, [pc, #36]	@ (80010a8 <setMotorSpeed+0x84>)
 8001082:	2200      	movs	r2, #0
 8001084:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001086:	e006      	b.n	8001096 <setMotorSpeed+0x72>
            TIM2->CCR1 = 0;
 8001088:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800108c:	2200      	movs	r2, #0
 800108e:	635a      	str	r2, [r3, #52]	@ 0x34
            TIM3->CCR1 = pwm;
 8001090:	4a05      	ldr	r2, [pc, #20]	@ (80010a8 <setMotorSpeed+0x84>)
 8001092:	89fb      	ldrh	r3, [r7, #14]
 8001094:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8001096:	bf00      	nop
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40010000 	.word	0x40010000
 80010a8:	40000400 	.word	0x40000400

080010ac <line_data>:

// Line position calculation
int line_data(void) {
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
    int sum = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
    int weighted_sum = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60bb      	str	r3, [r7, #8]
    int onLine = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	607b      	str	r3, [r7, #4]

    for (int i = 0; i < 8; i++) {
 80010be:	2300      	movs	r3, #0
 80010c0:	603b      	str	r3, [r7, #0]
 80010c2:	e018      	b.n	80010f6 <line_data+0x4a>
        if (adc_buffer[i] > thresh[i]) {
 80010c4:	4a15      	ldr	r2, [pc, #84]	@ (800111c <line_data+0x70>)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010cc:	4914      	ldr	r1, [pc, #80]	@ (8001120 <line_data+0x74>)
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d90b      	bls.n	80010f0 <line_data+0x44>
            weighted_sum += sensorWeight[i];
 80010d8:	4a12      	ldr	r2, [pc, #72]	@ (8001124 <line_data+0x78>)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e0:	68ba      	ldr	r2, [r7, #8]
 80010e2:	4413      	add	r3, r2
 80010e4:	60bb      	str	r3, [r7, #8]
            sum += 1;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	3301      	adds	r3, #1
 80010ea:	60fb      	str	r3, [r7, #12]
            onLine = 1;
 80010ec:	2301      	movs	r3, #1
 80010ee:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 8; i++) {
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	3301      	adds	r3, #1
 80010f4:	603b      	str	r3, [r7, #0]
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	2b07      	cmp	r3, #7
 80010fa:	dde3      	ble.n	80010c4 <line_data+0x18>
        }
    }

    if (!onLine) {
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d101      	bne.n	8001106 <line_data+0x5a>
        return 255;  // Line lost condition
 8001102:	23ff      	movs	r3, #255	@ 0xff
 8001104:	e003      	b.n	800110e <line_data+0x62>
    }

    return weighted_sum / sum;
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	fb92 f3f3 	sdiv	r3, r2, r3
}
 800110e:	4618      	mov	r0, r3
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20000474 	.word	0x20000474
 8001120:	20000020 	.word	0x20000020
 8001124:	20000000 	.word	0x20000000

08001128 <computePID>:

// PID computation
void computePID(double error, int32_t input) {
 8001128:	b5b0      	push	{r4, r5, r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001132:	6078      	str	r0, [r7, #4]
    double timeChange = (double)(HAL_GetTick() - lastTime);
 8001134:	f001 fc3a 	bl	80029ac <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	4b51      	ldr	r3, [pc, #324]	@ (8001280 <computePID+0x158>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff f9f7 	bl	8000534 <__aeabi_ui2d>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // Calculate PID terms
    P = Kp * error;
 800114e:	4b4d      	ldr	r3, [pc, #308]	@ (8001284 <computePID+0x15c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff fa10 	bl	8000578 <__aeabi_f2d>
 8001158:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800115c:	f7ff fa64 	bl	8000628 <__aeabi_dmul>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4948      	ldr	r1, [pc, #288]	@ (8001288 <computePID+0x160>)
 8001166:	e9c1 2300 	strd	r2, r3, [r1]
    I += Ki * error * timeChange;
 800116a:	4b48      	ldr	r3, [pc, #288]	@ (800128c <computePID+0x164>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff fa02 	bl	8000578 <__aeabi_f2d>
 8001174:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001178:	f7ff fa56 	bl	8000628 <__aeabi_dmul>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	4610      	mov	r0, r2
 8001182:	4619      	mov	r1, r3
 8001184:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001188:	f7ff fa4e 	bl	8000628 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	4b3e      	ldr	r3, [pc, #248]	@ (8001290 <computePID+0x168>)
 8001196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119a:	f7ff f88f 	bl	80002bc <__adddf3>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	493b      	ldr	r1, [pc, #236]	@ (8001290 <computePID+0x168>)
 80011a4:	e9c1 2300 	strd	r2, r3, [r1]

    // Limit integral term
    if (I > 25) I = 25;
 80011a8:	4b39      	ldr	r3, [pc, #228]	@ (8001290 <computePID+0x168>)
 80011aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011ae:	f04f 0200 	mov.w	r2, #0
 80011b2:	4b38      	ldr	r3, [pc, #224]	@ (8001294 <computePID+0x16c>)
 80011b4:	f7ff fcc8 	bl	8000b48 <__aeabi_dcmpgt>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d005      	beq.n	80011ca <computePID+0xa2>
 80011be:	4934      	ldr	r1, [pc, #208]	@ (8001290 <computePID+0x168>)
 80011c0:	f04f 0200 	mov.w	r2, #0
 80011c4:	4b33      	ldr	r3, [pc, #204]	@ (8001294 <computePID+0x16c>)
 80011c6:	e9c1 2300 	strd	r2, r3, [r1]
    if (I < -25) I = -25;
 80011ca:	4b31      	ldr	r3, [pc, #196]	@ (8001290 <computePID+0x168>)
 80011cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011d0:	f04f 0200 	mov.w	r2, #0
 80011d4:	4b30      	ldr	r3, [pc, #192]	@ (8001298 <computePID+0x170>)
 80011d6:	f7ff fc99 	bl	8000b0c <__aeabi_dcmplt>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d005      	beq.n	80011ec <computePID+0xc4>
 80011e0:	492b      	ldr	r1, [pc, #172]	@ (8001290 <computePID+0x168>)
 80011e2:	f04f 0200 	mov.w	r2, #0
 80011e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001298 <computePID+0x170>)
 80011e8:	e9c1 2300 	strd	r2, r3, [r1]

    D = Kd * (input - lastInput) / timeChange;
 80011ec:	4b2b      	ldr	r3, [pc, #172]	@ (800129c <computePID+0x174>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff f9c1 	bl	8000578 <__aeabi_f2d>
 80011f6:	4604      	mov	r4, r0
 80011f8:	460d      	mov	r5, r1
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff f9aa 	bl	8000554 <__aeabi_i2d>
 8001200:	4b27      	ldr	r3, [pc, #156]	@ (80012a0 <computePID+0x178>)
 8001202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001206:	f7ff f857 	bl	80002b8 <__aeabi_dsub>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4620      	mov	r0, r4
 8001210:	4629      	mov	r1, r5
 8001212:	f7ff fa09 	bl	8000628 <__aeabi_dmul>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4610      	mov	r0, r2
 800121c:	4619      	mov	r1, r3
 800121e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001222:	f7ff fb2b 	bl	800087c <__aeabi_ddiv>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	491e      	ldr	r1, [pc, #120]	@ (80012a4 <computePID+0x17c>)
 800122c:	e9c1 2300 	strd	r2, r3, [r1]

    // Calculate correction
    correction = P + I + D;
 8001230:	4b15      	ldr	r3, [pc, #84]	@ (8001288 <computePID+0x160>)
 8001232:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001236:	4b16      	ldr	r3, [pc, #88]	@ (8001290 <computePID+0x168>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7ff f83e 	bl	80002bc <__adddf3>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4610      	mov	r0, r2
 8001246:	4619      	mov	r1, r3
 8001248:	4b16      	ldr	r3, [pc, #88]	@ (80012a4 <computePID+0x17c>)
 800124a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124e:	f7ff f835 	bl	80002bc <__adddf3>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4914      	ldr	r1, [pc, #80]	@ (80012a8 <computePID+0x180>)
 8001258:	e9c1 2300 	strd	r2, r3, [r1]

    // Update variables for next iteration
    lastInput = input;
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff f979 	bl	8000554 <__aeabi_i2d>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	490e      	ldr	r1, [pc, #56]	@ (80012a0 <computePID+0x178>)
 8001268:	e9c1 2300 	strd	r2, r3, [r1]
    lastTime = HAL_GetTick();
 800126c:	f001 fb9e 	bl	80029ac <HAL_GetTick>
 8001270:	4603      	mov	r3, r0
 8001272:	4a03      	ldr	r2, [pc, #12]	@ (8001280 <computePID+0x158>)
 8001274:	6013      	str	r3, [r2, #0]
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bdb0      	pop	{r4, r5, r7, pc}
 800127e:	bf00      	nop
 8001280:	20000500 	.word	0x20000500
 8001284:	20000040 	.word	0x20000040
 8001288:	200004e0 	.word	0x200004e0
 800128c:	20000044 	.word	0x20000044
 8001290:	200004e8 	.word	0x200004e8
 8001294:	40390000 	.word	0x40390000
 8001298:	c0390000 	.word	0xc0390000
 800129c:	20000048 	.word	0x20000048
 80012a0:	200004f8 	.word	0x200004f8
 80012a4:	200004f0 	.word	0x200004f0
 80012a8:	20000508 	.word	0x20000508

080012ac <checkAndHandleTurn>:

void checkAndHandleTurn() {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
    position = line_data();
 80012b0:	f7ff fefc 	bl	80010ac <line_data>
 80012b4:	4603      	mov	r3, r0
 80012b6:	4a34      	ldr	r2, [pc, #208]	@ (8001388 <checkAndHandleTurn+0xdc>)
 80012b8:	6013      	str	r3, [r2, #0]

    // Detect junction or sharp turn
    turn = (position > 50 && position <= 70) ? -1 : (position < 20) ? 1 : turn;
 80012ba:	4b33      	ldr	r3, [pc, #204]	@ (8001388 <checkAndHandleTurn+0xdc>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b32      	cmp	r3, #50	@ 0x32
 80012c0:	dd03      	ble.n	80012ca <checkAndHandleTurn+0x1e>
 80012c2:	4b31      	ldr	r3, [pc, #196]	@ (8001388 <checkAndHandleTurn+0xdc>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b46      	cmp	r3, #70	@ 0x46
 80012c8:	dd08      	ble.n	80012dc <checkAndHandleTurn+0x30>
 80012ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001388 <checkAndHandleTurn+0xdc>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2b13      	cmp	r3, #19
 80012d0:	dd02      	ble.n	80012d8 <checkAndHandleTurn+0x2c>
 80012d2:	4b2e      	ldr	r3, [pc, #184]	@ (800138c <checkAndHandleTurn+0xe0>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	e003      	b.n	80012e0 <checkAndHandleTurn+0x34>
 80012d8:	2301      	movs	r3, #1
 80012da:	e001      	b.n	80012e0 <checkAndHandleTurn+0x34>
 80012dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012e0:	4a2a      	ldr	r2, [pc, #168]	@ (800138c <checkAndHandleTurn+0xe0>)
 80012e2:	6013      	str	r3, [r2, #0]

    // If line is lost and a turn is needed
    if (turn) {
 80012e4:	4b29      	ldr	r3, [pc, #164]	@ (800138c <checkAndHandleTurn+0xe0>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d034      	beq.n	8001356 <checkAndHandleTurn+0xaa>
        while (position == 255) {
 80012ec:	e025      	b.n	800133a <checkAndHandleTurn+0x8e>
            if (turn == 1) { // Turn right
 80012ee:	4b27      	ldr	r3, [pc, #156]	@ (800138c <checkAndHandleTurn+0xe0>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d109      	bne.n	800130a <checkAndHandleTurn+0x5e>
                setMotorSpeed(0, 150);
 80012f6:	2196      	movs	r1, #150	@ 0x96
 80012f8:	2000      	movs	r0, #0
 80012fa:	f7ff fe93 	bl	8001024 <setMotorSpeed>
                setMotorSpeed(1, -150);
 80012fe:	f06f 0195 	mvn.w	r1, #149	@ 0x95
 8001302:	2001      	movs	r0, #1
 8001304:	f7ff fe8e 	bl	8001024 <setMotorSpeed>
 8001308:	e00d      	b.n	8001326 <checkAndHandleTurn+0x7a>
            } else if (turn == -1) { // Turn left
 800130a:	4b20      	ldr	r3, [pc, #128]	@ (800138c <checkAndHandleTurn+0xe0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001312:	d108      	bne.n	8001326 <checkAndHandleTurn+0x7a>
                setMotorSpeed(0, -150);
 8001314:	f06f 0195 	mvn.w	r1, #149	@ 0x95
 8001318:	2000      	movs	r0, #0
 800131a:	f7ff fe83 	bl	8001024 <setMotorSpeed>
                setMotorSpeed(1, 150);
 800131e:	2196      	movs	r1, #150	@ 0x96
 8001320:	2001      	movs	r0, #1
 8001322:	f7ff fe7f 	bl	8001024 <setMotorSpeed>
            }

            HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buffer, 8);
 8001326:	2208      	movs	r2, #8
 8001328:	4919      	ldr	r1, [pc, #100]	@ (8001390 <checkAndHandleTurn+0xe4>)
 800132a:	481a      	ldr	r0, [pc, #104]	@ (8001394 <checkAndHandleTurn+0xe8>)
 800132c:	f001 fd80 	bl	8002e30 <HAL_ADC_Start_DMA>
            position = line_data(); // Re-check for line
 8001330:	f7ff febc 	bl	80010ac <line_data>
 8001334:	4603      	mov	r3, r0
 8001336:	4a14      	ldr	r2, [pc, #80]	@ (8001388 <checkAndHandleTurn+0xdc>)
 8001338:	6013      	str	r3, [r2, #0]
        while (position == 255) {
 800133a:	4b13      	ldr	r3, [pc, #76]	@ (8001388 <checkAndHandleTurn+0xdc>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2bff      	cmp	r3, #255	@ 0xff
 8001340:	d0d5      	beq.n	80012ee <checkAndHandleTurn+0x42>
        }

        HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buffer, 8);
 8001342:	2208      	movs	r2, #8
 8001344:	4912      	ldr	r1, [pc, #72]	@ (8001390 <checkAndHandleTurn+0xe4>)
 8001346:	4813      	ldr	r0, [pc, #76]	@ (8001394 <checkAndHandleTurn+0xe8>)
 8001348:	f001 fd72 	bl	8002e30 <HAL_ADC_Start_DMA>
        position = line_data(); // Final update after recovery
 800134c:	f7ff feae 	bl	80010ac <line_data>
 8001350:	4603      	mov	r3, r0
 8001352:	4a0d      	ldr	r2, [pc, #52]	@ (8001388 <checkAndHandleTurn+0xdc>)
 8001354:	6013      	str	r3, [r2, #0]
    }

    // Update turn direction for next time
    turn = (position > 52 && position <= 70) ? -1 : (position < 20) ? 1 : turn;
 8001356:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <checkAndHandleTurn+0xdc>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2b34      	cmp	r3, #52	@ 0x34
 800135c:	dd03      	ble.n	8001366 <checkAndHandleTurn+0xba>
 800135e:	4b0a      	ldr	r3, [pc, #40]	@ (8001388 <checkAndHandleTurn+0xdc>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2b46      	cmp	r3, #70	@ 0x46
 8001364:	dd08      	ble.n	8001378 <checkAndHandleTurn+0xcc>
 8001366:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <checkAndHandleTurn+0xdc>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b13      	cmp	r3, #19
 800136c:	dd02      	ble.n	8001374 <checkAndHandleTurn+0xc8>
 800136e:	4b07      	ldr	r3, [pc, #28]	@ (800138c <checkAndHandleTurn+0xe0>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	e003      	b.n	800137c <checkAndHandleTurn+0xd0>
 8001374:	2301      	movs	r3, #1
 8001376:	e001      	b.n	800137c <checkAndHandleTurn+0xd0>
 8001378:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800137c:	4a03      	ldr	r2, [pc, #12]	@ (800138c <checkAndHandleTurn+0xe0>)
 800137e:	6013      	str	r3, [r2, #0]

    // Skip rest of loop if line is still lost
    if (position == 255) {
 8001380:	4b01      	ldr	r3, [pc, #4]	@ (8001388 <checkAndHandleTurn+0xdc>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2bff      	cmp	r3, #255	@ 0xff
        return;
    }
}
 8001386:	bd80      	pop	{r7, pc}
 8001388:	200004d4 	.word	0x200004d4
 800138c:	20000510 	.word	0x20000510
 8001390:	20000474 	.word	0x20000474
 8001394:	2000024c 	.word	0x2000024c

08001398 <callibrate>:

void callibrate(){
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
	//20 sec callibration
	for (int i=0;i<8;i++){
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	e012      	b.n	80013ca <callibrate+0x32>
		minValues[i]=adc_buffer[i];
 80013a4:	4a39      	ldr	r2, [pc, #228]	@ (800148c <callibrate+0xf4>)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013ac:	4938      	ldr	r1, [pc, #224]	@ (8001490 <callibrate+0xf8>)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		maxValues[i]=adc_buffer[i];
 80013b4:	4a35      	ldr	r2, [pc, #212]	@ (800148c <callibrate+0xf4>)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013bc:	4935      	ldr	r1, [pc, #212]	@ (8001494 <callibrate+0xfc>)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=0;i<8;i++){
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	3301      	adds	r3, #1
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2b07      	cmp	r3, #7
 80013ce:	dde9      	ble.n	80013a4 <callibrate+0xc>
	}
	for (int j = 0; j < 20000; j++) {
 80013d0:	2300      	movs	r3, #0
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	e037      	b.n	8001446 <callibrate+0xae>
		 HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 8);
 80013d6:	2208      	movs	r2, #8
 80013d8:	492c      	ldr	r1, [pc, #176]	@ (800148c <callibrate+0xf4>)
 80013da:	482f      	ldr	r0, [pc, #188]	@ (8001498 <callibrate+0x100>)
 80013dc:	f001 fd28 	bl	8002e30 <HAL_ADC_Start_DMA>
		 HAL_Delay(1);
 80013e0:	2001      	movs	r0, #1
 80013e2:	f001 faef 	bl	80029c4 <HAL_Delay>
	    for (int i = 0; i < 8; i++) {
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	e026      	b.n	800143a <callibrate+0xa2>
	      if (adc_buffer[i] < minValues[i]) {
 80013ec:	4a27      	ldr	r2, [pc, #156]	@ (800148c <callibrate+0xf4>)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013f4:	4926      	ldr	r1, [pc, #152]	@ (8001490 <callibrate+0xf8>)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d207      	bcs.n	8001410 <callibrate+0x78>
	        minValues[i] = adc_buffer[i];
 8001400:	4a22      	ldr	r2, [pc, #136]	@ (800148c <callibrate+0xf4>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001408:	4921      	ldr	r1, [pc, #132]	@ (8001490 <callibrate+0xf8>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	      }
	      if (adc_buffer[i] > maxValues[i]) {
 8001410:	4a1e      	ldr	r2, [pc, #120]	@ (800148c <callibrate+0xf4>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001418:	491e      	ldr	r1, [pc, #120]	@ (8001494 <callibrate+0xfc>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001420:	429a      	cmp	r2, r3
 8001422:	d907      	bls.n	8001434 <callibrate+0x9c>
	        maxValues[i] = adc_buffer[i];
 8001424:	4a19      	ldr	r2, [pc, #100]	@ (800148c <callibrate+0xf4>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800142c:	4919      	ldr	r1, [pc, #100]	@ (8001494 <callibrate+0xfc>)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    for (int i = 0; i < 8; i++) {
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3301      	adds	r3, #1
 8001438:	607b      	str	r3, [r7, #4]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b07      	cmp	r3, #7
 800143e:	ddd5      	ble.n	80013ec <callibrate+0x54>
	for (int j = 0; j < 20000; j++) {
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	3301      	adds	r3, #1
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800144c:	4293      	cmp	r3, r2
 800144e:	ddc2      	ble.n	80013d6 <callibrate+0x3e>
	      }
	    }
	  }
	for (int i = 0; i < 8; i++) {
 8001450:	2300      	movs	r3, #0
 8001452:	603b      	str	r3, [r7, #0]
 8001454:	e011      	b.n	800147a <callibrate+0xe2>
	        thresh[i] = (minValues[i] + maxValues[i]) / 2;
 8001456:	4a0e      	ldr	r2, [pc, #56]	@ (8001490 <callibrate+0xf8>)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800145e:	490d      	ldr	r1, [pc, #52]	@ (8001494 <callibrate+0xfc>)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001466:	4413      	add	r3, r2
 8001468:	085b      	lsrs	r3, r3, #1
 800146a:	4619      	mov	r1, r3
 800146c:	4a0b      	ldr	r2, [pc, #44]	@ (800149c <callibrate+0x104>)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 8; i++) {
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	3301      	adds	r3, #1
 8001478:	603b      	str	r3, [r7, #0]
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	2b07      	cmp	r3, #7
 800147e:	ddea      	ble.n	8001456 <callibrate+0xbe>
	}
	//add led functions
	saveToFlash();
 8001480:	f000 fa12 	bl	80018a8 <saveToFlash>
}
 8001484:	bf00      	nop
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20000474 	.word	0x20000474
 8001490:	20000494 	.word	0x20000494
 8001494:	200004b4 	.word	0x200004b4
 8001498:	2000024c 	.word	0x2000024c
 800149c:	20000020 	.word	0x20000020

080014a0 <setPIDParameter>:

void setPIDParameter(char *input) {
 80014a0:	b590      	push	{r4, r7, lr}
 80014a2:	b08f      	sub	sp, #60	@ 0x3c
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
    char *ptr = input;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	637b      	str	r3, [r7, #52]	@ 0x34

    while (*ptr != '\0') {
 80014ac:	e0b2      	b.n	8001614 <setPIDParameter+0x174>
        char type = *ptr;
 80014ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        ptr++;
 80014b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014b8:	3301      	adds	r3, #1
 80014ba:	637b      	str	r3, [r7, #52]	@ 0x34

        char valueStr[10] = {0};
 80014bc:	f107 030c 	add.w	r3, r7, #12
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	811a      	strh	r2, [r3, #8]
        int i = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	633b      	str	r3, [r7, #48]	@ 0x30

        while (*ptr != 'P' && *ptr != 'p' &&
 80014cc:	e00a      	b.n	80014e4 <setPIDParameter+0x44>
               *ptr != 'I' && *ptr != 'i' &&
               *ptr != 'D' && *ptr != 'd' &&
               *ptr != '\0') {
            valueStr[i++] = *ptr++;
 80014ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80014d0:	1c53      	adds	r3, r2, #1
 80014d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80014d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014d6:	1c59      	adds	r1, r3, #1
 80014d8:	6339      	str	r1, [r7, #48]	@ 0x30
 80014da:	7812      	ldrb	r2, [r2, #0]
 80014dc:	3338      	adds	r3, #56	@ 0x38
 80014de:	443b      	add	r3, r7
 80014e0:	f803 2c2c 	strb.w	r2, [r3, #-44]
        while (*ptr != 'P' && *ptr != 'p' &&
 80014e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014e6:	781b      	ldrb	r3, [r3, #0]
               *ptr != 'D' && *ptr != 'd' &&
 80014e8:	2b50      	cmp	r3, #80	@ 0x50
 80014ea:	d017      	beq.n	800151c <setPIDParameter+0x7c>
        while (*ptr != 'P' && *ptr != 'p' &&
 80014ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b70      	cmp	r3, #112	@ 0x70
 80014f2:	d013      	beq.n	800151c <setPIDParameter+0x7c>
               *ptr != 'I' && *ptr != 'i' &&
 80014f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014f6:	781b      	ldrb	r3, [r3, #0]
        while (*ptr != 'P' && *ptr != 'p' &&
 80014f8:	2b49      	cmp	r3, #73	@ 0x49
 80014fa:	d00f      	beq.n	800151c <setPIDParameter+0x7c>
               *ptr != 'I' && *ptr != 'i' &&
 80014fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b69      	cmp	r3, #105	@ 0x69
 8001502:	d00b      	beq.n	800151c <setPIDParameter+0x7c>
               *ptr != 'D' && *ptr != 'd' &&
 8001504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001506:	781b      	ldrb	r3, [r3, #0]
               *ptr != 'I' && *ptr != 'i' &&
 8001508:	2b44      	cmp	r3, #68	@ 0x44
 800150a:	d007      	beq.n	800151c <setPIDParameter+0x7c>
               *ptr != 'D' && *ptr != 'd' &&
 800150c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b64      	cmp	r3, #100	@ 0x64
 8001512:	d003      	beq.n	800151c <setPIDParameter+0x7c>
               *ptr != '\0') {
 8001514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001516:	781b      	ldrb	r3, [r3, #0]
               *ptr != 'D' && *ptr != 'd' &&
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1d8      	bne.n	80014ce <setPIDParameter+0x2e>
        }

        float value = atof(valueStr);
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	4618      	mov	r0, r3
 8001522:	f005 fd27 	bl	8006f74 <atof>
 8001526:	ec53 2b10 	vmov	r2, r3, d0
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	f7ff fb5d 	bl	8000bec <__aeabi_d2f>
 8001532:	4603      	mov	r3, r0
 8001534:	62bb      	str	r3, [r7, #40]	@ 0x28

        switch (type) {
 8001536:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800153a:	3b44      	subs	r3, #68	@ 0x44
 800153c:	2b2c      	cmp	r3, #44	@ 0x2c
 800153e:	d869      	bhi.n	8001614 <setPIDParameter+0x174>
 8001540:	a201      	add	r2, pc, #4	@ (adr r2, 8001548 <setPIDParameter+0xa8>)
 8001542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001546:	bf00      	nop
 8001548:	0800160d 	.word	0x0800160d
 800154c:	08001615 	.word	0x08001615
 8001550:	08001615 	.word	0x08001615
 8001554:	08001615 	.word	0x08001615
 8001558:	08001615 	.word	0x08001615
 800155c:	08001605 	.word	0x08001605
 8001560:	08001615 	.word	0x08001615
 8001564:	08001615 	.word	0x08001615
 8001568:	08001615 	.word	0x08001615
 800156c:	08001615 	.word	0x08001615
 8001570:	08001615 	.word	0x08001615
 8001574:	08001615 	.word	0x08001615
 8001578:	080015fd 	.word	0x080015fd
 800157c:	08001615 	.word	0x08001615
 8001580:	08001615 	.word	0x08001615
 8001584:	08001615 	.word	0x08001615
 8001588:	08001615 	.word	0x08001615
 800158c:	08001615 	.word	0x08001615
 8001590:	08001615 	.word	0x08001615
 8001594:	08001615 	.word	0x08001615
 8001598:	08001615 	.word	0x08001615
 800159c:	08001615 	.word	0x08001615
 80015a0:	08001615 	.word	0x08001615
 80015a4:	08001615 	.word	0x08001615
 80015a8:	08001615 	.word	0x08001615
 80015ac:	08001615 	.word	0x08001615
 80015b0:	08001615 	.word	0x08001615
 80015b4:	08001615 	.word	0x08001615
 80015b8:	08001615 	.word	0x08001615
 80015bc:	08001615 	.word	0x08001615
 80015c0:	08001615 	.word	0x08001615
 80015c4:	08001615 	.word	0x08001615
 80015c8:	0800160d 	.word	0x0800160d
 80015cc:	08001615 	.word	0x08001615
 80015d0:	08001615 	.word	0x08001615
 80015d4:	08001615 	.word	0x08001615
 80015d8:	08001615 	.word	0x08001615
 80015dc:	08001605 	.word	0x08001605
 80015e0:	08001615 	.word	0x08001615
 80015e4:	08001615 	.word	0x08001615
 80015e8:	08001615 	.word	0x08001615
 80015ec:	08001615 	.word	0x08001615
 80015f0:	08001615 	.word	0x08001615
 80015f4:	08001615 	.word	0x08001615
 80015f8:	080015fd 	.word	0x080015fd
            case 'P': case 'p':
                Kp = value;
 80015fc:	4a15      	ldr	r2, [pc, #84]	@ (8001654 <setPIDParameter+0x1b4>)
 80015fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001600:	6013      	str	r3, [r2, #0]
                break;
 8001602:	e007      	b.n	8001614 <setPIDParameter+0x174>
            case 'I': case 'i':
                Ki = value;
 8001604:	4a14      	ldr	r2, [pc, #80]	@ (8001658 <setPIDParameter+0x1b8>)
 8001606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001608:	6013      	str	r3, [r2, #0]
                break;
 800160a:	e003      	b.n	8001614 <setPIDParameter+0x174>
            case 'D': case 'd':
                Kd = value;
 800160c:	4a13      	ldr	r2, [pc, #76]	@ (800165c <setPIDParameter+0x1bc>)
 800160e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001610:	6013      	str	r3, [r2, #0]
                break;
 8001612:	bf00      	nop
    while (*ptr != '\0') {
 8001614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	f47f af48 	bne.w	80014ae <setPIDParameter+0xe>
        }
    }

    char confirm[] = "PID updated\n";
 800161e:	4b10      	ldr	r3, [pc, #64]	@ (8001660 <setPIDParameter+0x1c0>)
 8001620:	f107 0418 	add.w	r4, r7, #24
 8001624:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001626:	c407      	stmia	r4!, {r0, r1, r2}
 8001628:	7023      	strb	r3, [r4, #0]
    HAL_UART_Transmit(&huart6, (uint8_t*)confirm, strlen(confirm), HAL_MAX_DELAY);
 800162a:	f107 0318 	add.w	r3, r7, #24
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe fde0 	bl	80001f4 <strlen>
 8001634:	4603      	mov	r3, r0
 8001636:	b29a      	uxth	r2, r3
 8001638:	f107 0118 	add.w	r1, r7, #24
 800163c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001640:	4808      	ldr	r0, [pc, #32]	@ (8001664 <setPIDParameter+0x1c4>)
 8001642:	f004 fac9 	bl	8005bd8 <HAL_UART_Transmit>
    saveToFlash();
 8001646:	f000 f92f 	bl	80018a8 <saveToFlash>
}
 800164a:	bf00      	nop
 800164c:	373c      	adds	r7, #60	@ 0x3c
 800164e:	46bd      	mov	sp, r7
 8001650:	bd90      	pop	{r4, r7, pc}
 8001652:	bf00      	nop
 8001654:	20000040 	.word	0x20000040
 8001658:	20000044 	.word	0x20000044
 800165c:	20000048 	.word	0x20000048
 8001660:	08009f00 	.word	0x08009f00
 8001664:	200003cc 	.word	0x200003cc

08001668 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001668:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800166c:	b0ae      	sub	sp, #184	@ 0xb8
 800166e:	af04      	add	r7, sp, #16
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	460b      	mov	r3, r1
 8001674:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == USART6) {
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a58      	ldr	r2, [pc, #352]	@ (80017dc <HAL_UARTEx_RxEventCallback+0x174>)
 800167c:	4293      	cmp	r3, r2
 800167e:	f040 80a8 	bne.w	80017d2 <HAL_UARTEx_RxEventCallback+0x16a>
        memset(main_buffer, '\0', 16);
 8001682:	2210      	movs	r2, #16
 8001684:	2100      	movs	r1, #0
 8001686:	4856      	ldr	r0, [pc, #344]	@ (80017e0 <HAL_UARTEx_RxEventCallback+0x178>)
 8001688:	f006 fb6c 	bl	8007d64 <memset>
        memcpy(main_buffer, rx_buffer, Size);
 800168c:	887b      	ldrh	r3, [r7, #2]
 800168e:	461a      	mov	r2, r3
 8001690:	4954      	ldr	r1, [pc, #336]	@ (80017e4 <HAL_UARTEx_RxEventCallback+0x17c>)
 8001692:	4853      	ldr	r0, [pc, #332]	@ (80017e0 <HAL_UARTEx_RxEventCallback+0x178>)
 8001694:	f006 fbad 	bl	8007df2 <memcpy>
        memset(rx_buffer, '\0', 16);
 8001698:	2210      	movs	r2, #16
 800169a:	2100      	movs	r1, #0
 800169c:	4851      	ldr	r0, [pc, #324]	@ (80017e4 <HAL_UARTEx_RxEventCallback+0x17c>)
 800169e:	f006 fb61 	bl	8007d64 <memset>

        // Handle 'Q' query
        if (strcmp((char*)main_buffer, "Q") == 0) {
 80016a2:	4951      	ldr	r1, [pc, #324]	@ (80017e8 <HAL_UARTEx_RxEventCallback+0x180>)
 80016a4:	484e      	ldr	r0, [pc, #312]	@ (80017e0 <HAL_UARTEx_RxEventCallback+0x178>)
 80016a6:	f7fe fd9b 	bl	80001e0 <strcmp>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d15b      	bne.n	8001768 <HAL_UARTEx_RxEventCallback+0x100>
            char status[128];

            // Send PID values
            sprintf(status, "Kp=%.2f Ki=%.3f Kd=%.2f\nThresh: ", (double)Kp, (double)Ki, (double)Kd); // @suppress("Float formatting support")
 80016b0:	4b4e      	ldr	r3, [pc, #312]	@ (80017ec <HAL_UARTEx_RxEventCallback+0x184>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7fe ff5f 	bl	8000578 <__aeabi_f2d>
 80016ba:	4680      	mov	r8, r0
 80016bc:	4689      	mov	r9, r1
 80016be:	4b4c      	ldr	r3, [pc, #304]	@ (80017f0 <HAL_UARTEx_RxEventCallback+0x188>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe ff58 	bl	8000578 <__aeabi_f2d>
 80016c8:	4604      	mov	r4, r0
 80016ca:	460d      	mov	r5, r1
 80016cc:	4b49      	ldr	r3, [pc, #292]	@ (80017f4 <HAL_UARTEx_RxEventCallback+0x18c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe ff51 	bl	8000578 <__aeabi_f2d>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	f107 0008 	add.w	r0, r7, #8
 80016de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80016e2:	e9cd 4500 	strd	r4, r5, [sp]
 80016e6:	4642      	mov	r2, r8
 80016e8:	464b      	mov	r3, r9
 80016ea:	4943      	ldr	r1, [pc, #268]	@ (80017f8 <HAL_UARTEx_RxEventCallback+0x190>)
 80016ec:	f005 fc46 	bl	8006f7c <siprintf>
            HAL_UART_Transmit(&huart6, (uint8_t*)status, strlen(status), HAL_MAX_DELAY);
 80016f0:	f107 0308 	add.w	r3, r7, #8
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7fe fd7d 	bl	80001f4 <strlen>
 80016fa:	4603      	mov	r3, r0
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	f107 0108 	add.w	r1, r7, #8
 8001702:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001706:	483d      	ldr	r0, [pc, #244]	@ (80017fc <HAL_UARTEx_RxEventCallback+0x194>)
 8001708:	f004 fa66 	bl	8005bd8 <HAL_UART_Transmit>

            // Send all 8 threshold values in one line
            for (int i = 0; i < 8; i++) {
 800170c:	2300      	movs	r3, #0
 800170e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001712:	e01d      	b.n	8001750 <HAL_UARTEx_RxEventCallback+0xe8>
                char tbuf[8];
                sprintf(tbuf, "%d ", thresh[i]);
 8001714:	4a3a      	ldr	r2, [pc, #232]	@ (8001800 <HAL_UARTEx_RxEventCallback+0x198>)
 8001716:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800171a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800171e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001722:	4938      	ldr	r1, [pc, #224]	@ (8001804 <HAL_UARTEx_RxEventCallback+0x19c>)
 8001724:	4618      	mov	r0, r3
 8001726:	f005 fc29 	bl	8006f7c <siprintf>
                HAL_UART_Transmit(&huart6, (uint8_t*)tbuf, strlen(tbuf), HAL_MAX_DELAY);
 800172a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe fd60 	bl	80001f4 <strlen>
 8001734:	4603      	mov	r3, r0
 8001736:	b29a      	uxth	r2, r3
 8001738:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 800173c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001740:	482e      	ldr	r0, [pc, #184]	@ (80017fc <HAL_UARTEx_RxEventCallback+0x194>)
 8001742:	f004 fa49 	bl	8005bd8 <HAL_UART_Transmit>
            for (int i = 0; i < 8; i++) {
 8001746:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800174a:	3301      	adds	r3, #1
 800174c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001750:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001754:	2b07      	cmp	r3, #7
 8001756:	dddd      	ble.n	8001714 <HAL_UARTEx_RxEventCallback+0xac>
            }

            HAL_UART_Transmit(&huart6, (uint8_t*)"\n", 1, HAL_MAX_DELAY);
 8001758:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800175c:	2201      	movs	r2, #1
 800175e:	492a      	ldr	r1, [pc, #168]	@ (8001808 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8001760:	4826      	ldr	r0, [pc, #152]	@ (80017fc <HAL_UARTEx_RxEventCallback+0x194>)
 8001762:	f004 fa39 	bl	8005bd8 <HAL_UART_Transmit>
 8001766:	e027      	b.n	80017b8 <HAL_UARTEx_RxEventCallback+0x150>
        }

        // Handle 'C' or 'c' for calibration
        else if ((main_buffer[0] == 'C' || main_buffer[0] == 'c') && main_buffer[1] == '\0') {
 8001768:	4b1d      	ldr	r3, [pc, #116]	@ (80017e0 <HAL_UARTEx_RxEventCallback+0x178>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b43      	cmp	r3, #67	@ 0x43
 800176e:	d003      	beq.n	8001778 <HAL_UARTEx_RxEventCallback+0x110>
 8001770:	4b1b      	ldr	r3, [pc, #108]	@ (80017e0 <HAL_UARTEx_RxEventCallback+0x178>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b63      	cmp	r3, #99	@ 0x63
 8001776:	d11c      	bne.n	80017b2 <HAL_UARTEx_RxEventCallback+0x14a>
 8001778:	4b19      	ldr	r3, [pc, #100]	@ (80017e0 <HAL_UARTEx_RxEventCallback+0x178>)
 800177a:	785b      	ldrb	r3, [r3, #1]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d118      	bne.n	80017b2 <HAL_UARTEx_RxEventCallback+0x14a>
            callibrate();
 8001780:	f7ff fe0a 	bl	8001398 <callibrate>
            char msg[] = "Calibration done\n";
 8001784:	4b21      	ldr	r3, [pc, #132]	@ (800180c <HAL_UARTEx_RxEventCallback+0x1a4>)
 8001786:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 800178a:	461d      	mov	r5, r3
 800178c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800178e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001790:	682b      	ldr	r3, [r5, #0]
 8001792:	8023      	strh	r3, [r4, #0]
            HAL_UART_Transmit(&huart6, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001794:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe fd2b 	bl	80001f4 <strlen>
 800179e:	4603      	mov	r3, r0
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 80017a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017aa:	4814      	ldr	r0, [pc, #80]	@ (80017fc <HAL_UARTEx_RxEventCallback+0x194>)
 80017ac:	f004 fa14 	bl	8005bd8 <HAL_UART_Transmit>
        else if ((main_buffer[0] == 'C' || main_buffer[0] == 'c') && main_buffer[1] == '\0') {
 80017b0:	e002      	b.n	80017b8 <HAL_UARTEx_RxEventCallback+0x150>
        }

        // Fallback: PID parameter input
        else {
            setPIDParameter((char*) main_buffer);
 80017b2:	480b      	ldr	r0, [pc, #44]	@ (80017e0 <HAL_UARTEx_RxEventCallback+0x178>)
 80017b4:	f7ff fe74 	bl	80014a0 <setPIDParameter>
        }

        // Restart DMA reception
        HAL_UARTEx_ReceiveToIdle_DMA(&huart6, rx_buffer, 16);
 80017b8:	2210      	movs	r2, #16
 80017ba:	490a      	ldr	r1, [pc, #40]	@ (80017e4 <HAL_UARTEx_RxEventCallback+0x17c>)
 80017bc:	480f      	ldr	r0, [pc, #60]	@ (80017fc <HAL_UARTEx_RxEventCallback+0x194>)
 80017be:	f004 fa96 	bl	8005cee <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 80017c2:	4b13      	ldr	r3, [pc, #76]	@ (8001810 <HAL_UARTEx_RxEventCallback+0x1a8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4b11      	ldr	r3, [pc, #68]	@ (8001810 <HAL_UARTEx_RxEventCallback+0x1a8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 0208 	bic.w	r2, r2, #8
 80017d0:	601a      	str	r2, [r3, #0]
    }
}
 80017d2:	bf00      	nop
 80017d4:	37a8      	adds	r7, #168	@ 0xa8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017dc:	40011400 	.word	0x40011400
 80017e0:	20000524 	.word	0x20000524
 80017e4:	20000514 	.word	0x20000514
 80017e8:	08009f10 	.word	0x08009f10
 80017ec:	20000040 	.word	0x20000040
 80017f0:	20000044 	.word	0x20000044
 80017f4:	20000048 	.word	0x20000048
 80017f8:	08009f14 	.word	0x08009f14
 80017fc:	200003cc 	.word	0x200003cc
 8001800:	20000020 	.word	0x20000020
 8001804:	08009f38 	.word	0x08009f38
 8001808:	08009f3c 	.word	0x08009f3c
 800180c:	08009f40 	.word	0x08009f40
 8001810:	20000414 	.word	0x20000414

08001814 <printSensorState>:


void printSensorState(void) {
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	@ 0x28
 8001818:	af00      	add	r7, sp, #0
    // Print sensor readings visually
    for (int i = 0; i < 8; i++) {
 800181a:	2300      	movs	r3, #0
 800181c:	627b      	str	r3, [r7, #36]	@ 0x24
 800181e:	e01b      	b.n	8001858 <printSensorState+0x44>
        if (adc_buffer[i] > thresh[i])
 8001820:	4a1a      	ldr	r2, [pc, #104]	@ (800188c <printSensorState+0x78>)
 8001822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001828:	4919      	ldr	r1, [pc, #100]	@ (8001890 <printSensorState+0x7c>)
 800182a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800182c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001830:	4293      	cmp	r3, r2
 8001832:	d907      	bls.n	8001844 <printSensorState+0x30>
            HAL_UART_Transmit(&huart6, (uint8_t*)" | ", 3, HAL_MAX_DELAY);
 8001834:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001838:	2203      	movs	r2, #3
 800183a:	4916      	ldr	r1, [pc, #88]	@ (8001894 <printSensorState+0x80>)
 800183c:	4816      	ldr	r0, [pc, #88]	@ (8001898 <printSensorState+0x84>)
 800183e:	f004 f9cb 	bl	8005bd8 <HAL_UART_Transmit>
 8001842:	e006      	b.n	8001852 <printSensorState+0x3e>
        else
            HAL_UART_Transmit(&huart6, (uint8_t*)" 0 ", 3, HAL_MAX_DELAY);
 8001844:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001848:	2203      	movs	r2, #3
 800184a:	4914      	ldr	r1, [pc, #80]	@ (800189c <printSensorState+0x88>)
 800184c:	4812      	ldr	r0, [pc, #72]	@ (8001898 <printSensorState+0x84>)
 800184e:	f004 f9c3 	bl	8005bd8 <HAL_UART_Transmit>
    for (int i = 0; i < 8; i++) {
 8001852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001854:	3301      	adds	r3, #1
 8001856:	627b      	str	r3, [r7, #36]	@ 0x24
 8001858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185a:	2b07      	cmp	r3, #7
 800185c:	dde0      	ble.n	8001820 <printSensorState+0xc>
    }

    // Print current line position
    char msg[32];
    sprintf(msg, " -> Pos: %d\n", position);
 800185e:	4b10      	ldr	r3, [pc, #64]	@ (80018a0 <printSensorState+0x8c>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	1d3b      	adds	r3, r7, #4
 8001864:	490f      	ldr	r1, [pc, #60]	@ (80018a4 <printSensorState+0x90>)
 8001866:	4618      	mov	r0, r3
 8001868:	f005 fb88 	bl	8006f7c <siprintf>
    HAL_UART_Transmit(&huart6, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe fcc0 	bl	80001f4 <strlen>
 8001874:	4603      	mov	r3, r0
 8001876:	b29a      	uxth	r2, r3
 8001878:	1d39      	adds	r1, r7, #4
 800187a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800187e:	4806      	ldr	r0, [pc, #24]	@ (8001898 <printSensorState+0x84>)
 8001880:	f004 f9aa 	bl	8005bd8 <HAL_UART_Transmit>
}
 8001884:	bf00      	nop
 8001886:	3728      	adds	r7, #40	@ 0x28
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000474 	.word	0x20000474
 8001890:	20000020 	.word	0x20000020
 8001894:	08009f54 	.word	0x08009f54
 8001898:	200003cc 	.word	0x200003cc
 800189c:	08009f58 	.word	0x08009f58
 80018a0:	200004d4 	.word	0x200004d4
 80018a4:	08009f5c 	.word	0x08009f5c

080018a8 <saveToFlash>:

void saveToFlash() {
 80018a8:	b5b0      	push	{r4, r5, r7, lr}
 80018aa:	b088      	sub	sp, #32
 80018ac:	af00      	add	r7, sp, #0

    HAL_FLASH_Unlock();
 80018ae:	f002 fbf9 	bl	80040a4 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t SectorError;
    uint32_t address = FLASH_USER_START_ADDR;
 80018b2:	4b39      	ldr	r3, [pc, #228]	@ (8001998 <saveToFlash+0xf0>)
 80018b4:	61fb      	str	r3, [r7, #28]

    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80018b6:	2300      	movs	r3, #0
 80018b8:	607b      	str	r3, [r7, #4]
    EraseInitStruct.Sector = FLASH_SECTOR_TO_ERASE;
 80018ba:	2305      	movs	r3, #5
 80018bc:	60fb      	str	r3, [r7, #12]
    EraseInitStruct.NbSectors = 1;
 80018be:	2301      	movs	r3, #1
 80018c0:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80018c2:	2302      	movs	r3, #2
 80018c4:	617b      	str	r3, [r7, #20]

    if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK) {
 80018c6:	463a      	mov	r2, r7
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	4611      	mov	r1, r2
 80018cc:	4618      	mov	r0, r3
 80018ce:	f002 fd5b 	bl	8004388 <HAL_FLASHEx_Erase>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d002      	beq.n	80018de <saveToFlash+0x36>
        HAL_FLASH_Lock();
 80018d8:	f002 fc06 	bl	80040e8 <HAL_FLASH_Lock>
 80018dc:	e055      	b.n	800198a <saveToFlash+0xe2>
        return;
    }

    // Write magic number
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, EEPROM_MAGIC);
 80018de:	a32c      	add	r3, pc, #176	@ (adr r3, 8001990 <saveToFlash+0xe8>)
 80018e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e4:	69f9      	ldr	r1, [r7, #28]
 80018e6:	2002      	movs	r0, #2
 80018e8:	f002 fb88 	bl	8003ffc <HAL_FLASH_Program>
    address += 4;
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	3304      	adds	r3, #4
 80018f0:	61fb      	str	r3, [r7, #28]

    // Write PID
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, *(double*)&Kp); address += 8;
 80018f2:	4b2a      	ldr	r3, [pc, #168]	@ (800199c <saveToFlash+0xf4>)
 80018f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f8:	4610      	mov	r0, r2
 80018fa:	4619      	mov	r1, r3
 80018fc:	f7ff f9f6 	bl	8000cec <__aeabi_d2ulz>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	69f9      	ldr	r1, [r7, #28]
 8001906:	2003      	movs	r0, #3
 8001908:	f002 fb78 	bl	8003ffc <HAL_FLASH_Program>
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	3308      	adds	r3, #8
 8001910:	61fb      	str	r3, [r7, #28]
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, *(double*)&Ki); address += 8;
 8001912:	4b23      	ldr	r3, [pc, #140]	@ (80019a0 <saveToFlash+0xf8>)
 8001914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001918:	4610      	mov	r0, r2
 800191a:	4619      	mov	r1, r3
 800191c:	f7ff f9e6 	bl	8000cec <__aeabi_d2ulz>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	69f9      	ldr	r1, [r7, #28]
 8001926:	2003      	movs	r0, #3
 8001928:	f002 fb68 	bl	8003ffc <HAL_FLASH_Program>
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	3308      	adds	r3, #8
 8001930:	61fb      	str	r3, [r7, #28]
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, *(double*)&Kd); address += 8;
 8001932:	4b1c      	ldr	r3, [pc, #112]	@ (80019a4 <saveToFlash+0xfc>)
 8001934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001938:	4610      	mov	r0, r2
 800193a:	4619      	mov	r1, r3
 800193c:	f7ff f9d6 	bl	8000cec <__aeabi_d2ulz>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	69f9      	ldr	r1, [r7, #28]
 8001946:	2003      	movs	r0, #3
 8001948:	f002 fb58 	bl	8003ffc <HAL_FLASH_Program>
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	3308      	adds	r3, #8
 8001950:	61fb      	str	r3, [r7, #28]

    // Write threshold array
    for (int i = 0; i < 8; i++) {
 8001952:	2300      	movs	r3, #0
 8001954:	61bb      	str	r3, [r7, #24]
 8001956:	e013      	b.n	8001980 <saveToFlash+0xd8>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, (uint32_t)thresh[i]);
 8001958:	4a13      	ldr	r2, [pc, #76]	@ (80019a8 <saveToFlash+0x100>)
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001960:	461a      	mov	r2, r3
 8001962:	2300      	movs	r3, #0
 8001964:	4614      	mov	r4, r2
 8001966:	461d      	mov	r5, r3
 8001968:	4622      	mov	r2, r4
 800196a:	462b      	mov	r3, r5
 800196c:	69f9      	ldr	r1, [r7, #28]
 800196e:	2002      	movs	r0, #2
 8001970:	f002 fb44 	bl	8003ffc <HAL_FLASH_Program>
        address += 4;
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	3304      	adds	r3, #4
 8001978:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < 8; i++) {
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	3301      	adds	r3, #1
 800197e:	61bb      	str	r3, [r7, #24]
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	2b07      	cmp	r3, #7
 8001984:	dde8      	ble.n	8001958 <saveToFlash+0xb0>
    }

    HAL_FLASH_Lock();
 8001986:	f002 fbaf 	bl	80040e8 <HAL_FLASH_Lock>
}
 800198a:	3720      	adds	r7, #32
 800198c:	46bd      	mov	sp, r7
 800198e:	bdb0      	pop	{r4, r5, r7, pc}
 8001990:	deadbeef 	.word	0xdeadbeef
 8001994:	00000000 	.word	0x00000000
 8001998:	08020000 	.word	0x08020000
 800199c:	20000040 	.word	0x20000040
 80019a0:	20000044 	.word	0x20000044
 80019a4:	20000048 	.word	0x20000048
 80019a8:	20000020 	.word	0x20000020

080019ac <loadFromFlash>:

void loadFromFlash() {
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
    uint32_t address = FLASH_USER_START_ADDR;
 80019b2:	4b25      	ldr	r3, [pc, #148]	@ (8001a48 <loadFromFlash+0x9c>)
 80019b4:	60fb      	str	r3, [r7, #12]

    uint32_t magic = *(uint32_t*)address;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	607b      	str	r3, [r7, #4]
    address += 4;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	3304      	adds	r3, #4
 80019c0:	60fb      	str	r3, [r7, #12]

    if (magic != EEPROM_MAGIC) {
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a21      	ldr	r2, [pc, #132]	@ (8001a4c <loadFromFlash+0xa0>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d13a      	bne.n	8001a40 <loadFromFlash+0x94>
        // Flash is empty or invalid — don't load
        return;
    }

    // Load PID values
    Kp = *(double*)address; address += 8;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	f7ff f90a 	bl	8000bec <__aeabi_d2f>
 80019d8:	4603      	mov	r3, r0
 80019da:	4a1d      	ldr	r2, [pc, #116]	@ (8001a50 <loadFromFlash+0xa4>)
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	3308      	adds	r3, #8
 80019e2:	60fb      	str	r3, [r7, #12]
    Ki = *(double*)address; address += 8;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ea:	4610      	mov	r0, r2
 80019ec:	4619      	mov	r1, r3
 80019ee:	f7ff f8fd 	bl	8000bec <__aeabi_d2f>
 80019f2:	4603      	mov	r3, r0
 80019f4:	4a17      	ldr	r2, [pc, #92]	@ (8001a54 <loadFromFlash+0xa8>)
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	3308      	adds	r3, #8
 80019fc:	60fb      	str	r3, [r7, #12]
    Kd = *(double*)address; address += 8;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a04:	4610      	mov	r0, r2
 8001a06:	4619      	mov	r1, r3
 8001a08:	f7ff f8f0 	bl	8000bec <__aeabi_d2f>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	4a12      	ldr	r2, [pc, #72]	@ (8001a58 <loadFromFlash+0xac>)
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	3308      	adds	r3, #8
 8001a16:	60fb      	str	r3, [r7, #12]

    // Load threshold array
    for (int i = 0; i < 8; i++) {
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	e00c      	b.n	8001a38 <loadFromFlash+0x8c>
        thresh[i] = *(uint32_t*)address;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4619      	mov	r1, r3
 8001a24:	4a0d      	ldr	r2, [pc, #52]	@ (8001a5c <loadFromFlash+0xb0>)
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        address += 4;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	3304      	adds	r3, #4
 8001a30:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < 8; i++) {
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	3301      	adds	r3, #1
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	2b07      	cmp	r3, #7
 8001a3c:	ddef      	ble.n	8001a1e <loadFromFlash+0x72>
 8001a3e:	e000      	b.n	8001a42 <loadFromFlash+0x96>
        return;
 8001a40:	bf00      	nop
    }
}
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	08020000 	.word	0x08020000
 8001a4c:	deadbeef 	.word	0xdeadbeef
 8001a50:	20000040 	.word	0x20000040
 8001a54:	20000044 	.word	0x20000044
 8001a58:	20000048 	.word	0x20000048
 8001a5c:	20000020 	.word	0x20000020

08001a60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a66:	f000 ff3b 	bl	80028e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a6a:	f000 f8ad 	bl	8001bc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a6e:	f000 fb69 	bl	8002144 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a72:	f000 fb3f 	bl	80020f4 <MX_DMA_Init>
  MX_ADC1_Init();
 8001a76:	f000 f91b 	bl	8001cb0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001a7a:	f000 f9cf 	bl	8001e1c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001a7e:	f000 fa5d 	bl	8001f3c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001a82:	f000 fab3 	bl	8001fec <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8001a86:	f000 fb0b 	bl	80020a0 <MX_USART6_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001a8a:	f000 f905 	bl	8001c98 <MX_NVIC_Init>


  /* USER CODE BEGIN 2 */
  // Start ADC with DMA
  HAL_ADC_Start_IT(&hadc1);
 8001a8e:	4841      	ldr	r0, [pc, #260]	@ (8001b94 <main+0x134>)
 8001a90:	f001 f800 	bl	8002a94 <HAL_ADC_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 8);
 8001a94:	2208      	movs	r2, #8
 8001a96:	4940      	ldr	r1, [pc, #256]	@ (8001b98 <main+0x138>)
 8001a98:	483e      	ldr	r0, [pc, #248]	@ (8001b94 <main+0x134>)
 8001a9a:	f001 f9c9 	bl	8002e30 <HAL_ADC_Start_DMA>

  // Initialize PWM outputs
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	483e      	ldr	r0, [pc, #248]	@ (8001b9c <main+0x13c>)
 8001aa2:	f003 fbd9 	bl	8005258 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001aa6:	2104      	movs	r1, #4
 8001aa8:	483c      	ldr	r0, [pc, #240]	@ (8001b9c <main+0x13c>)
 8001aaa:	f003 fbd5 	bl	8005258 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001aae:	2100      	movs	r1, #0
 8001ab0:	483b      	ldr	r0, [pc, #236]	@ (8001ba0 <main+0x140>)
 8001ab2:	f003 fbd1 	bl	8005258 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	483a      	ldr	r0, [pc, #232]	@ (8001ba4 <main+0x144>)
 8001aba:	f003 fbcd 	bl	8005258 <HAL_TIM_PWM_Start>

  // Initialize timing variable
  lastTime = HAL_GetTick();
 8001abe:	f000 ff75 	bl	80029ac <HAL_GetTick>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	4a38      	ldr	r2, [pc, #224]	@ (8001ba8 <main+0x148>)
 8001ac6:	6013      	str	r3, [r2, #0]

  //UART
  HAL_UARTEx_ReceiveToIdle_DMA(&huart6, rx_buffer, sizeof(rx_buffer));
 8001ac8:	2210      	movs	r2, #16
 8001aca:	4938      	ldr	r1, [pc, #224]	@ (8001bac <main+0x14c>)
 8001acc:	4838      	ldr	r0, [pc, #224]	@ (8001bb0 <main+0x150>)
 8001ace:	f004 f90e 	bl	8005cee <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 8001ad2:	4b38      	ldr	r3, [pc, #224]	@ (8001bb4 <main+0x154>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b36      	ldr	r3, [pc, #216]	@ (8001bb4 <main+0x154>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 0208 	bic.w	r2, r2, #8
 8001ae0:	601a      	str	r2, [r3, #0]

  //EEPROM
  loadFromFlash();
 8001ae2:	f7ff ff63 	bl	80019ac <loadFromFlash>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* USER CODE BEGIN WHILE */
  while (1) {
      // Start new ADC conversion
      HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 8);
 8001ae6:	2208      	movs	r2, #8
 8001ae8:	492b      	ldr	r1, [pc, #172]	@ (8001b98 <main+0x138>)
 8001aea:	482a      	ldr	r0, [pc, #168]	@ (8001b94 <main+0x134>)
 8001aec:	f001 f9a0 	bl	8002e30 <HAL_ADC_Start_DMA>


      // Get line position
      int position = line_data();
 8001af0:	f7ff fadc 	bl	80010ac <line_data>
 8001af4:	6078      	str	r0, [r7, #4]

      checkAndHandleTurn();
 8001af6:	f7ff fbd9 	bl	80012ac <checkAndHandleTurn>

      // Handle line following
      if (position != 255) {  // If line is detected
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2bff      	cmp	r3, #255	@ 0xff
 8001afe:	d03c      	beq.n	8001b7a <main+0x11a>
          // Calculate error
          error = position - setpoint;
 8001b00:	4b2d      	ldr	r3, [pc, #180]	@ (8001bb8 <main+0x158>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe fd23 	bl	8000554 <__aeabi_i2d>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	492a      	ldr	r1, [pc, #168]	@ (8001bbc <main+0x15c>)
 8001b14:	e9c1 2300 	strd	r2, r3, [r1]

          // Compute PID and apply to motors
          computePID(error, position);
 8001b18:	4b28      	ldr	r3, [pc, #160]	@ (8001bbc <main+0x15c>)
 8001b1a:	ed93 7b00 	vldr	d7, [r3]
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	eeb0 0a47 	vmov.f32	s0, s14
 8001b24:	eef0 0a67 	vmov.f32	s1, s15
 8001b28:	f7ff fafe 	bl	8001128 <computePID>
          setMotorSpeed(0, base_speed - correction);
 8001b2c:	4b24      	ldr	r3, [pc, #144]	@ (8001bc0 <main+0x160>)
 8001b2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b32:	4b24      	ldr	r3, [pc, #144]	@ (8001bc4 <main+0x164>)
 8001b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b38:	f7fe fbbe 	bl	80002b8 <__aeabi_dsub>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4610      	mov	r0, r2
 8001b42:	4619      	mov	r1, r3
 8001b44:	f7ff f80a 	bl	8000b5c <__aeabi_d2iz>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	f7ff fa69 	bl	8001024 <setMotorSpeed>
          setMotorSpeed(1, base_speed + correction);
 8001b52:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc0 <main+0x160>)
 8001b54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b58:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc4 <main+0x164>)
 8001b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5e:	f7fe fbad 	bl	80002bc <__adddf3>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4610      	mov	r0, r2
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f7fe fff7 	bl	8000b5c <__aeabi_d2iz>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	4619      	mov	r1, r3
 8001b72:	2001      	movs	r0, #1
 8001b74:	f7ff fa56 	bl	8001024 <setMotorSpeed>
 8001b78:	e008      	b.n	8001b8c <main+0x12c>
      }
      else {  // Line lost - implement recovery behavior
          setMotorSpeed(0, -100);  // Turn in place
 8001b7a:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 8001b7e:	2000      	movs	r0, #0
 8001b80:	f7ff fa50 	bl	8001024 <setMotorSpeed>
          setMotorSpeed(1, 100);
 8001b84:	2164      	movs	r1, #100	@ 0x64
 8001b86:	2001      	movs	r0, #1
 8001b88:	f7ff fa4c 	bl	8001024 <setMotorSpeed>
      }
      printSensorState();
 8001b8c:	f7ff fe42 	bl	8001814 <printSensorState>
  while (1) {
 8001b90:	e7a9      	b.n	8001ae6 <main+0x86>
 8001b92:	bf00      	nop
 8001b94:	2000024c 	.word	0x2000024c
 8001b98:	20000474 	.word	0x20000474
 8001b9c:	200002f4 	.word	0x200002f4
 8001ba0:	2000033c 	.word	0x2000033c
 8001ba4:	20000384 	.word	0x20000384
 8001ba8:	20000500 	.word	0x20000500
 8001bac:	20000514 	.word	0x20000514
 8001bb0:	200003cc 	.word	0x200003cc
 8001bb4:	20000414 	.word	0x20000414
 8001bb8:	2000004c 	.word	0x2000004c
 8001bbc:	200004d8 	.word	0x200004d8
 8001bc0:	20000050 	.word	0x20000050
 8001bc4:	20000508 	.word	0x20000508

08001bc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b094      	sub	sp, #80	@ 0x50
 8001bcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bce:	f107 0320 	add.w	r3, r7, #32
 8001bd2:	2230      	movs	r2, #48	@ 0x30
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f006 f8c4 	bl	8007d64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bdc:	f107 030c 	add.w	r3, r7, #12
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	60da      	str	r2, [r3, #12]
 8001bea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bec:	2300      	movs	r3, #0
 8001bee:	60bb      	str	r3, [r7, #8]
 8001bf0:	4b27      	ldr	r3, [pc, #156]	@ (8001c90 <SystemClock_Config+0xc8>)
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf4:	4a26      	ldr	r2, [pc, #152]	@ (8001c90 <SystemClock_Config+0xc8>)
 8001bf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bfa:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bfc:	4b24      	ldr	r3, [pc, #144]	@ (8001c90 <SystemClock_Config+0xc8>)
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c08:	2300      	movs	r3, #0
 8001c0a:	607b      	str	r3, [r7, #4]
 8001c0c:	4b21      	ldr	r3, [pc, #132]	@ (8001c94 <SystemClock_Config+0xcc>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a20      	ldr	r2, [pc, #128]	@ (8001c94 <SystemClock_Config+0xcc>)
 8001c12:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	4b1e      	ldr	r3, [pc, #120]	@ (8001c94 <SystemClock_Config+0xcc>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c20:	607b      	str	r3, [r7, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c24:	2302      	movs	r3, #2
 8001c26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c2c:	2310      	movs	r3, #16
 8001c2e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c30:	2302      	movs	r3, #2
 8001c32:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c34:	2300      	movs	r3, #0
 8001c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c38:	2308      	movs	r3, #8
 8001c3a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001c3c:	2364      	movs	r3, #100	@ 0x64
 8001c3e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c40:	2302      	movs	r3, #2
 8001c42:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c44:	2304      	movs	r3, #4
 8001c46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c48:	f107 0320 	add.w	r3, r7, #32
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f002 fe5b 	bl	8004908 <HAL_RCC_OscConfig>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c58:	f000 faec 	bl	8002234 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c5c:	230f      	movs	r3, #15
 8001c5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c60:	2302      	movs	r3, #2
 8001c62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c72:	f107 030c 	add.w	r3, r7, #12
 8001c76:	2103      	movs	r1, #3
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f003 f8bd 	bl	8004df8 <HAL_RCC_ClockConfig>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001c84:	f000 fad6 	bl	8002234 <Error_Handler>
  }
}
 8001c88:	bf00      	nop
 8001c8a:	3750      	adds	r7, #80	@ 0x50
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40007000 	.word	0x40007000

08001c98 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	2012      	movs	r0, #18
 8001ca2:	f001 fd72 	bl	800378a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001ca6:	2012      	movs	r0, #18
 8001ca8:	f001 fd8b 	bl	80037c2 <HAL_NVIC_EnableIRQ>
}
 8001cac:	bf00      	nop
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cb6:	463b      	mov	r3, r7
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001cc2:	4b53      	ldr	r3, [pc, #332]	@ (8001e10 <MX_ADC1_Init+0x160>)
 8001cc4:	4a53      	ldr	r2, [pc, #332]	@ (8001e14 <MX_ADC1_Init+0x164>)
 8001cc6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001cc8:	4b51      	ldr	r3, [pc, #324]	@ (8001e10 <MX_ADC1_Init+0x160>)
 8001cca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001cce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001cd0:	4b4f      	ldr	r3, [pc, #316]	@ (8001e10 <MX_ADC1_Init+0x160>)
 8001cd2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001cd6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001cd8:	4b4d      	ldr	r3, [pc, #308]	@ (8001e10 <MX_ADC1_Init+0x160>)
 8001cda:	2201      	movs	r2, #1
 8001cdc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001cde:	4b4c      	ldr	r3, [pc, #304]	@ (8001e10 <MX_ADC1_Init+0x160>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ce4:	4b4a      	ldr	r3, [pc, #296]	@ (8001e10 <MX_ADC1_Init+0x160>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cec:	4b48      	ldr	r3, [pc, #288]	@ (8001e10 <MX_ADC1_Init+0x160>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cf2:	4b47      	ldr	r3, [pc, #284]	@ (8001e10 <MX_ADC1_Init+0x160>)
 8001cf4:	4a48      	ldr	r2, [pc, #288]	@ (8001e18 <MX_ADC1_Init+0x168>)
 8001cf6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cf8:	4b45      	ldr	r3, [pc, #276]	@ (8001e10 <MX_ADC1_Init+0x160>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8001cfe:	4b44      	ldr	r3, [pc, #272]	@ (8001e10 <MX_ADC1_Init+0x160>)
 8001d00:	2208      	movs	r2, #8
 8001d02:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001d04:	4b42      	ldr	r3, [pc, #264]	@ (8001e10 <MX_ADC1_Init+0x160>)
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001d0c:	4b40      	ldr	r3, [pc, #256]	@ (8001e10 <MX_ADC1_Init+0x160>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d12:	483f      	ldr	r0, [pc, #252]	@ (8001e10 <MX_ADC1_Init+0x160>)
 8001d14:	f000 fe7a 	bl	8002a0c <HAL_ADC_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001d1e:	f000 fa89 	bl	8002234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d26:	2301      	movs	r3, #1
 8001d28:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001d2a:	2304      	movs	r3, #4
 8001d2c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d2e:	463b      	mov	r3, r7
 8001d30:	4619      	mov	r1, r3
 8001d32:	4837      	ldr	r0, [pc, #220]	@ (8001e10 <MX_ADC1_Init+0x160>)
 8001d34:	f001 f994 	bl	8003060 <HAL_ADC_ConfigChannel>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001d3e:	f000 fa79 	bl	8002234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d42:	2301      	movs	r3, #1
 8001d44:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001d46:	2302      	movs	r3, #2
 8001d48:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d4a:	463b      	mov	r3, r7
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4830      	ldr	r0, [pc, #192]	@ (8001e10 <MX_ADC1_Init+0x160>)
 8001d50:	f001 f986 	bl	8003060 <HAL_ADC_ConfigChannel>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001d5a:	f000 fa6b 	bl	8002234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001d62:	2303      	movs	r3, #3
 8001d64:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d66:	463b      	mov	r3, r7
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4829      	ldr	r0, [pc, #164]	@ (8001e10 <MX_ADC1_Init+0x160>)
 8001d6c:	f001 f978 	bl	8003060 <HAL_ADC_ConfigChannel>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8001d76:	f000 fa5d 	bl	8002234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001d7e:	2304      	movs	r3, #4
 8001d80:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d82:	463b      	mov	r3, r7
 8001d84:	4619      	mov	r1, r3
 8001d86:	4822      	ldr	r0, [pc, #136]	@ (8001e10 <MX_ADC1_Init+0x160>)
 8001d88:	f001 f96a 	bl	8003060 <HAL_ADC_ConfigChannel>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8001d92:	f000 fa4f 	bl	8002234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001d96:	2304      	movs	r3, #4
 8001d98:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001d9a:	2305      	movs	r3, #5
 8001d9c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d9e:	463b      	mov	r3, r7
 8001da0:	4619      	mov	r1, r3
 8001da2:	481b      	ldr	r0, [pc, #108]	@ (8001e10 <MX_ADC1_Init+0x160>)
 8001da4:	f001 f95c 	bl	8003060 <HAL_ADC_ConfigChannel>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8001dae:	f000 fa41 	bl	8002234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001db2:	2305      	movs	r3, #5
 8001db4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001db6:	2306      	movs	r3, #6
 8001db8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dba:	463b      	mov	r3, r7
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4814      	ldr	r0, [pc, #80]	@ (8001e10 <MX_ADC1_Init+0x160>)
 8001dc0:	f001 f94e 	bl	8003060 <HAL_ADC_ConfigChannel>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8001dca:	f000 fa33 	bl	8002234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001dce:	2306      	movs	r3, #6
 8001dd0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001dd2:	2307      	movs	r3, #7
 8001dd4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dd6:	463b      	mov	r3, r7
 8001dd8:	4619      	mov	r1, r3
 8001dda:	480d      	ldr	r0, [pc, #52]	@ (8001e10 <MX_ADC1_Init+0x160>)
 8001ddc:	f001 f940 	bl	8003060 <HAL_ADC_ConfigChannel>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 8001de6:	f000 fa25 	bl	8002234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001dea:	2307      	movs	r3, #7
 8001dec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001dee:	2308      	movs	r3, #8
 8001df0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001df2:	463b      	mov	r3, r7
 8001df4:	4619      	mov	r1, r3
 8001df6:	4806      	ldr	r0, [pc, #24]	@ (8001e10 <MX_ADC1_Init+0x160>)
 8001df8:	f001 f932 	bl	8003060 <HAL_ADC_ConfigChannel>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 8001e02:	f000 fa17 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e06:	bf00      	nop
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	2000024c 	.word	0x2000024c
 8001e14:	40012000 	.word	0x40012000
 8001e18:	0f000001 	.word	0x0f000001

08001e1c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b092      	sub	sp, #72	@ 0x48
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e22:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
 8001e3c:	615a      	str	r2, [r3, #20]
 8001e3e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e40:	1d3b      	adds	r3, r7, #4
 8001e42:	2220      	movs	r2, #32
 8001e44:	2100      	movs	r1, #0
 8001e46:	4618      	mov	r0, r3
 8001e48:	f005 ff8c 	bl	8007d64 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e4c:	4b39      	ldr	r3, [pc, #228]	@ (8001f34 <MX_TIM1_Init+0x118>)
 8001e4e:	4a3a      	ldr	r2, [pc, #232]	@ (8001f38 <MX_TIM1_Init+0x11c>)
 8001e50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000-1;
 8001e52:	4b38      	ldr	r3, [pc, #224]	@ (8001f34 <MX_TIM1_Init+0x118>)
 8001e54:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e58:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e5a:	4b36      	ldr	r3, [pc, #216]	@ (8001f34 <MX_TIM1_Init+0x118>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200;
 8001e60:	4b34      	ldr	r3, [pc, #208]	@ (8001f34 <MX_TIM1_Init+0x118>)
 8001e62:	22c8      	movs	r2, #200	@ 0xc8
 8001e64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e66:	4b33      	ldr	r3, [pc, #204]	@ (8001f34 <MX_TIM1_Init+0x118>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e6c:	4b31      	ldr	r3, [pc, #196]	@ (8001f34 <MX_TIM1_Init+0x118>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e72:	4b30      	ldr	r3, [pc, #192]	@ (8001f34 <MX_TIM1_Init+0x118>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e78:	482e      	ldr	r0, [pc, #184]	@ (8001f34 <MX_TIM1_Init+0x118>)
 8001e7a:	f003 f99d 	bl	80051b8 <HAL_TIM_PWM_Init>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001e84:	f000 f9d6 	bl	8002234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e90:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001e94:	4619      	mov	r1, r3
 8001e96:	4827      	ldr	r0, [pc, #156]	@ (8001f34 <MX_TIM1_Init+0x118>)
 8001e98:	f003 fd8e 	bl	80059b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001ea2:	f000 f9c7 	bl	8002234 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ea6:	2360      	movs	r3, #96	@ 0x60
 8001ea8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ec2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	4619      	mov	r1, r3
 8001eca:	481a      	ldr	r0, [pc, #104]	@ (8001f34 <MX_TIM1_Init+0x118>)
 8001ecc:	f003 fa74 	bl	80053b8 <HAL_TIM_PWM_ConfigChannel>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001ed6:	f000 f9ad 	bl	8002234 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001eda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ede:	2204      	movs	r2, #4
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4814      	ldr	r0, [pc, #80]	@ (8001f34 <MX_TIM1_Init+0x118>)
 8001ee4:	f003 fa68 	bl	80053b8 <HAL_TIM_PWM_ConfigChannel>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001eee:	f000 f9a1 	bl	8002234 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001efe:	2300      	movs	r3, #0
 8001f00:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f0a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f10:	1d3b      	adds	r3, r7, #4
 8001f12:	4619      	mov	r1, r3
 8001f14:	4807      	ldr	r0, [pc, #28]	@ (8001f34 <MX_TIM1_Init+0x118>)
 8001f16:	f003 fdbd 	bl	8005a94 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001f20:	f000 f988 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f24:	4803      	ldr	r0, [pc, #12]	@ (8001f34 <MX_TIM1_Init+0x118>)
 8001f26:	f000 fa77 	bl	8002418 <HAL_TIM_MspPostInit>

}
 8001f2a:	bf00      	nop
 8001f2c:	3748      	adds	r7, #72	@ 0x48
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	200002f4 	.word	0x200002f4
 8001f38:	40010000 	.word	0x40010000

08001f3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08a      	sub	sp, #40	@ 0x28
 8001f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f42:	f107 0320 	add.w	r3, r7, #32
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f4c:	1d3b      	adds	r3, r7, #4
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	609a      	str	r2, [r3, #8]
 8001f56:	60da      	str	r2, [r3, #12]
 8001f58:	611a      	str	r2, [r3, #16]
 8001f5a:	615a      	str	r2, [r3, #20]
 8001f5c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f5e:	4b22      	ldr	r3, [pc, #136]	@ (8001fe8 <MX_TIM2_Init+0xac>)
 8001f60:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 8001f66:	4b20      	ldr	r3, [pc, #128]	@ (8001fe8 <MX_TIM2_Init+0xac>)
 8001f68:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe8 <MX_TIM2_Init+0xac>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 8001f74:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe8 <MX_TIM2_Init+0xac>)
 8001f76:	22c8      	movs	r2, #200	@ 0xc8
 8001f78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe8 <MX_TIM2_Init+0xac>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f80:	4b19      	ldr	r3, [pc, #100]	@ (8001fe8 <MX_TIM2_Init+0xac>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f86:	4818      	ldr	r0, [pc, #96]	@ (8001fe8 <MX_TIM2_Init+0xac>)
 8001f88:	f003 f916 	bl	80051b8 <HAL_TIM_PWM_Init>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001f92:	f000 f94f 	bl	8002234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f96:	2300      	movs	r3, #0
 8001f98:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f9e:	f107 0320 	add.w	r3, r7, #32
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4810      	ldr	r0, [pc, #64]	@ (8001fe8 <MX_TIM2_Init+0xac>)
 8001fa6:	f003 fd07 	bl	80059b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001fb0:	f000 f940 	bl	8002234 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fb4:	2360      	movs	r3, #96	@ 0x60
 8001fb6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fc4:	1d3b      	adds	r3, r7, #4
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4807      	ldr	r0, [pc, #28]	@ (8001fe8 <MX_TIM2_Init+0xac>)
 8001fcc:	f003 f9f4 	bl	80053b8 <HAL_TIM_PWM_ConfigChannel>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001fd6:	f000 f92d 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001fda:	4803      	ldr	r0, [pc, #12]	@ (8001fe8 <MX_TIM2_Init+0xac>)
 8001fdc:	f000 fa1c 	bl	8002418 <HAL_TIM_MspPostInit>

}
 8001fe0:	bf00      	nop
 8001fe2:	3728      	adds	r7, #40	@ 0x28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	2000033c 	.word	0x2000033c

08001fec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08a      	sub	sp, #40	@ 0x28
 8001ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff2:	f107 0320 	add.w	r3, r7, #32
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ffc:	1d3b      	adds	r3, r7, #4
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	605a      	str	r2, [r3, #4]
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	60da      	str	r2, [r3, #12]
 8002008:	611a      	str	r2, [r3, #16]
 800200a:	615a      	str	r2, [r3, #20]
 800200c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800200e:	4b22      	ldr	r3, [pc, #136]	@ (8002098 <MX_TIM3_Init+0xac>)
 8002010:	4a22      	ldr	r2, [pc, #136]	@ (800209c <MX_TIM3_Init+0xb0>)
 8002012:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8002014:	4b20      	ldr	r3, [pc, #128]	@ (8002098 <MX_TIM3_Init+0xac>)
 8002016:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800201a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800201c:	4b1e      	ldr	r3, [pc, #120]	@ (8002098 <MX_TIM3_Init+0xac>)
 800201e:	2200      	movs	r2, #0
 8002020:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8002022:	4b1d      	ldr	r3, [pc, #116]	@ (8002098 <MX_TIM3_Init+0xac>)
 8002024:	2264      	movs	r2, #100	@ 0x64
 8002026:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002028:	4b1b      	ldr	r3, [pc, #108]	@ (8002098 <MX_TIM3_Init+0xac>)
 800202a:	2200      	movs	r2, #0
 800202c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800202e:	4b1a      	ldr	r3, [pc, #104]	@ (8002098 <MX_TIM3_Init+0xac>)
 8002030:	2200      	movs	r2, #0
 8002032:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002034:	4818      	ldr	r0, [pc, #96]	@ (8002098 <MX_TIM3_Init+0xac>)
 8002036:	f003 f8bf 	bl	80051b8 <HAL_TIM_PWM_Init>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002040:	f000 f8f8 	bl	8002234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002044:	2300      	movs	r3, #0
 8002046:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002048:	2300      	movs	r3, #0
 800204a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800204c:	f107 0320 	add.w	r3, r7, #32
 8002050:	4619      	mov	r1, r3
 8002052:	4811      	ldr	r0, [pc, #68]	@ (8002098 <MX_TIM3_Init+0xac>)
 8002054:	f003 fcb0 	bl	80059b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800205e:	f000 f8e9 	bl	8002234 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002062:	2360      	movs	r3, #96	@ 0x60
 8002064:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002066:	2300      	movs	r3, #0
 8002068:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002072:	1d3b      	adds	r3, r7, #4
 8002074:	2200      	movs	r2, #0
 8002076:	4619      	mov	r1, r3
 8002078:	4807      	ldr	r0, [pc, #28]	@ (8002098 <MX_TIM3_Init+0xac>)
 800207a:	f003 f99d 	bl	80053b8 <HAL_TIM_PWM_ConfigChannel>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002084:	f000 f8d6 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002088:	4803      	ldr	r0, [pc, #12]	@ (8002098 <MX_TIM3_Init+0xac>)
 800208a:	f000 f9c5 	bl	8002418 <HAL_TIM_MspPostInit>

}
 800208e:	bf00      	nop
 8002090:	3728      	adds	r7, #40	@ 0x28
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000384 	.word	0x20000384
 800209c:	40000400 	.word	0x40000400

080020a0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80020a4:	4b11      	ldr	r3, [pc, #68]	@ (80020ec <MX_USART6_UART_Init+0x4c>)
 80020a6:	4a12      	ldr	r2, [pc, #72]	@ (80020f0 <MX_USART6_UART_Init+0x50>)
 80020a8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80020aa:	4b10      	ldr	r3, [pc, #64]	@ (80020ec <MX_USART6_UART_Init+0x4c>)
 80020ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020b0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80020b2:	4b0e      	ldr	r3, [pc, #56]	@ (80020ec <MX_USART6_UART_Init+0x4c>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80020b8:	4b0c      	ldr	r3, [pc, #48]	@ (80020ec <MX_USART6_UART_Init+0x4c>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80020be:	4b0b      	ldr	r3, [pc, #44]	@ (80020ec <MX_USART6_UART_Init+0x4c>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80020c4:	4b09      	ldr	r3, [pc, #36]	@ (80020ec <MX_USART6_UART_Init+0x4c>)
 80020c6:	220c      	movs	r2, #12
 80020c8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ca:	4b08      	ldr	r3, [pc, #32]	@ (80020ec <MX_USART6_UART_Init+0x4c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80020d0:	4b06      	ldr	r3, [pc, #24]	@ (80020ec <MX_USART6_UART_Init+0x4c>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80020d6:	4805      	ldr	r0, [pc, #20]	@ (80020ec <MX_USART6_UART_Init+0x4c>)
 80020d8:	f003 fd2e 	bl	8005b38 <HAL_UART_Init>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80020e2:	f000 f8a7 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	200003cc 	.word	0x200003cc
 80020f0:	40011400 	.word	0x40011400

080020f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	607b      	str	r3, [r7, #4]
 80020fe:	4b10      	ldr	r3, [pc, #64]	@ (8002140 <MX_DMA_Init+0x4c>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002102:	4a0f      	ldr	r2, [pc, #60]	@ (8002140 <MX_DMA_Init+0x4c>)
 8002104:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002108:	6313      	str	r3, [r2, #48]	@ 0x30
 800210a:	4b0d      	ldr	r3, [pc, #52]	@ (8002140 <MX_DMA_Init+0x4c>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002112:	607b      	str	r3, [r7, #4]
 8002114:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002116:	2200      	movs	r2, #0
 8002118:	2100      	movs	r1, #0
 800211a:	2038      	movs	r0, #56	@ 0x38
 800211c:	f001 fb35 	bl	800378a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002120:	2038      	movs	r0, #56	@ 0x38
 8002122:	f001 fb4e 	bl	80037c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002126:	2200      	movs	r2, #0
 8002128:	2100      	movs	r1, #0
 800212a:	2039      	movs	r0, #57	@ 0x39
 800212c:	f001 fb2d 	bl	800378a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002130:	2039      	movs	r0, #57	@ 0x39
 8002132:	f001 fb46 	bl	80037c2 <HAL_NVIC_EnableIRQ>

}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40023800 	.word	0x40023800

08002144 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08a      	sub	sp, #40	@ 0x28
 8002148:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214a:	f107 0314 	add.w	r3, r7, #20
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	605a      	str	r2, [r3, #4]
 8002154:	609a      	str	r2, [r3, #8]
 8002156:	60da      	str	r2, [r3, #12]
 8002158:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	4b32      	ldr	r3, [pc, #200]	@ (8002228 <MX_GPIO_Init+0xe4>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002162:	4a31      	ldr	r2, [pc, #196]	@ (8002228 <MX_GPIO_Init+0xe4>)
 8002164:	f043 0304 	orr.w	r3, r3, #4
 8002168:	6313      	str	r3, [r2, #48]	@ 0x30
 800216a:	4b2f      	ldr	r3, [pc, #188]	@ (8002228 <MX_GPIO_Init+0xe4>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	4b2b      	ldr	r3, [pc, #172]	@ (8002228 <MX_GPIO_Init+0xe4>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217e:	4a2a      	ldr	r2, [pc, #168]	@ (8002228 <MX_GPIO_Init+0xe4>)
 8002180:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002184:	6313      	str	r3, [r2, #48]	@ 0x30
 8002186:	4b28      	ldr	r3, [pc, #160]	@ (8002228 <MX_GPIO_Init+0xe4>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	4b24      	ldr	r3, [pc, #144]	@ (8002228 <MX_GPIO_Init+0xe4>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219a:	4a23      	ldr	r2, [pc, #140]	@ (8002228 <MX_GPIO_Init+0xe4>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021a2:	4b21      	ldr	r3, [pc, #132]	@ (8002228 <MX_GPIO_Init+0xe4>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	607b      	str	r3, [r7, #4]
 80021b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002228 <MX_GPIO_Init+0xe4>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002228 <MX_GPIO_Init+0xe4>)
 80021b8:	f043 0302 	orr.w	r3, r3, #2
 80021bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021be:	4b1a      	ldr	r3, [pc, #104]	@ (8002228 <MX_GPIO_Init+0xe4>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	607b      	str	r3, [r7, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80021ca:	2200      	movs	r2, #0
 80021cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021d0:	4816      	ldr	r0, [pc, #88]	@ (800222c <MX_GPIO_Init+0xe8>)
 80021d2:	f002 fb7f 	bl	80048d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80021d6:	2200      	movs	r2, #0
 80021d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80021dc:	4814      	ldr	r0, [pc, #80]	@ (8002230 <MX_GPIO_Init+0xec>)
 80021de:	f002 fb79 	bl	80048d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80021e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e8:	2301      	movs	r3, #1
 80021ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f0:	2300      	movs	r3, #0
 80021f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021f4:	f107 0314 	add.w	r3, r7, #20
 80021f8:	4619      	mov	r1, r3
 80021fa:	480c      	ldr	r0, [pc, #48]	@ (800222c <MX_GPIO_Init+0xe8>)
 80021fc:	f002 f9e6 	bl	80045cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002200:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002206:	2301      	movs	r3, #1
 8002208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800220a:	2302      	movs	r3, #2
 800220c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220e:	2300      	movs	r3, #0
 8002210:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002212:	f107 0314 	add.w	r3, r7, #20
 8002216:	4619      	mov	r1, r3
 8002218:	4805      	ldr	r0, [pc, #20]	@ (8002230 <MX_GPIO_Init+0xec>)
 800221a:	f002 f9d7 	bl	80045cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800221e:	bf00      	nop
 8002220:	3728      	adds	r7, #40	@ 0x28
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40023800 	.word	0x40023800
 800222c:	40020800 	.word	0x40020800
 8002230:	40020000 	.word	0x40020000

08002234 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002238:	b672      	cpsid	i
}
 800223a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800223c:	bf00      	nop
 800223e:	e7fd      	b.n	800223c <Error_Handler+0x8>

08002240 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	607b      	str	r3, [r7, #4]
 800224a:	4b10      	ldr	r3, [pc, #64]	@ (800228c <HAL_MspInit+0x4c>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224e:	4a0f      	ldr	r2, [pc, #60]	@ (800228c <HAL_MspInit+0x4c>)
 8002250:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002254:	6453      	str	r3, [r2, #68]	@ 0x44
 8002256:	4b0d      	ldr	r3, [pc, #52]	@ (800228c <HAL_MspInit+0x4c>)
 8002258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800225e:	607b      	str	r3, [r7, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	603b      	str	r3, [r7, #0]
 8002266:	4b09      	ldr	r3, [pc, #36]	@ (800228c <HAL_MspInit+0x4c>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226a:	4a08      	ldr	r2, [pc, #32]	@ (800228c <HAL_MspInit+0x4c>)
 800226c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002270:	6413      	str	r3, [r2, #64]	@ 0x40
 8002272:	4b06      	ldr	r3, [pc, #24]	@ (800228c <HAL_MspInit+0x4c>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800227a:	603b      	str	r3, [r7, #0]
 800227c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	40023800 	.word	0x40023800

08002290 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08a      	sub	sp, #40	@ 0x28
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 0314 	add.w	r3, r7, #20
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a2f      	ldr	r2, [pc, #188]	@ (800236c <HAL_ADC_MspInit+0xdc>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d157      	bne.n	8002362 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	613b      	str	r3, [r7, #16]
 80022b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002370 <HAL_ADC_MspInit+0xe0>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ba:	4a2d      	ldr	r2, [pc, #180]	@ (8002370 <HAL_ADC_MspInit+0xe0>)
 80022bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80022c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002370 <HAL_ADC_MspInit+0xe0>)
 80022c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ca:	613b      	str	r3, [r7, #16]
 80022cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	4b27      	ldr	r3, [pc, #156]	@ (8002370 <HAL_ADC_MspInit+0xe0>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d6:	4a26      	ldr	r2, [pc, #152]	@ (8002370 <HAL_ADC_MspInit+0xe0>)
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022de:	4b24      	ldr	r3, [pc, #144]	@ (8002370 <HAL_ADC_MspInit+0xe0>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80022ea:	23ff      	movs	r3, #255	@ 0xff
 80022ec:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022ee:	2303      	movs	r3, #3
 80022f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f6:	f107 0314 	add.w	r3, r7, #20
 80022fa:	4619      	mov	r1, r3
 80022fc:	481d      	ldr	r0, [pc, #116]	@ (8002374 <HAL_ADC_MspInit+0xe4>)
 80022fe:	f002 f965 	bl	80045cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002302:	4b1d      	ldr	r3, [pc, #116]	@ (8002378 <HAL_ADC_MspInit+0xe8>)
 8002304:	4a1d      	ldr	r2, [pc, #116]	@ (800237c <HAL_ADC_MspInit+0xec>)
 8002306:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002308:	4b1b      	ldr	r3, [pc, #108]	@ (8002378 <HAL_ADC_MspInit+0xe8>)
 800230a:	2200      	movs	r2, #0
 800230c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800230e:	4b1a      	ldr	r3, [pc, #104]	@ (8002378 <HAL_ADC_MspInit+0xe8>)
 8002310:	2200      	movs	r2, #0
 8002312:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002314:	4b18      	ldr	r3, [pc, #96]	@ (8002378 <HAL_ADC_MspInit+0xe8>)
 8002316:	2200      	movs	r2, #0
 8002318:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800231a:	4b17      	ldr	r3, [pc, #92]	@ (8002378 <HAL_ADC_MspInit+0xe8>)
 800231c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002320:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002322:	4b15      	ldr	r3, [pc, #84]	@ (8002378 <HAL_ADC_MspInit+0xe8>)
 8002324:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002328:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800232a:	4b13      	ldr	r3, [pc, #76]	@ (8002378 <HAL_ADC_MspInit+0xe8>)
 800232c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002330:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002332:	4b11      	ldr	r3, [pc, #68]	@ (8002378 <HAL_ADC_MspInit+0xe8>)
 8002334:	2200      	movs	r2, #0
 8002336:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002338:	4b0f      	ldr	r3, [pc, #60]	@ (8002378 <HAL_ADC_MspInit+0xe8>)
 800233a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800233e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002340:	4b0d      	ldr	r3, [pc, #52]	@ (8002378 <HAL_ADC_MspInit+0xe8>)
 8002342:	2200      	movs	r2, #0
 8002344:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002346:	480c      	ldr	r0, [pc, #48]	@ (8002378 <HAL_ADC_MspInit+0xe8>)
 8002348:	f001 fa56 	bl	80037f8 <HAL_DMA_Init>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002352:	f7ff ff6f 	bl	8002234 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a07      	ldr	r2, [pc, #28]	@ (8002378 <HAL_ADC_MspInit+0xe8>)
 800235a:	639a      	str	r2, [r3, #56]	@ 0x38
 800235c:	4a06      	ldr	r2, [pc, #24]	@ (8002378 <HAL_ADC_MspInit+0xe8>)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002362:	bf00      	nop
 8002364:	3728      	adds	r7, #40	@ 0x28
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40012000 	.word	0x40012000
 8002370:	40023800 	.word	0x40023800
 8002374:	40020000 	.word	0x40020000
 8002378:	20000294 	.word	0x20000294
 800237c:	40026410 	.word	0x40026410

08002380 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002380:	b480      	push	{r7}
 8002382:	b087      	sub	sp, #28
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a1f      	ldr	r2, [pc, #124]	@ (800240c <HAL_TIM_PWM_MspInit+0x8c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d10e      	bne.n	80023b0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	4b1e      	ldr	r3, [pc, #120]	@ (8002410 <HAL_TIM_PWM_MspInit+0x90>)
 8002398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239a:	4a1d      	ldr	r2, [pc, #116]	@ (8002410 <HAL_TIM_PWM_MspInit+0x90>)
 800239c:	f043 0301 	orr.w	r3, r3, #1
 80023a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80023a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002410 <HAL_TIM_PWM_MspInit+0x90>)
 80023a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	617b      	str	r3, [r7, #20]
 80023ac:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80023ae:	e026      	b.n	80023fe <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM2)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023b8:	d10e      	bne.n	80023d8 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	4b14      	ldr	r3, [pc, #80]	@ (8002410 <HAL_TIM_PWM_MspInit+0x90>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c2:	4a13      	ldr	r2, [pc, #76]	@ (8002410 <HAL_TIM_PWM_MspInit+0x90>)
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ca:	4b11      	ldr	r3, [pc, #68]	@ (8002410 <HAL_TIM_PWM_MspInit+0x90>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	613b      	str	r3, [r7, #16]
 80023d4:	693b      	ldr	r3, [r7, #16]
}
 80023d6:	e012      	b.n	80023fe <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002414 <HAL_TIM_PWM_MspInit+0x94>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d10d      	bne.n	80023fe <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002410 <HAL_TIM_PWM_MspInit+0x90>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ea:	4a09      	ldr	r2, [pc, #36]	@ (8002410 <HAL_TIM_PWM_MspInit+0x90>)
 80023ec:	f043 0302 	orr.w	r3, r3, #2
 80023f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80023f2:	4b07      	ldr	r3, [pc, #28]	@ (8002410 <HAL_TIM_PWM_MspInit+0x90>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
}
 80023fe:	bf00      	nop
 8002400:	371c      	adds	r7, #28
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40010000 	.word	0x40010000
 8002410:	40023800 	.word	0x40023800
 8002414:	40000400 	.word	0x40000400

08002418 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b08a      	sub	sp, #40	@ 0x28
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002420:	f107 0314 	add.w	r3, r7, #20
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a37      	ldr	r2, [pc, #220]	@ (8002514 <HAL_TIM_MspPostInit+0xfc>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d11f      	bne.n	800247a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	613b      	str	r3, [r7, #16]
 800243e:	4b36      	ldr	r3, [pc, #216]	@ (8002518 <HAL_TIM_MspPostInit+0x100>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002442:	4a35      	ldr	r2, [pc, #212]	@ (8002518 <HAL_TIM_MspPostInit+0x100>)
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	6313      	str	r3, [r2, #48]	@ 0x30
 800244a:	4b33      	ldr	r3, [pc, #204]	@ (8002518 <HAL_TIM_MspPostInit+0x100>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002456:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800245a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245c:	2302      	movs	r3, #2
 800245e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002464:	2300      	movs	r3, #0
 8002466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002468:	2301      	movs	r3, #1
 800246a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246c:	f107 0314 	add.w	r3, r7, #20
 8002470:	4619      	mov	r1, r3
 8002472:	482a      	ldr	r0, [pc, #168]	@ (800251c <HAL_TIM_MspPostInit+0x104>)
 8002474:	f002 f8aa 	bl	80045cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002478:	e047      	b.n	800250a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002482:	d11f      	bne.n	80024c4 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002484:	2300      	movs	r3, #0
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	4b23      	ldr	r3, [pc, #140]	@ (8002518 <HAL_TIM_MspPostInit+0x100>)
 800248a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248c:	4a22      	ldr	r2, [pc, #136]	@ (8002518 <HAL_TIM_MspPostInit+0x100>)
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	6313      	str	r3, [r2, #48]	@ 0x30
 8002494:	4b20      	ldr	r3, [pc, #128]	@ (8002518 <HAL_TIM_MspPostInit+0x100>)
 8002496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80024a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a6:	2302      	movs	r3, #2
 80024a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ae:	2300      	movs	r3, #0
 80024b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80024b2:	2301      	movs	r3, #1
 80024b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b6:	f107 0314 	add.w	r3, r7, #20
 80024ba:	4619      	mov	r1, r3
 80024bc:	4817      	ldr	r0, [pc, #92]	@ (800251c <HAL_TIM_MspPostInit+0x104>)
 80024be:	f002 f885 	bl	80045cc <HAL_GPIO_Init>
}
 80024c2:	e022      	b.n	800250a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a15      	ldr	r2, [pc, #84]	@ (8002520 <HAL_TIM_MspPostInit+0x108>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d11d      	bne.n	800250a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	4b11      	ldr	r3, [pc, #68]	@ (8002518 <HAL_TIM_MspPostInit+0x100>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d6:	4a10      	ldr	r2, [pc, #64]	@ (8002518 <HAL_TIM_MspPostInit+0x100>)
 80024d8:	f043 0302 	orr.w	r3, r3, #2
 80024dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024de:	4b0e      	ldr	r3, [pc, #56]	@ (8002518 <HAL_TIM_MspPostInit+0x100>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	60bb      	str	r3, [r7, #8]
 80024e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80024ea:	2310      	movs	r3, #16
 80024ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ee:	2302      	movs	r3, #2
 80024f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f6:	2300      	movs	r3, #0
 80024f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80024fa:	2302      	movs	r3, #2
 80024fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024fe:	f107 0314 	add.w	r3, r7, #20
 8002502:	4619      	mov	r1, r3
 8002504:	4807      	ldr	r0, [pc, #28]	@ (8002524 <HAL_TIM_MspPostInit+0x10c>)
 8002506:	f002 f861 	bl	80045cc <HAL_GPIO_Init>
}
 800250a:	bf00      	nop
 800250c:	3728      	adds	r7, #40	@ 0x28
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40010000 	.word	0x40010000
 8002518:	40023800 	.word	0x40023800
 800251c:	40020000 	.word	0x40020000
 8002520:	40000400 	.word	0x40000400
 8002524:	40020400 	.word	0x40020400

08002528 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b08a      	sub	sp, #40	@ 0x28
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002530:	f107 0314 	add.w	r3, r7, #20
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	605a      	str	r2, [r3, #4]
 800253a:	609a      	str	r2, [r3, #8]
 800253c:	60da      	str	r2, [r3, #12]
 800253e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a34      	ldr	r2, [pc, #208]	@ (8002618 <HAL_UART_MspInit+0xf0>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d162      	bne.n	8002610 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	613b      	str	r3, [r7, #16]
 800254e:	4b33      	ldr	r3, [pc, #204]	@ (800261c <HAL_UART_MspInit+0xf4>)
 8002550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002552:	4a32      	ldr	r2, [pc, #200]	@ (800261c <HAL_UART_MspInit+0xf4>)
 8002554:	f043 0320 	orr.w	r3, r3, #32
 8002558:	6453      	str	r3, [r2, #68]	@ 0x44
 800255a:	4b30      	ldr	r3, [pc, #192]	@ (800261c <HAL_UART_MspInit+0xf4>)
 800255c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255e:	f003 0320 	and.w	r3, r3, #32
 8002562:	613b      	str	r3, [r7, #16]
 8002564:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	60fb      	str	r3, [r7, #12]
 800256a:	4b2c      	ldr	r3, [pc, #176]	@ (800261c <HAL_UART_MspInit+0xf4>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256e:	4a2b      	ldr	r2, [pc, #172]	@ (800261c <HAL_UART_MspInit+0xf4>)
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	6313      	str	r3, [r2, #48]	@ 0x30
 8002576:	4b29      	ldr	r3, [pc, #164]	@ (800261c <HAL_UART_MspInit+0xf4>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002582:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002588:	2302      	movs	r3, #2
 800258a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258c:	2300      	movs	r3, #0
 800258e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002590:	2303      	movs	r3, #3
 8002592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002594:	2308      	movs	r3, #8
 8002596:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002598:	f107 0314 	add.w	r3, r7, #20
 800259c:	4619      	mov	r1, r3
 800259e:	4820      	ldr	r0, [pc, #128]	@ (8002620 <HAL_UART_MspInit+0xf8>)
 80025a0:	f002 f814 	bl	80045cc <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80025a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002624 <HAL_UART_MspInit+0xfc>)
 80025a6:	4a20      	ldr	r2, [pc, #128]	@ (8002628 <HAL_UART_MspInit+0x100>)
 80025a8:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80025aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002624 <HAL_UART_MspInit+0xfc>)
 80025ac:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80025b0:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002624 <HAL_UART_MspInit+0xfc>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002624 <HAL_UART_MspInit+0xfc>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025be:	4b19      	ldr	r3, [pc, #100]	@ (8002624 <HAL_UART_MspInit+0xfc>)
 80025c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025c4:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025c6:	4b17      	ldr	r3, [pc, #92]	@ (8002624 <HAL_UART_MspInit+0xfc>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025cc:	4b15      	ldr	r3, [pc, #84]	@ (8002624 <HAL_UART_MspInit+0xfc>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80025d2:	4b14      	ldr	r3, [pc, #80]	@ (8002624 <HAL_UART_MspInit+0xfc>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025d8:	4b12      	ldr	r3, [pc, #72]	@ (8002624 <HAL_UART_MspInit+0xfc>)
 80025da:	2200      	movs	r2, #0
 80025dc:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025de:	4b11      	ldr	r3, [pc, #68]	@ (8002624 <HAL_UART_MspInit+0xfc>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80025e4:	480f      	ldr	r0, [pc, #60]	@ (8002624 <HAL_UART_MspInit+0xfc>)
 80025e6:	f001 f907 	bl	80037f8 <HAL_DMA_Init>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80025f0:	f7ff fe20 	bl	8002234 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a0b      	ldr	r2, [pc, #44]	@ (8002624 <HAL_UART_MspInit+0xfc>)
 80025f8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80025fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002624 <HAL_UART_MspInit+0xfc>)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002600:	2200      	movs	r2, #0
 8002602:	2100      	movs	r1, #0
 8002604:	2047      	movs	r0, #71	@ 0x47
 8002606:	f001 f8c0 	bl	800378a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800260a:	2047      	movs	r0, #71	@ 0x47
 800260c:	f001 f8d9 	bl	80037c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002610:	bf00      	nop
 8002612:	3728      	adds	r7, #40	@ 0x28
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40011400 	.word	0x40011400
 800261c:	40023800 	.word	0x40023800
 8002620:	40020000 	.word	0x40020000
 8002624:	20000414 	.word	0x20000414
 8002628:	40026428 	.word	0x40026428

0800262c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002630:	bf00      	nop
 8002632:	e7fd      	b.n	8002630 <NMI_Handler+0x4>

08002634 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002638:	bf00      	nop
 800263a:	e7fd      	b.n	8002638 <HardFault_Handler+0x4>

0800263c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002640:	bf00      	nop
 8002642:	e7fd      	b.n	8002640 <MemManage_Handler+0x4>

08002644 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002648:	bf00      	nop
 800264a:	e7fd      	b.n	8002648 <BusFault_Handler+0x4>

0800264c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002650:	bf00      	nop
 8002652:	e7fd      	b.n	8002650 <UsageFault_Handler+0x4>

08002654 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002662:	b480      	push	{r7}
 8002664:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002666:	bf00      	nop
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002674:	bf00      	nop
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002682:	f000 f97f 	bl	8002984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002690:	4802      	ldr	r0, [pc, #8]	@ (800269c <ADC_IRQHandler+0x10>)
 8002692:	f000 fabd 	bl	8002c10 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	2000024c 	.word	0x2000024c

080026a0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80026a4:	4802      	ldr	r0, [pc, #8]	@ (80026b0 <DMA2_Stream0_IRQHandler+0x10>)
 80026a6:	f001 fa3f 	bl	8003b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	20000294 	.word	0x20000294

080026b4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80026b8:	4802      	ldr	r0, [pc, #8]	@ (80026c4 <DMA2_Stream1_IRQHandler+0x10>)
 80026ba:	f001 fa35 	bl	8003b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	20000414 	.word	0x20000414

080026c8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80026cc:	4802      	ldr	r0, [pc, #8]	@ (80026d8 <USART6_IRQHandler+0x10>)
 80026ce:	f003 fb6b 	bl	8005da8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	200003cc 	.word	0x200003cc

080026dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  return 1;
 80026e0:	2301      	movs	r3, #1
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <_kill>:

int _kill(int pid, int sig)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026f6:	f005 fb4f 	bl	8007d98 <__errno>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2216      	movs	r2, #22
 80026fe:	601a      	str	r2, [r3, #0]
  return -1;
 8002700:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002704:	4618      	mov	r0, r3
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <_exit>:

void _exit (int status)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002714:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7ff ffe7 	bl	80026ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800271e:	bf00      	nop
 8002720:	e7fd      	b.n	800271e <_exit+0x12>

08002722 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b086      	sub	sp, #24
 8002726:	af00      	add	r7, sp, #0
 8002728:	60f8      	str	r0, [r7, #12]
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	e00a      	b.n	800274a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002734:	f3af 8000 	nop.w
 8002738:	4601      	mov	r1, r0
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	1c5a      	adds	r2, r3, #1
 800273e:	60ba      	str	r2, [r7, #8]
 8002740:	b2ca      	uxtb	r2, r1
 8002742:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	3301      	adds	r3, #1
 8002748:	617b      	str	r3, [r7, #20]
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	429a      	cmp	r2, r3
 8002750:	dbf0      	blt.n	8002734 <_read+0x12>
  }

  return len;
 8002752:	687b      	ldr	r3, [r7, #4]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	e009      	b.n	8002782 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	60ba      	str	r2, [r7, #8]
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	3301      	adds	r3, #1
 8002780:	617b      	str	r3, [r7, #20]
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	429a      	cmp	r2, r3
 8002788:	dbf1      	blt.n	800276e <_write+0x12>
  }
  return len;
 800278a:	687b      	ldr	r3, [r7, #4]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <_close>:

int _close(int file)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800279c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027bc:	605a      	str	r2, [r3, #4]
  return 0;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <_isatty>:

int _isatty(int file)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027d4:	2301      	movs	r3, #1
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b085      	sub	sp, #20
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	60f8      	str	r0, [r7, #12]
 80027ea:	60b9      	str	r1, [r7, #8]
 80027ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002804:	4a14      	ldr	r2, [pc, #80]	@ (8002858 <_sbrk+0x5c>)
 8002806:	4b15      	ldr	r3, [pc, #84]	@ (800285c <_sbrk+0x60>)
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002810:	4b13      	ldr	r3, [pc, #76]	@ (8002860 <_sbrk+0x64>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d102      	bne.n	800281e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002818:	4b11      	ldr	r3, [pc, #68]	@ (8002860 <_sbrk+0x64>)
 800281a:	4a12      	ldr	r2, [pc, #72]	@ (8002864 <_sbrk+0x68>)
 800281c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800281e:	4b10      	ldr	r3, [pc, #64]	@ (8002860 <_sbrk+0x64>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4413      	add	r3, r2
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	429a      	cmp	r2, r3
 800282a:	d207      	bcs.n	800283c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800282c:	f005 fab4 	bl	8007d98 <__errno>
 8002830:	4603      	mov	r3, r0
 8002832:	220c      	movs	r2, #12
 8002834:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002836:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800283a:	e009      	b.n	8002850 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800283c:	4b08      	ldr	r3, [pc, #32]	@ (8002860 <_sbrk+0x64>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002842:	4b07      	ldr	r3, [pc, #28]	@ (8002860 <_sbrk+0x64>)
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4413      	add	r3, r2
 800284a:	4a05      	ldr	r2, [pc, #20]	@ (8002860 <_sbrk+0x64>)
 800284c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800284e:	68fb      	ldr	r3, [r7, #12]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	20020000 	.word	0x20020000
 800285c:	00000400 	.word	0x00000400
 8002860:	20000534 	.word	0x20000534
 8002864:	200006a8 	.word	0x200006a8

08002868 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800286c:	4b06      	ldr	r3, [pc, #24]	@ (8002888 <SystemInit+0x20>)
 800286e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002872:	4a05      	ldr	r2, [pc, #20]	@ (8002888 <SystemInit+0x20>)
 8002874:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002878:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800287c:	bf00      	nop
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	e000ed00 	.word	0xe000ed00

0800288c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800288c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002890:	f7ff ffea 	bl	8002868 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002894:	480c      	ldr	r0, [pc, #48]	@ (80028c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002896:	490d      	ldr	r1, [pc, #52]	@ (80028cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002898:	4a0d      	ldr	r2, [pc, #52]	@ (80028d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800289a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800289c:	e002      	b.n	80028a4 <LoopCopyDataInit>

0800289e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800289e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028a2:	3304      	adds	r3, #4

080028a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028a8:	d3f9      	bcc.n	800289e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028aa:	4a0a      	ldr	r2, [pc, #40]	@ (80028d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028ac:	4c0a      	ldr	r4, [pc, #40]	@ (80028d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80028ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028b0:	e001      	b.n	80028b6 <LoopFillZerobss>

080028b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028b4:	3204      	adds	r2, #4

080028b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028b8:	d3fb      	bcc.n	80028b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028ba:	f005 fa73 	bl	8007da4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028be:	f7ff f8cf 	bl	8001a60 <main>
  bx  lr    
 80028c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80028c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028cc:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 80028d0:	0800a358 	.word	0x0800a358
  ldr r2, =_sbss
 80028d4:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 80028d8:	200006a8 	.word	0x200006a8

080028dc <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028dc:	e7fe      	b.n	80028dc <DMA1_Stream0_IRQHandler>
	...

080028e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002920 <HAL_Init+0x40>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002920 <HAL_Init+0x40>)
 80028ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002920 <HAL_Init+0x40>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002920 <HAL_Init+0x40>)
 80028f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028fc:	4b08      	ldr	r3, [pc, #32]	@ (8002920 <HAL_Init+0x40>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a07      	ldr	r2, [pc, #28]	@ (8002920 <HAL_Init+0x40>)
 8002902:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002906:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002908:	2003      	movs	r0, #3
 800290a:	f000 ff33 	bl	8003774 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800290e:	200f      	movs	r0, #15
 8002910:	f000 f808 	bl	8002924 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002914:	f7ff fc94 	bl	8002240 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40023c00 	.word	0x40023c00

08002924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800292c:	4b12      	ldr	r3, [pc, #72]	@ (8002978 <HAL_InitTick+0x54>)
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	4b12      	ldr	r3, [pc, #72]	@ (800297c <HAL_InitTick+0x58>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	4619      	mov	r1, r3
 8002936:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800293a:	fbb3 f3f1 	udiv	r3, r3, r1
 800293e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002942:	4618      	mov	r0, r3
 8002944:	f000 ff4b 	bl	80037de <HAL_SYSTICK_Config>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e00e      	b.n	8002970 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b0f      	cmp	r3, #15
 8002956:	d80a      	bhi.n	800296e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002958:	2200      	movs	r2, #0
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002960:	f000 ff13 	bl	800378a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002964:	4a06      	ldr	r2, [pc, #24]	@ (8002980 <HAL_InitTick+0x5c>)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800296a:	2300      	movs	r3, #0
 800296c:	e000      	b.n	8002970 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
}
 8002970:	4618      	mov	r0, r3
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	20000058 	.word	0x20000058
 800297c:	20000060 	.word	0x20000060
 8002980:	2000005c 	.word	0x2000005c

08002984 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002988:	4b06      	ldr	r3, [pc, #24]	@ (80029a4 <HAL_IncTick+0x20>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	461a      	mov	r2, r3
 800298e:	4b06      	ldr	r3, [pc, #24]	@ (80029a8 <HAL_IncTick+0x24>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4413      	add	r3, r2
 8002994:	4a04      	ldr	r2, [pc, #16]	@ (80029a8 <HAL_IncTick+0x24>)
 8002996:	6013      	str	r3, [r2, #0]
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	20000060 	.word	0x20000060
 80029a8:	20000538 	.word	0x20000538

080029ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  return uwTick;
 80029b0:	4b03      	ldr	r3, [pc, #12]	@ (80029c0 <HAL_GetTick+0x14>)
 80029b2:	681b      	ldr	r3, [r3, #0]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	20000538 	.word	0x20000538

080029c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029cc:	f7ff ffee 	bl	80029ac <HAL_GetTick>
 80029d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80029dc:	d005      	beq.n	80029ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029de:	4b0a      	ldr	r3, [pc, #40]	@ (8002a08 <HAL_Delay+0x44>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	461a      	mov	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4413      	add	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029ea:	bf00      	nop
 80029ec:	f7ff ffde 	bl	80029ac <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d8f7      	bhi.n	80029ec <HAL_Delay+0x28>
  {
  }
}
 80029fc:	bf00      	nop
 80029fe:	bf00      	nop
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	20000060 	.word	0x20000060

08002a0c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a14:	2300      	movs	r3, #0
 8002a16:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e033      	b.n	8002a8a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d109      	bne.n	8002a3e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff fc30 	bl	8002290 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a42:	f003 0310 	and.w	r3, r3, #16
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d118      	bne.n	8002a7c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002a52:	f023 0302 	bic.w	r3, r3, #2
 8002a56:	f043 0202 	orr.w	r2, r3, #2
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 fc30 	bl	80032c4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6e:	f023 0303 	bic.w	r3, r3, #3
 8002a72:	f043 0201 	orr.w	r2, r3, #1
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a7a:	e001      	b.n	8002a80 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d101      	bne.n	8002aae <HAL_ADC_Start_IT+0x1a>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e0a1      	b.n	8002bf2 <HAL_ADC_Start_IT+0x15e>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d018      	beq.n	8002af6 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 0201 	orr.w	r2, r2, #1
 8002ad2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ad4:	4b4a      	ldr	r3, [pc, #296]	@ (8002c00 <HAL_ADC_Start_IT+0x16c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a4a      	ldr	r2, [pc, #296]	@ (8002c04 <HAL_ADC_Start_IT+0x170>)
 8002ada:	fba2 2303 	umull	r2, r3, r2, r3
 8002ade:	0c9a      	lsrs	r2, r3, #18
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	4413      	add	r3, r2
 8002ae6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002ae8:	e002      	b.n	8002af0 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	3b01      	subs	r3, #1
 8002aee:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1f9      	bne.n	8002aea <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d169      	bne.n	8002bd8 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b08:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002b0c:	f023 0301 	bic.w	r3, r3, #1
 8002b10:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d007      	beq.n	8002b36 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b2e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b42:	d106      	bne.n	8002b52 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b48:	f023 0206 	bic.w	r2, r3, #6
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b50:	e002      	b.n	8002b58 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b60:	4b29      	ldr	r3, [pc, #164]	@ (8002c08 <HAL_ADC_Start_IT+0x174>)
 8002b62:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002b6c:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6812      	ldr	r2, [r2, #0]
 8002b78:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b7c:	f043 0320 	orr.w	r3, r3, #32
 8002b80:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f003 031f 	and.w	r3, r3, #31
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10f      	bne.n	8002bae <HAL_ADC_Start_IT+0x11a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d129      	bne.n	8002bf0 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	e020      	b.n	8002bf0 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a16      	ldr	r2, [pc, #88]	@ (8002c0c <HAL_ADC_Start_IT+0x178>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d11b      	bne.n	8002bf0 <HAL_ADC_Start_IT+0x15c>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d114      	bne.n	8002bf0 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002bd4:	609a      	str	r2, [r3, #8]
 8002bd6:	e00b      	b.n	8002bf0 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bdc:	f043 0210 	orr.w	r2, r3, #16
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be8:	f043 0201 	orr.w	r2, r3, #1
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	20000058 	.word	0x20000058
 8002c04:	431bde83 	.word	0x431bde83
 8002c08:	40012300 	.word	0x40012300
 8002c0c:	40012000 	.word	0x40012000

08002c10 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	f003 0320 	and.w	r3, r3, #32
 8002c3e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d049      	beq.n	8002cda <HAL_ADC_IRQHandler+0xca>
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d046      	beq.n	8002cda <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c50:	f003 0310 	and.w	r3, r3, #16
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d105      	bne.n	8002c64 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d12b      	bne.n	8002cca <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d127      	bne.n	8002cca <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c80:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d006      	beq.n	8002c96 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d119      	bne.n	8002cca <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 0220 	bic.w	r2, r2, #32
 8002ca4:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002caa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d105      	bne.n	8002cca <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc2:	f043 0201 	orr.w	r2, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f9a0 	bl	8003010 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f06f 0212 	mvn.w	r2, #18
 8002cd8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ce8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d057      	beq.n	8002da0 <HAL_ADC_IRQHandler+0x190>
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d054      	beq.n	8002da0 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfa:	f003 0310 	and.w	r3, r3, #16
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d105      	bne.n	8002d0e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d06:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d139      	bne.n	8002d90 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d22:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d006      	beq.n	8002d38 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d12b      	bne.n	8002d90 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d124      	bne.n	8002d90 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d11d      	bne.n	8002d90 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d119      	bne.n	8002d90 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d6a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d70:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d105      	bne.n	8002d90 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d88:	f043 0201 	orr.w	r2, r3, #1
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 fc15 	bl	80035c0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f06f 020c 	mvn.w	r2, #12
 8002d9e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dae:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d017      	beq.n	8002de6 <HAL_ADC_IRQHandler+0x1d6>
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d014      	beq.n	8002de6 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d10d      	bne.n	8002de6 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dce:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f92e 	bl	8003038 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f06f 0201 	mvn.w	r2, #1
 8002de4:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f003 0320 	and.w	r3, r3, #32
 8002dec:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002df4:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d015      	beq.n	8002e28 <HAL_ADC_IRQHandler+0x218>
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d012      	beq.n	8002e28 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e06:	f043 0202 	orr.w	r2, r3, #2
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f06f 0220 	mvn.w	r2, #32
 8002e16:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 f917 	bl	800304c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f06f 0220 	mvn.w	r2, #32
 8002e26:	601a      	str	r2, [r3, #0]
  }
}
 8002e28:	bf00      	nop
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d101      	bne.n	8002e4e <HAL_ADC_Start_DMA+0x1e>
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	e0ce      	b.n	8002fec <HAL_ADC_Start_DMA+0x1bc>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d018      	beq.n	8002e96 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689a      	ldr	r2, [r3, #8]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0201 	orr.w	r2, r2, #1
 8002e72:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e74:	4b5f      	ldr	r3, [pc, #380]	@ (8002ff4 <HAL_ADC_Start_DMA+0x1c4>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a5f      	ldr	r2, [pc, #380]	@ (8002ff8 <HAL_ADC_Start_DMA+0x1c8>)
 8002e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7e:	0c9a      	lsrs	r2, r3, #18
 8002e80:	4613      	mov	r3, r2
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	4413      	add	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002e88:	e002      	b.n	8002e90 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1f9      	bne.n	8002e8a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ea4:	d107      	bne.n	8002eb6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002eb4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	f040 8086 	bne.w	8002fd2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eca:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002ece:	f023 0301 	bic.w	r3, r3, #1
 8002ed2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d007      	beq.n	8002ef8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eec:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002ef0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f04:	d106      	bne.n	8002f14 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f0a:	f023 0206 	bic.w	r2, r3, #6
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	645a      	str	r2, [r3, #68]	@ 0x44
 8002f12:	e002      	b.n	8002f1a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f22:	4b36      	ldr	r3, [pc, #216]	@ (8002ffc <HAL_ADC_Start_DMA+0x1cc>)
 8002f24:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f2a:	4a35      	ldr	r2, [pc, #212]	@ (8003000 <HAL_ADC_Start_DMA+0x1d0>)
 8002f2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f32:	4a34      	ldr	r2, [pc, #208]	@ (8003004 <HAL_ADC_Start_DMA+0x1d4>)
 8002f34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f3a:	4a33      	ldr	r2, [pc, #204]	@ (8003008 <HAL_ADC_Start_DMA+0x1d8>)
 8002f3c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002f46:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002f56:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f66:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	334c      	adds	r3, #76	@ 0x4c
 8002f72:	4619      	mov	r1, r3
 8002f74:	68ba      	ldr	r2, [r7, #8]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f000 fcec 	bl	8003954 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f003 031f 	and.w	r3, r3, #31
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10f      	bne.n	8002fa8 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d129      	bne.n	8002fea <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002fa4:	609a      	str	r2, [r3, #8]
 8002fa6:	e020      	b.n	8002fea <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a17      	ldr	r2, [pc, #92]	@ (800300c <HAL_ADC_Start_DMA+0x1dc>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d11b      	bne.n	8002fea <HAL_ADC_Start_DMA+0x1ba>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d114      	bne.n	8002fea <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002fce:	609a      	str	r2, [r3, #8]
 8002fd0:	e00b      	b.n	8002fea <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd6:	f043 0210 	orr.w	r2, r3, #16
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe2:	f043 0201 	orr.w	r2, r3, #1
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	20000058 	.word	0x20000058
 8002ff8:	431bde83 	.word	0x431bde83
 8002ffc:	40012300 	.word	0x40012300
 8003000:	080034bd 	.word	0x080034bd
 8003004:	08003577 	.word	0x08003577
 8003008:	08003593 	.word	0x08003593
 800300c:	40012000 	.word	0x40012000

08003010 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800306a:	2300      	movs	r3, #0
 800306c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <HAL_ADC_ConfigChannel+0x1c>
 8003078:	2302      	movs	r3, #2
 800307a:	e113      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x244>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2b09      	cmp	r3, #9
 800308a:	d925      	bls.n	80030d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68d9      	ldr	r1, [r3, #12]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	b29b      	uxth	r3, r3
 8003098:	461a      	mov	r2, r3
 800309a:	4613      	mov	r3, r2
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	4413      	add	r3, r2
 80030a0:	3b1e      	subs	r3, #30
 80030a2:	2207      	movs	r2, #7
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	43da      	mvns	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	400a      	ands	r2, r1
 80030b0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68d9      	ldr	r1, [r3, #12]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	4618      	mov	r0, r3
 80030c4:	4603      	mov	r3, r0
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	4403      	add	r3, r0
 80030ca:	3b1e      	subs	r3, #30
 80030cc:	409a      	lsls	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	60da      	str	r2, [r3, #12]
 80030d6:	e022      	b.n	800311e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6919      	ldr	r1, [r3, #16]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	461a      	mov	r2, r3
 80030e6:	4613      	mov	r3, r2
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	4413      	add	r3, r2
 80030ec:	2207      	movs	r2, #7
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	43da      	mvns	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	400a      	ands	r2, r1
 80030fa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6919      	ldr	r1, [r3, #16]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	b29b      	uxth	r3, r3
 800310c:	4618      	mov	r0, r3
 800310e:	4603      	mov	r3, r0
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	4403      	add	r3, r0
 8003114:	409a      	lsls	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b06      	cmp	r3, #6
 8003124:	d824      	bhi.n	8003170 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	3b05      	subs	r3, #5
 8003138:	221f      	movs	r2, #31
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	43da      	mvns	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	400a      	ands	r2, r1
 8003146:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	b29b      	uxth	r3, r3
 8003154:	4618      	mov	r0, r3
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	3b05      	subs	r3, #5
 8003162:	fa00 f203 	lsl.w	r2, r0, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	635a      	str	r2, [r3, #52]	@ 0x34
 800316e:	e04c      	b.n	800320a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	2b0c      	cmp	r3, #12
 8003176:	d824      	bhi.n	80031c2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	3b23      	subs	r3, #35	@ 0x23
 800318a:	221f      	movs	r2, #31
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	43da      	mvns	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	400a      	ands	r2, r1
 8003198:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	4618      	mov	r0, r3
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	3b23      	subs	r3, #35	@ 0x23
 80031b4:	fa00 f203 	lsl.w	r2, r0, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	430a      	orrs	r2, r1
 80031be:	631a      	str	r2, [r3, #48]	@ 0x30
 80031c0:	e023      	b.n	800320a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	3b41      	subs	r3, #65	@ 0x41
 80031d4:	221f      	movs	r2, #31
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	43da      	mvns	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	400a      	ands	r2, r1
 80031e2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	4618      	mov	r0, r3
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	3b41      	subs	r3, #65	@ 0x41
 80031fe:	fa00 f203 	lsl.w	r2, r0, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800320a:	4b29      	ldr	r3, [pc, #164]	@ (80032b0 <HAL_ADC_ConfigChannel+0x250>)
 800320c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a28      	ldr	r2, [pc, #160]	@ (80032b4 <HAL_ADC_ConfigChannel+0x254>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d10f      	bne.n	8003238 <HAL_ADC_ConfigChannel+0x1d8>
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b12      	cmp	r3, #18
 800321e:	d10b      	bne.n	8003238 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a1d      	ldr	r2, [pc, #116]	@ (80032b4 <HAL_ADC_ConfigChannel+0x254>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d12b      	bne.n	800329a <HAL_ADC_ConfigChannel+0x23a>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a1c      	ldr	r2, [pc, #112]	@ (80032b8 <HAL_ADC_ConfigChannel+0x258>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d003      	beq.n	8003254 <HAL_ADC_ConfigChannel+0x1f4>
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b11      	cmp	r3, #17
 8003252:	d122      	bne.n	800329a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a11      	ldr	r2, [pc, #68]	@ (80032b8 <HAL_ADC_ConfigChannel+0x258>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d111      	bne.n	800329a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003276:	4b11      	ldr	r3, [pc, #68]	@ (80032bc <HAL_ADC_ConfigChannel+0x25c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a11      	ldr	r2, [pc, #68]	@ (80032c0 <HAL_ADC_ConfigChannel+0x260>)
 800327c:	fba2 2303 	umull	r2, r3, r2, r3
 8003280:	0c9a      	lsrs	r2, r3, #18
 8003282:	4613      	mov	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800328c:	e002      	b.n	8003294 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	3b01      	subs	r3, #1
 8003292:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f9      	bne.n	800328e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	40012300 	.word	0x40012300
 80032b4:	40012000 	.word	0x40012000
 80032b8:	10000012 	.word	0x10000012
 80032bc:	20000058 	.word	0x20000058
 80032c0:	431bde83 	.word	0x431bde83

080032c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032cc:	4b79      	ldr	r3, [pc, #484]	@ (80034b4 <ADC_Init+0x1f0>)
 80032ce:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	431a      	orrs	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6859      	ldr	r1, [r3, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	021a      	lsls	r2, r3, #8
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800331c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6859      	ldr	r1, [r3, #4]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689a      	ldr	r2, [r3, #8]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800333e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6899      	ldr	r1, [r3, #8]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003356:	4a58      	ldr	r2, [pc, #352]	@ (80034b8 <ADC_Init+0x1f4>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d022      	beq.n	80033a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800336a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6899      	ldr	r1, [r3, #8]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800338c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6899      	ldr	r1, [r3, #8]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	609a      	str	r2, [r3, #8]
 80033a0:	e00f      	b.n	80033c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80033b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80033c0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0202 	bic.w	r2, r2, #2
 80033d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6899      	ldr	r1, [r3, #8]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	7e1b      	ldrb	r3, [r3, #24]
 80033dc:	005a      	lsls	r2, r3, #1
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d01b      	beq.n	8003428 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033fe:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800340e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6859      	ldr	r1, [r3, #4]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341a:	3b01      	subs	r3, #1
 800341c:	035a      	lsls	r2, r3, #13
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	605a      	str	r2, [r3, #4]
 8003426:	e007      	b.n	8003438 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003436:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003446:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	3b01      	subs	r3, #1
 8003454:	051a      	lsls	r2, r3, #20
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800346c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6899      	ldr	r1, [r3, #8]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800347a:	025a      	lsls	r2, r3, #9
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003492:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6899      	ldr	r1, [r3, #8]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	029a      	lsls	r2, r3, #10
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	609a      	str	r2, [r3, #8]
}
 80034a8:	bf00      	nop
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	40012300 	.word	0x40012300
 80034b8:	0f000001 	.word	0x0f000001

080034bc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ce:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d13c      	bne.n	8003550 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034da:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d12b      	bne.n	8003548 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d127      	bne.n	8003548 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034fe:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003502:	2b00      	cmp	r3, #0
 8003504:	d006      	beq.n	8003514 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003510:	2b00      	cmp	r3, #0
 8003512:	d119      	bne.n	8003548 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0220 	bic.w	r2, r2, #32
 8003522:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003528:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003534:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d105      	bne.n	8003548 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003540:	f043 0201 	orr.w	r2, r3, #1
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f7ff fd61 	bl	8003010 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800354e:	e00e      	b.n	800356e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003554:	f003 0310 	and.w	r3, r3, #16
 8003558:	2b00      	cmp	r3, #0
 800355a:	d003      	beq.n	8003564 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f7ff fd75 	bl	800304c <HAL_ADC_ErrorCallback>
}
 8003562:	e004      	b.n	800356e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	4798      	blx	r3
}
 800356e:	bf00      	nop
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b084      	sub	sp, #16
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003582:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f7ff fd4d 	bl	8003024 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800358a:	bf00      	nop
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b084      	sub	sp, #16
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800359e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2240      	movs	r2, #64	@ 0x40
 80035a4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035aa:	f043 0204 	orr.w	r2, r3, #4
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f7ff fd4a 	bl	800304c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035b8:	bf00      	nop
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003618 <__NVIC_SetPriorityGrouping+0x44>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80035f0:	4013      	ands	r3, r2
 80035f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003600:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003606:	4a04      	ldr	r2, [pc, #16]	@ (8003618 <__NVIC_SetPriorityGrouping+0x44>)
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	60d3      	str	r3, [r2, #12]
}
 800360c:	bf00      	nop
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	e000ed00 	.word	0xe000ed00

0800361c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003620:	4b04      	ldr	r3, [pc, #16]	@ (8003634 <__NVIC_GetPriorityGrouping+0x18>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	0a1b      	lsrs	r3, r3, #8
 8003626:	f003 0307 	and.w	r3, r3, #7
}
 800362a:	4618      	mov	r0, r3
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	e000ed00 	.word	0xe000ed00

08003638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	4603      	mov	r3, r0
 8003640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003646:	2b00      	cmp	r3, #0
 8003648:	db0b      	blt.n	8003662 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800364a:	79fb      	ldrb	r3, [r7, #7]
 800364c:	f003 021f 	and.w	r2, r3, #31
 8003650:	4907      	ldr	r1, [pc, #28]	@ (8003670 <__NVIC_EnableIRQ+0x38>)
 8003652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003656:	095b      	lsrs	r3, r3, #5
 8003658:	2001      	movs	r0, #1
 800365a:	fa00 f202 	lsl.w	r2, r0, r2
 800365e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	e000e100 	.word	0xe000e100

08003674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	4603      	mov	r3, r0
 800367c:	6039      	str	r1, [r7, #0]
 800367e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003684:	2b00      	cmp	r3, #0
 8003686:	db0a      	blt.n	800369e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	b2da      	uxtb	r2, r3
 800368c:	490c      	ldr	r1, [pc, #48]	@ (80036c0 <__NVIC_SetPriority+0x4c>)
 800368e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003692:	0112      	lsls	r2, r2, #4
 8003694:	b2d2      	uxtb	r2, r2
 8003696:	440b      	add	r3, r1
 8003698:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800369c:	e00a      	b.n	80036b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	4908      	ldr	r1, [pc, #32]	@ (80036c4 <__NVIC_SetPriority+0x50>)
 80036a4:	79fb      	ldrb	r3, [r7, #7]
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	3b04      	subs	r3, #4
 80036ac:	0112      	lsls	r2, r2, #4
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	440b      	add	r3, r1
 80036b2:	761a      	strb	r2, [r3, #24]
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	e000e100 	.word	0xe000e100
 80036c4:	e000ed00 	.word	0xe000ed00

080036c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b089      	sub	sp, #36	@ 0x24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f1c3 0307 	rsb	r3, r3, #7
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	bf28      	it	cs
 80036e6:	2304      	movcs	r3, #4
 80036e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	3304      	adds	r3, #4
 80036ee:	2b06      	cmp	r3, #6
 80036f0:	d902      	bls.n	80036f8 <NVIC_EncodePriority+0x30>
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	3b03      	subs	r3, #3
 80036f6:	e000      	b.n	80036fa <NVIC_EncodePriority+0x32>
 80036f8:	2300      	movs	r3, #0
 80036fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	fa02 f303 	lsl.w	r3, r2, r3
 8003706:	43da      	mvns	r2, r3
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	401a      	ands	r2, r3
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003710:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	fa01 f303 	lsl.w	r3, r1, r3
 800371a:	43d9      	mvns	r1, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003720:	4313      	orrs	r3, r2
         );
}
 8003722:	4618      	mov	r0, r3
 8003724:	3724      	adds	r7, #36	@ 0x24
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
	...

08003730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3b01      	subs	r3, #1
 800373c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003740:	d301      	bcc.n	8003746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003742:	2301      	movs	r3, #1
 8003744:	e00f      	b.n	8003766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003746:	4a0a      	ldr	r2, [pc, #40]	@ (8003770 <SysTick_Config+0x40>)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3b01      	subs	r3, #1
 800374c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800374e:	210f      	movs	r1, #15
 8003750:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003754:	f7ff ff8e 	bl	8003674 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003758:	4b05      	ldr	r3, [pc, #20]	@ (8003770 <SysTick_Config+0x40>)
 800375a:	2200      	movs	r2, #0
 800375c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800375e:	4b04      	ldr	r3, [pc, #16]	@ (8003770 <SysTick_Config+0x40>)
 8003760:	2207      	movs	r2, #7
 8003762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	e000e010 	.word	0xe000e010

08003774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7ff ff29 	bl	80035d4 <__NVIC_SetPriorityGrouping>
}
 8003782:	bf00      	nop
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800378a:	b580      	push	{r7, lr}
 800378c:	b086      	sub	sp, #24
 800378e:	af00      	add	r7, sp, #0
 8003790:	4603      	mov	r3, r0
 8003792:	60b9      	str	r1, [r7, #8]
 8003794:	607a      	str	r2, [r7, #4]
 8003796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003798:	2300      	movs	r3, #0
 800379a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800379c:	f7ff ff3e 	bl	800361c <__NVIC_GetPriorityGrouping>
 80037a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	68b9      	ldr	r1, [r7, #8]
 80037a6:	6978      	ldr	r0, [r7, #20]
 80037a8:	f7ff ff8e 	bl	80036c8 <NVIC_EncodePriority>
 80037ac:	4602      	mov	r2, r0
 80037ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037b2:	4611      	mov	r1, r2
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7ff ff5d 	bl	8003674 <__NVIC_SetPriority>
}
 80037ba:	bf00      	nop
 80037bc:	3718      	adds	r7, #24
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b082      	sub	sp, #8
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	4603      	mov	r3, r0
 80037ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff ff31 	bl	8003638 <__NVIC_EnableIRQ>
}
 80037d6:	bf00      	nop
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b082      	sub	sp, #8
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7ff ffa2 	bl	8003730 <SysTick_Config>
 80037ec:	4603      	mov	r3, r0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
	...

080037f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003800:	2300      	movs	r3, #0
 8003802:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003804:	f7ff f8d2 	bl	80029ac <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e099      	b.n	8003948 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2202      	movs	r2, #2
 8003818:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0201 	bic.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003834:	e00f      	b.n	8003856 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003836:	f7ff f8b9 	bl	80029ac <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b05      	cmp	r3, #5
 8003842:	d908      	bls.n	8003856 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2220      	movs	r2, #32
 8003848:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2203      	movs	r2, #3
 800384e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e078      	b.n	8003948 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1e8      	bne.n	8003836 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	4b38      	ldr	r3, [pc, #224]	@ (8003950 <HAL_DMA_Init+0x158>)
 8003870:	4013      	ands	r3, r2
 8003872:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003882:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800388e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800389a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	d107      	bne.n	80038c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b8:	4313      	orrs	r3, r2
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	4313      	orrs	r3, r2
 80038be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f023 0307 	bic.w	r3, r3, #7
 80038d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	4313      	orrs	r3, r2
 80038e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d117      	bne.n	800391a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00e      	beq.n	800391a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 fb01 	bl	8003f04 <DMA_CheckFifoParam>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d008      	beq.n	800391a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2240      	movs	r2, #64	@ 0x40
 800390c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003916:	2301      	movs	r3, #1
 8003918:	e016      	b.n	8003948 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 fab8 	bl	8003e98 <DMA_CalcBaseAndBitshift>
 8003928:	4603      	mov	r3, r0
 800392a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003930:	223f      	movs	r2, #63	@ 0x3f
 8003932:	409a      	lsls	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3718      	adds	r7, #24
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	f010803f 	.word	0xf010803f

08003954 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
 8003960:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003962:	2300      	movs	r3, #0
 8003964:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800396a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003972:	2b01      	cmp	r3, #1
 8003974:	d101      	bne.n	800397a <HAL_DMA_Start_IT+0x26>
 8003976:	2302      	movs	r3, #2
 8003978:	e040      	b.n	80039fc <HAL_DMA_Start_IT+0xa8>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b01      	cmp	r3, #1
 800398c:	d12f      	bne.n	80039ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2202      	movs	r2, #2
 8003992:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	68b9      	ldr	r1, [r7, #8]
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 fa4a 	bl	8003e3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ac:	223f      	movs	r2, #63	@ 0x3f
 80039ae:	409a      	lsls	r2, r3
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0216 	orr.w	r2, r2, #22
 80039c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d007      	beq.n	80039dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0208 	orr.w	r2, r2, #8
 80039da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0201 	orr.w	r2, r2, #1
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	e005      	b.n	80039fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80039f6:	2302      	movs	r3, #2
 80039f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80039fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3718      	adds	r7, #24
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a10:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003a12:	f7fe ffcb 	bl	80029ac <HAL_GetTick>
 8003a16:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d008      	beq.n	8003a36 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2280      	movs	r2, #128	@ 0x80
 8003a28:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e052      	b.n	8003adc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0216 	bic.w	r2, r2, #22
 8003a44:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	695a      	ldr	r2, [r3, #20]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a54:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d103      	bne.n	8003a66 <HAL_DMA_Abort+0x62>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d007      	beq.n	8003a76 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0208 	bic.w	r2, r2, #8
 8003a74:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0201 	bic.w	r2, r2, #1
 8003a84:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a86:	e013      	b.n	8003ab0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a88:	f7fe ff90 	bl	80029ac <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b05      	cmp	r3, #5
 8003a94:	d90c      	bls.n	8003ab0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2203      	movs	r2, #3
 8003aa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e015      	b.n	8003adc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1e4      	bne.n	8003a88 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac2:	223f      	movs	r2, #63	@ 0x3f
 8003ac4:	409a      	lsls	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d004      	beq.n	8003b02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2280      	movs	r2, #128	@ 0x80
 8003afc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e00c      	b.n	8003b1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2205      	movs	r2, #5
 8003b06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0201 	bic.w	r2, r2, #1
 8003b18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b34:	4b8e      	ldr	r3, [pc, #568]	@ (8003d70 <HAL_DMA_IRQHandler+0x248>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a8e      	ldr	r2, [pc, #568]	@ (8003d74 <HAL_DMA_IRQHandler+0x24c>)
 8003b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3e:	0a9b      	lsrs	r3, r3, #10
 8003b40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b52:	2208      	movs	r2, #8
 8003b54:	409a      	lsls	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d01a      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d013      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0204 	bic.w	r2, r2, #4
 8003b7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b80:	2208      	movs	r2, #8
 8003b82:	409a      	lsls	r2, r3
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b8c:	f043 0201 	orr.w	r2, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b98:	2201      	movs	r2, #1
 8003b9a:	409a      	lsls	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d012      	beq.n	8003bca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00b      	beq.n	8003bca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	409a      	lsls	r2, r3
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc2:	f043 0202 	orr.w	r2, r3, #2
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bce:	2204      	movs	r2, #4
 8003bd0:	409a      	lsls	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d012      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00b      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bec:	2204      	movs	r2, #4
 8003bee:	409a      	lsls	r2, r3
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf8:	f043 0204 	orr.w	r2, r3, #4
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c04:	2210      	movs	r2, #16
 8003c06:	409a      	lsls	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d043      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0308 	and.w	r3, r3, #8
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d03c      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c22:	2210      	movs	r2, #16
 8003c24:	409a      	lsls	r2, r3
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d018      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d108      	bne.n	8003c58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d024      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	4798      	blx	r3
 8003c56:	e01f      	b.n	8003c98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d01b      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	4798      	blx	r3
 8003c68:	e016      	b.n	8003c98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d107      	bne.n	8003c88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0208 	bic.w	r2, r2, #8
 8003c86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d003      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	409a      	lsls	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 808f 	beq.w	8003dc8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0310 	and.w	r3, r3, #16
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 8087 	beq.w	8003dc8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	409a      	lsls	r2, r3
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b05      	cmp	r3, #5
 8003cd0:	d136      	bne.n	8003d40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0216 	bic.w	r2, r2, #22
 8003ce0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	695a      	ldr	r2, [r3, #20]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003cf0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d103      	bne.n	8003d02 <HAL_DMA_IRQHandler+0x1da>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d007      	beq.n	8003d12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0208 	bic.w	r2, r2, #8
 8003d10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d16:	223f      	movs	r2, #63	@ 0x3f
 8003d18:	409a      	lsls	r2, r3
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d07e      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	4798      	blx	r3
        }
        return;
 8003d3e:	e079      	b.n	8003e34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d01d      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10d      	bne.n	8003d78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d031      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	4798      	blx	r3
 8003d6c:	e02c      	b.n	8003dc8 <HAL_DMA_IRQHandler+0x2a0>
 8003d6e:	bf00      	nop
 8003d70:	20000058 	.word	0x20000058
 8003d74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d023      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	4798      	blx	r3
 8003d88:	e01e      	b.n	8003dc8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10f      	bne.n	8003db8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0210 	bic.w	r2, r2, #16
 8003da6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d003      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d032      	beq.n	8003e36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d022      	beq.n	8003e22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2205      	movs	r2, #5
 8003de0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0201 	bic.w	r2, r2, #1
 8003df2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	3301      	adds	r3, #1
 8003df8:	60bb      	str	r3, [r7, #8]
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d307      	bcc.n	8003e10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f2      	bne.n	8003df4 <HAL_DMA_IRQHandler+0x2cc>
 8003e0e:	e000      	b.n	8003e12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003e10:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d005      	beq.n	8003e36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	4798      	blx	r3
 8003e32:	e000      	b.n	8003e36 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003e34:	bf00      	nop
    }
  }
}
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
 8003e48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003e58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2b40      	cmp	r3, #64	@ 0x40
 8003e68:	d108      	bne.n	8003e7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e7a:	e007      	b.n	8003e8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	60da      	str	r2, [r3, #12]
}
 8003e8c:	bf00      	nop
 8003e8e:	3714      	adds	r7, #20
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	3b10      	subs	r3, #16
 8003ea8:	4a14      	ldr	r2, [pc, #80]	@ (8003efc <DMA_CalcBaseAndBitshift+0x64>)
 8003eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003eae:	091b      	lsrs	r3, r3, #4
 8003eb0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003eb2:	4a13      	ldr	r2, [pc, #76]	@ (8003f00 <DMA_CalcBaseAndBitshift+0x68>)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2b03      	cmp	r3, #3
 8003ec4:	d909      	bls.n	8003eda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003ece:	f023 0303 	bic.w	r3, r3, #3
 8003ed2:	1d1a      	adds	r2, r3, #4
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	659a      	str	r2, [r3, #88]	@ 0x58
 8003ed8:	e007      	b.n	8003eea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003ee2:	f023 0303 	bic.w	r3, r3, #3
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	aaaaaaab 	.word	0xaaaaaaab
 8003f00:	08009f84 	.word	0x08009f84

08003f04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d11f      	bne.n	8003f5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2b03      	cmp	r3, #3
 8003f22:	d856      	bhi.n	8003fd2 <DMA_CheckFifoParam+0xce>
 8003f24:	a201      	add	r2, pc, #4	@ (adr r2, 8003f2c <DMA_CheckFifoParam+0x28>)
 8003f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2a:	bf00      	nop
 8003f2c:	08003f3d 	.word	0x08003f3d
 8003f30:	08003f4f 	.word	0x08003f4f
 8003f34:	08003f3d 	.word	0x08003f3d
 8003f38:	08003fd3 	.word	0x08003fd3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d046      	beq.n	8003fd6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f4c:	e043      	b.n	8003fd6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f52:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003f56:	d140      	bne.n	8003fda <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f5c:	e03d      	b.n	8003fda <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f66:	d121      	bne.n	8003fac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2b03      	cmp	r3, #3
 8003f6c:	d837      	bhi.n	8003fde <DMA_CheckFifoParam+0xda>
 8003f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8003f74 <DMA_CheckFifoParam+0x70>)
 8003f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f74:	08003f85 	.word	0x08003f85
 8003f78:	08003f8b 	.word	0x08003f8b
 8003f7c:	08003f85 	.word	0x08003f85
 8003f80:	08003f9d 	.word	0x08003f9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	73fb      	strb	r3, [r7, #15]
      break;
 8003f88:	e030      	b.n	8003fec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f8e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d025      	beq.n	8003fe2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f9a:	e022      	b.n	8003fe2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003fa4:	d11f      	bne.n	8003fe6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003faa:	e01c      	b.n	8003fe6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d903      	bls.n	8003fba <DMA_CheckFifoParam+0xb6>
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d003      	beq.n	8003fc0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003fb8:	e018      	b.n	8003fec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	73fb      	strb	r3, [r7, #15]
      break;
 8003fbe:	e015      	b.n	8003fec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00e      	beq.n	8003fea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	73fb      	strb	r3, [r7, #15]
      break;
 8003fd0:	e00b      	b.n	8003fea <DMA_CheckFifoParam+0xe6>
      break;
 8003fd2:	bf00      	nop
 8003fd4:	e00a      	b.n	8003fec <DMA_CheckFifoParam+0xe8>
      break;
 8003fd6:	bf00      	nop
 8003fd8:	e008      	b.n	8003fec <DMA_CheckFifoParam+0xe8>
      break;
 8003fda:	bf00      	nop
 8003fdc:	e006      	b.n	8003fec <DMA_CheckFifoParam+0xe8>
      break;
 8003fde:	bf00      	nop
 8003fe0:	e004      	b.n	8003fec <DMA_CheckFifoParam+0xe8>
      break;
 8003fe2:	bf00      	nop
 8003fe4:	e002      	b.n	8003fec <DMA_CheckFifoParam+0xe8>
      break;   
 8003fe6:	bf00      	nop
 8003fe8:	e000      	b.n	8003fec <DMA_CheckFifoParam+0xe8>
      break;
 8003fea:	bf00      	nop
    }
  } 
  
  return status; 
 8003fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop

08003ffc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800400e:	4b23      	ldr	r3, [pc, #140]	@ (800409c <HAL_FLASH_Program+0xa0>)
 8004010:	7e1b      	ldrb	r3, [r3, #24]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d101      	bne.n	800401a <HAL_FLASH_Program+0x1e>
 8004016:	2302      	movs	r3, #2
 8004018:	e03b      	b.n	8004092 <HAL_FLASH_Program+0x96>
 800401a:	4b20      	ldr	r3, [pc, #128]	@ (800409c <HAL_FLASH_Program+0xa0>)
 800401c:	2201      	movs	r2, #1
 800401e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004020:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004024:	f000 f870 	bl	8004108 <FLASH_WaitForLastOperation>
 8004028:	4603      	mov	r3, r0
 800402a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800402c:	7dfb      	ldrb	r3, [r7, #23]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d12b      	bne.n	800408a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d105      	bne.n	8004044 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004038:	783b      	ldrb	r3, [r7, #0]
 800403a:	4619      	mov	r1, r3
 800403c:	68b8      	ldr	r0, [r7, #8]
 800403e:	f000 f91b 	bl	8004278 <FLASH_Program_Byte>
 8004042:	e016      	b.n	8004072 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d105      	bne.n	8004056 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800404a:	883b      	ldrh	r3, [r7, #0]
 800404c:	4619      	mov	r1, r3
 800404e:	68b8      	ldr	r0, [r7, #8]
 8004050:	f000 f8ee 	bl	8004230 <FLASH_Program_HalfWord>
 8004054:	e00d      	b.n	8004072 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2b02      	cmp	r3, #2
 800405a:	d105      	bne.n	8004068 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	4619      	mov	r1, r3
 8004060:	68b8      	ldr	r0, [r7, #8]
 8004062:	f000 f8c3 	bl	80041ec <FLASH_Program_Word>
 8004066:	e004      	b.n	8004072 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004068:	e9d7 2300 	ldrd	r2, r3, [r7]
 800406c:	68b8      	ldr	r0, [r7, #8]
 800406e:	f000 f88b 	bl	8004188 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004072:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004076:	f000 f847 	bl	8004108 <FLASH_WaitForLastOperation>
 800407a:	4603      	mov	r3, r0
 800407c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800407e:	4b08      	ldr	r3, [pc, #32]	@ (80040a0 <HAL_FLASH_Program+0xa4>)
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	4a07      	ldr	r2, [pc, #28]	@ (80040a0 <HAL_FLASH_Program+0xa4>)
 8004084:	f023 0301 	bic.w	r3, r3, #1
 8004088:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800408a:	4b04      	ldr	r3, [pc, #16]	@ (800409c <HAL_FLASH_Program+0xa0>)
 800408c:	2200      	movs	r2, #0
 800408e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004090:	7dfb      	ldrb	r3, [r7, #23]
}
 8004092:	4618      	mov	r0, r3
 8004094:	3718      	adds	r7, #24
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	2000053c 	.word	0x2000053c
 80040a0:	40023c00 	.word	0x40023c00

080040a4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80040ae:	4b0b      	ldr	r3, [pc, #44]	@ (80040dc <HAL_FLASH_Unlock+0x38>)
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	da0b      	bge.n	80040ce <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80040b6:	4b09      	ldr	r3, [pc, #36]	@ (80040dc <HAL_FLASH_Unlock+0x38>)
 80040b8:	4a09      	ldr	r2, [pc, #36]	@ (80040e0 <HAL_FLASH_Unlock+0x3c>)
 80040ba:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80040bc:	4b07      	ldr	r3, [pc, #28]	@ (80040dc <HAL_FLASH_Unlock+0x38>)
 80040be:	4a09      	ldr	r2, [pc, #36]	@ (80040e4 <HAL_FLASH_Unlock+0x40>)
 80040c0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80040c2:	4b06      	ldr	r3, [pc, #24]	@ (80040dc <HAL_FLASH_Unlock+0x38>)
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	da01      	bge.n	80040ce <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80040ce:	79fb      	ldrb	r3, [r7, #7]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr
 80040dc:	40023c00 	.word	0x40023c00
 80040e0:	45670123 	.word	0x45670123
 80040e4:	cdef89ab 	.word	0xcdef89ab

080040e8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80040ec:	4b05      	ldr	r3, [pc, #20]	@ (8004104 <HAL_FLASH_Lock+0x1c>)
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	4a04      	ldr	r2, [pc, #16]	@ (8004104 <HAL_FLASH_Lock+0x1c>)
 80040f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80040f6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	40023c00 	.word	0x40023c00

08004108 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004110:	2300      	movs	r3, #0
 8004112:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004114:	4b1a      	ldr	r3, [pc, #104]	@ (8004180 <FLASH_WaitForLastOperation+0x78>)
 8004116:	2200      	movs	r2, #0
 8004118:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800411a:	f7fe fc47 	bl	80029ac <HAL_GetTick>
 800411e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004120:	e010      	b.n	8004144 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004128:	d00c      	beq.n	8004144 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d007      	beq.n	8004140 <FLASH_WaitForLastOperation+0x38>
 8004130:	f7fe fc3c 	bl	80029ac <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	429a      	cmp	r2, r3
 800413e:	d201      	bcs.n	8004144 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e019      	b.n	8004178 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004144:	4b0f      	ldr	r3, [pc, #60]	@ (8004184 <FLASH_WaitForLastOperation+0x7c>)
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1e8      	bne.n	8004122 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004150:	4b0c      	ldr	r3, [pc, #48]	@ (8004184 <FLASH_WaitForLastOperation+0x7c>)
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b00      	cmp	r3, #0
 800415a:	d002      	beq.n	8004162 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800415c:	4b09      	ldr	r3, [pc, #36]	@ (8004184 <FLASH_WaitForLastOperation+0x7c>)
 800415e:	2201      	movs	r2, #1
 8004160:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004162:	4b08      	ldr	r3, [pc, #32]	@ (8004184 <FLASH_WaitForLastOperation+0x7c>)
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800416e:	f000 f8a5 	bl	80042bc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e000      	b.n	8004178 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004176:	2300      	movs	r3, #0
  
}  
 8004178:	4618      	mov	r0, r3
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	2000053c 	.word	0x2000053c
 8004184:	40023c00 	.word	0x40023c00

08004188 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004194:	4b14      	ldr	r3, [pc, #80]	@ (80041e8 <FLASH_Program_DoubleWord+0x60>)
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	4a13      	ldr	r2, [pc, #76]	@ (80041e8 <FLASH_Program_DoubleWord+0x60>)
 800419a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800419e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80041a0:	4b11      	ldr	r3, [pc, #68]	@ (80041e8 <FLASH_Program_DoubleWord+0x60>)
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	4a10      	ldr	r2, [pc, #64]	@ (80041e8 <FLASH_Program_DoubleWord+0x60>)
 80041a6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80041aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80041ac:	4b0e      	ldr	r3, [pc, #56]	@ (80041e8 <FLASH_Program_DoubleWord+0x60>)
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	4a0d      	ldr	r2, [pc, #52]	@ (80041e8 <FLASH_Program_DoubleWord+0x60>)
 80041b2:	f043 0301 	orr.w	r3, r3, #1
 80041b6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80041be:	f3bf 8f6f 	isb	sy
}
 80041c2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80041c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80041c8:	f04f 0200 	mov.w	r2, #0
 80041cc:	f04f 0300 	mov.w	r3, #0
 80041d0:	000a      	movs	r2, r1
 80041d2:	2300      	movs	r3, #0
 80041d4:	68f9      	ldr	r1, [r7, #12]
 80041d6:	3104      	adds	r1, #4
 80041d8:	4613      	mov	r3, r2
 80041da:	600b      	str	r3, [r1, #0]
}
 80041dc:	bf00      	nop
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	40023c00 	.word	0x40023c00

080041ec <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80041f6:	4b0d      	ldr	r3, [pc, #52]	@ (800422c <FLASH_Program_Word+0x40>)
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	4a0c      	ldr	r2, [pc, #48]	@ (800422c <FLASH_Program_Word+0x40>)
 80041fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004200:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004202:	4b0a      	ldr	r3, [pc, #40]	@ (800422c <FLASH_Program_Word+0x40>)
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	4a09      	ldr	r2, [pc, #36]	@ (800422c <FLASH_Program_Word+0x40>)
 8004208:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800420c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800420e:	4b07      	ldr	r3, [pc, #28]	@ (800422c <FLASH_Program_Word+0x40>)
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	4a06      	ldr	r2, [pc, #24]	@ (800422c <FLASH_Program_Word+0x40>)
 8004214:	f043 0301 	orr.w	r3, r3, #1
 8004218:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	601a      	str	r2, [r3, #0]
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	40023c00 	.word	0x40023c00

08004230 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	460b      	mov	r3, r1
 800423a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800423c:	4b0d      	ldr	r3, [pc, #52]	@ (8004274 <FLASH_Program_HalfWord+0x44>)
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	4a0c      	ldr	r2, [pc, #48]	@ (8004274 <FLASH_Program_HalfWord+0x44>)
 8004242:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004246:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004248:	4b0a      	ldr	r3, [pc, #40]	@ (8004274 <FLASH_Program_HalfWord+0x44>)
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	4a09      	ldr	r2, [pc, #36]	@ (8004274 <FLASH_Program_HalfWord+0x44>)
 800424e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004252:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004254:	4b07      	ldr	r3, [pc, #28]	@ (8004274 <FLASH_Program_HalfWord+0x44>)
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	4a06      	ldr	r2, [pc, #24]	@ (8004274 <FLASH_Program_HalfWord+0x44>)
 800425a:	f043 0301 	orr.w	r3, r3, #1
 800425e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	887a      	ldrh	r2, [r7, #2]
 8004264:	801a      	strh	r2, [r3, #0]
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	40023c00 	.word	0x40023c00

08004278 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	460b      	mov	r3, r1
 8004282:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004284:	4b0c      	ldr	r3, [pc, #48]	@ (80042b8 <FLASH_Program_Byte+0x40>)
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	4a0b      	ldr	r2, [pc, #44]	@ (80042b8 <FLASH_Program_Byte+0x40>)
 800428a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800428e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004290:	4b09      	ldr	r3, [pc, #36]	@ (80042b8 <FLASH_Program_Byte+0x40>)
 8004292:	4a09      	ldr	r2, [pc, #36]	@ (80042b8 <FLASH_Program_Byte+0x40>)
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004298:	4b07      	ldr	r3, [pc, #28]	@ (80042b8 <FLASH_Program_Byte+0x40>)
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	4a06      	ldr	r2, [pc, #24]	@ (80042b8 <FLASH_Program_Byte+0x40>)
 800429e:	f043 0301 	orr.w	r3, r3, #1
 80042a2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	78fa      	ldrb	r2, [r7, #3]
 80042a8:	701a      	strb	r2, [r3, #0]
}
 80042aa:	bf00      	nop
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	40023c00 	.word	0x40023c00

080042bc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80042c0:	4b2f      	ldr	r3, [pc, #188]	@ (8004380 <FLASH_SetErrorCode+0xc4>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f003 0310 	and.w	r3, r3, #16
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d008      	beq.n	80042de <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80042cc:	4b2d      	ldr	r3, [pc, #180]	@ (8004384 <FLASH_SetErrorCode+0xc8>)
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	f043 0310 	orr.w	r3, r3, #16
 80042d4:	4a2b      	ldr	r2, [pc, #172]	@ (8004384 <FLASH_SetErrorCode+0xc8>)
 80042d6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80042d8:	4b29      	ldr	r3, [pc, #164]	@ (8004380 <FLASH_SetErrorCode+0xc4>)
 80042da:	2210      	movs	r2, #16
 80042dc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80042de:	4b28      	ldr	r3, [pc, #160]	@ (8004380 <FLASH_SetErrorCode+0xc4>)
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f003 0320 	and.w	r3, r3, #32
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d008      	beq.n	80042fc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80042ea:	4b26      	ldr	r3, [pc, #152]	@ (8004384 <FLASH_SetErrorCode+0xc8>)
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	f043 0308 	orr.w	r3, r3, #8
 80042f2:	4a24      	ldr	r2, [pc, #144]	@ (8004384 <FLASH_SetErrorCode+0xc8>)
 80042f4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80042f6:	4b22      	ldr	r3, [pc, #136]	@ (8004380 <FLASH_SetErrorCode+0xc4>)
 80042f8:	2220      	movs	r2, #32
 80042fa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80042fc:	4b20      	ldr	r3, [pc, #128]	@ (8004380 <FLASH_SetErrorCode+0xc4>)
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004304:	2b00      	cmp	r3, #0
 8004306:	d008      	beq.n	800431a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004308:	4b1e      	ldr	r3, [pc, #120]	@ (8004384 <FLASH_SetErrorCode+0xc8>)
 800430a:	69db      	ldr	r3, [r3, #28]
 800430c:	f043 0304 	orr.w	r3, r3, #4
 8004310:	4a1c      	ldr	r2, [pc, #112]	@ (8004384 <FLASH_SetErrorCode+0xc8>)
 8004312:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004314:	4b1a      	ldr	r3, [pc, #104]	@ (8004380 <FLASH_SetErrorCode+0xc4>)
 8004316:	2240      	movs	r2, #64	@ 0x40
 8004318:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800431a:	4b19      	ldr	r3, [pc, #100]	@ (8004380 <FLASH_SetErrorCode+0xc4>)
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004322:	2b00      	cmp	r3, #0
 8004324:	d008      	beq.n	8004338 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004326:	4b17      	ldr	r3, [pc, #92]	@ (8004384 <FLASH_SetErrorCode+0xc8>)
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	f043 0302 	orr.w	r3, r3, #2
 800432e:	4a15      	ldr	r2, [pc, #84]	@ (8004384 <FLASH_SetErrorCode+0xc8>)
 8004330:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004332:	4b13      	ldr	r3, [pc, #76]	@ (8004380 <FLASH_SetErrorCode+0xc4>)
 8004334:	2280      	movs	r2, #128	@ 0x80
 8004336:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004338:	4b11      	ldr	r3, [pc, #68]	@ (8004380 <FLASH_SetErrorCode+0xc4>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004340:	2b00      	cmp	r3, #0
 8004342:	d009      	beq.n	8004358 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004344:	4b0f      	ldr	r3, [pc, #60]	@ (8004384 <FLASH_SetErrorCode+0xc8>)
 8004346:	69db      	ldr	r3, [r3, #28]
 8004348:	f043 0301 	orr.w	r3, r3, #1
 800434c:	4a0d      	ldr	r2, [pc, #52]	@ (8004384 <FLASH_SetErrorCode+0xc8>)
 800434e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004350:	4b0b      	ldr	r3, [pc, #44]	@ (8004380 <FLASH_SetErrorCode+0xc4>)
 8004352:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004356:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004358:	4b09      	ldr	r3, [pc, #36]	@ (8004380 <FLASH_SetErrorCode+0xc4>)
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d008      	beq.n	8004376 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004364:	4b07      	ldr	r3, [pc, #28]	@ (8004384 <FLASH_SetErrorCode+0xc8>)
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	f043 0320 	orr.w	r3, r3, #32
 800436c:	4a05      	ldr	r2, [pc, #20]	@ (8004384 <FLASH_SetErrorCode+0xc8>)
 800436e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004370:	4b03      	ldr	r3, [pc, #12]	@ (8004380 <FLASH_SetErrorCode+0xc4>)
 8004372:	2202      	movs	r2, #2
 8004374:	60da      	str	r2, [r3, #12]
  }
}
 8004376:	bf00      	nop
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	40023c00 	.word	0x40023c00
 8004384:	2000053c 	.word	0x2000053c

08004388 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8004396:	2300      	movs	r3, #0
 8004398:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800439a:	4b31      	ldr	r3, [pc, #196]	@ (8004460 <HAL_FLASHEx_Erase+0xd8>)
 800439c:	7e1b      	ldrb	r3, [r3, #24]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d101      	bne.n	80043a6 <HAL_FLASHEx_Erase+0x1e>
 80043a2:	2302      	movs	r3, #2
 80043a4:	e058      	b.n	8004458 <HAL_FLASHEx_Erase+0xd0>
 80043a6:	4b2e      	ldr	r3, [pc, #184]	@ (8004460 <HAL_FLASHEx_Erase+0xd8>)
 80043a8:	2201      	movs	r2, #1
 80043aa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80043ac:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80043b0:	f7ff feaa 	bl	8004108 <FLASH_WaitForLastOperation>
 80043b4:	4603      	mov	r3, r0
 80043b6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80043b8:	7bfb      	ldrb	r3, [r7, #15]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d148      	bne.n	8004450 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80043c4:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d115      	bne.n	80043fa <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	4619      	mov	r1, r3
 80043da:	4610      	mov	r0, r2
 80043dc:	f000 f844 	bl	8004468 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80043e0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80043e4:	f7ff fe90 	bl	8004108 <FLASH_WaitForLastOperation>
 80043e8:	4603      	mov	r3, r0
 80043ea:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80043ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004464 <HAL_FLASHEx_Erase+0xdc>)
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	4a1c      	ldr	r2, [pc, #112]	@ (8004464 <HAL_FLASHEx_Erase+0xdc>)
 80043f2:	f023 0304 	bic.w	r3, r3, #4
 80043f6:	6113      	str	r3, [r2, #16]
 80043f8:	e028      	b.n	800444c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	60bb      	str	r3, [r7, #8]
 8004400:	e01c      	b.n	800443c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	b2db      	uxtb	r3, r3
 8004408:	4619      	mov	r1, r3
 800440a:	68b8      	ldr	r0, [r7, #8]
 800440c:	f000 f850 	bl	80044b0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004410:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004414:	f7ff fe78 	bl	8004108 <FLASH_WaitForLastOperation>
 8004418:	4603      	mov	r3, r0
 800441a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800441c:	4b11      	ldr	r3, [pc, #68]	@ (8004464 <HAL_FLASHEx_Erase+0xdc>)
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	4a10      	ldr	r2, [pc, #64]	@ (8004464 <HAL_FLASHEx_Erase+0xdc>)
 8004422:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8004426:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8004428:	7bfb      	ldrb	r3, [r7, #15]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	601a      	str	r2, [r3, #0]
          break;
 8004434:	e00a      	b.n	800444c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	3301      	adds	r3, #1
 800443a:	60bb      	str	r3, [r7, #8]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68da      	ldr	r2, [r3, #12]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	4413      	add	r3, r2
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	429a      	cmp	r2, r3
 800444a:	d3da      	bcc.n	8004402 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800444c:	f000 f878 	bl	8004540 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004450:	4b03      	ldr	r3, [pc, #12]	@ (8004460 <HAL_FLASHEx_Erase+0xd8>)
 8004452:	2200      	movs	r2, #0
 8004454:	761a      	strb	r2, [r3, #24]

  return status;
 8004456:	7bfb      	ldrb	r3, [r7, #15]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	2000053c 	.word	0x2000053c
 8004464:	40023c00 	.word	0x40023c00

08004468 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	4603      	mov	r3, r0
 8004470:	6039      	str	r1, [r7, #0]
 8004472:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004474:	4b0d      	ldr	r3, [pc, #52]	@ (80044ac <FLASH_MassErase+0x44>)
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	4a0c      	ldr	r2, [pc, #48]	@ (80044ac <FLASH_MassErase+0x44>)
 800447a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800447e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8004480:	4b0a      	ldr	r3, [pc, #40]	@ (80044ac <FLASH_MassErase+0x44>)
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	4a09      	ldr	r2, [pc, #36]	@ (80044ac <FLASH_MassErase+0x44>)
 8004486:	f043 0304 	orr.w	r3, r3, #4
 800448a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800448c:	4b07      	ldr	r3, [pc, #28]	@ (80044ac <FLASH_MassErase+0x44>)
 800448e:	691a      	ldr	r2, [r3, #16]
 8004490:	79fb      	ldrb	r3, [r7, #7]
 8004492:	021b      	lsls	r3, r3, #8
 8004494:	4313      	orrs	r3, r2
 8004496:	4a05      	ldr	r2, [pc, #20]	@ (80044ac <FLASH_MassErase+0x44>)
 8004498:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800449c:	6113      	str	r3, [r2, #16]
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	40023c00 	.word	0x40023c00

080044b0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	460b      	mov	r3, r1
 80044ba:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80044c0:	78fb      	ldrb	r3, [r7, #3]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d102      	bne.n	80044cc <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80044c6:	2300      	movs	r3, #0
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	e010      	b.n	80044ee <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80044cc:	78fb      	ldrb	r3, [r7, #3]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d103      	bne.n	80044da <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80044d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80044d6:	60fb      	str	r3, [r7, #12]
 80044d8:	e009      	b.n	80044ee <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80044da:	78fb      	ldrb	r3, [r7, #3]
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d103      	bne.n	80044e8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80044e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80044e4:	60fb      	str	r3, [r7, #12]
 80044e6:	e002      	b.n	80044ee <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80044e8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80044ec:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80044ee:	4b13      	ldr	r3, [pc, #76]	@ (800453c <FLASH_Erase_Sector+0x8c>)
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	4a12      	ldr	r2, [pc, #72]	@ (800453c <FLASH_Erase_Sector+0x8c>)
 80044f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80044fa:	4b10      	ldr	r3, [pc, #64]	@ (800453c <FLASH_Erase_Sector+0x8c>)
 80044fc:	691a      	ldr	r2, [r3, #16]
 80044fe:	490f      	ldr	r1, [pc, #60]	@ (800453c <FLASH_Erase_Sector+0x8c>)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4313      	orrs	r3, r2
 8004504:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004506:	4b0d      	ldr	r3, [pc, #52]	@ (800453c <FLASH_Erase_Sector+0x8c>)
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	4a0c      	ldr	r2, [pc, #48]	@ (800453c <FLASH_Erase_Sector+0x8c>)
 800450c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004510:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004512:	4b0a      	ldr	r3, [pc, #40]	@ (800453c <FLASH_Erase_Sector+0x8c>)
 8004514:	691a      	ldr	r2, [r3, #16]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	4313      	orrs	r3, r2
 800451c:	4a07      	ldr	r2, [pc, #28]	@ (800453c <FLASH_Erase_Sector+0x8c>)
 800451e:	f043 0302 	orr.w	r3, r3, #2
 8004522:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004524:	4b05      	ldr	r3, [pc, #20]	@ (800453c <FLASH_Erase_Sector+0x8c>)
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	4a04      	ldr	r2, [pc, #16]	@ (800453c <FLASH_Erase_Sector+0x8c>)
 800452a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800452e:	6113      	str	r3, [r2, #16]
}
 8004530:	bf00      	nop
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	40023c00 	.word	0x40023c00

08004540 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8004544:	4b20      	ldr	r3, [pc, #128]	@ (80045c8 <FLASH_FlushCaches+0x88>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800454c:	2b00      	cmp	r3, #0
 800454e:	d017      	beq.n	8004580 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004550:	4b1d      	ldr	r3, [pc, #116]	@ (80045c8 <FLASH_FlushCaches+0x88>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a1c      	ldr	r2, [pc, #112]	@ (80045c8 <FLASH_FlushCaches+0x88>)
 8004556:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800455a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800455c:	4b1a      	ldr	r3, [pc, #104]	@ (80045c8 <FLASH_FlushCaches+0x88>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a19      	ldr	r2, [pc, #100]	@ (80045c8 <FLASH_FlushCaches+0x88>)
 8004562:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004566:	6013      	str	r3, [r2, #0]
 8004568:	4b17      	ldr	r3, [pc, #92]	@ (80045c8 <FLASH_FlushCaches+0x88>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a16      	ldr	r2, [pc, #88]	@ (80045c8 <FLASH_FlushCaches+0x88>)
 800456e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004572:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004574:	4b14      	ldr	r3, [pc, #80]	@ (80045c8 <FLASH_FlushCaches+0x88>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a13      	ldr	r2, [pc, #76]	@ (80045c8 <FLASH_FlushCaches+0x88>)
 800457a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800457e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8004580:	4b11      	ldr	r3, [pc, #68]	@ (80045c8 <FLASH_FlushCaches+0x88>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004588:	2b00      	cmp	r3, #0
 800458a:	d017      	beq.n	80045bc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800458c:	4b0e      	ldr	r3, [pc, #56]	@ (80045c8 <FLASH_FlushCaches+0x88>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a0d      	ldr	r2, [pc, #52]	@ (80045c8 <FLASH_FlushCaches+0x88>)
 8004592:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004596:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004598:	4b0b      	ldr	r3, [pc, #44]	@ (80045c8 <FLASH_FlushCaches+0x88>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a0a      	ldr	r2, [pc, #40]	@ (80045c8 <FLASH_FlushCaches+0x88>)
 800459e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	4b08      	ldr	r3, [pc, #32]	@ (80045c8 <FLASH_FlushCaches+0x88>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a07      	ldr	r2, [pc, #28]	@ (80045c8 <FLASH_FlushCaches+0x88>)
 80045aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045ae:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80045b0:	4b05      	ldr	r3, [pc, #20]	@ (80045c8 <FLASH_FlushCaches+0x88>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a04      	ldr	r2, [pc, #16]	@ (80045c8 <FLASH_FlushCaches+0x88>)
 80045b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80045ba:	6013      	str	r3, [r2, #0]
  }
}
 80045bc:	bf00      	nop
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	40023c00 	.word	0x40023c00

080045cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b089      	sub	sp, #36	@ 0x24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045da:	2300      	movs	r3, #0
 80045dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045de:	2300      	movs	r3, #0
 80045e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045e2:	2300      	movs	r3, #0
 80045e4:	61fb      	str	r3, [r7, #28]
 80045e6:	e159      	b.n	800489c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045e8:	2201      	movs	r2, #1
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	4013      	ands	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	429a      	cmp	r2, r3
 8004602:	f040 8148 	bne.w	8004896 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f003 0303 	and.w	r3, r3, #3
 800460e:	2b01      	cmp	r3, #1
 8004610:	d005      	beq.n	800461e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800461a:	2b02      	cmp	r3, #2
 800461c:	d130      	bne.n	8004680 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	2203      	movs	r2, #3
 800462a:	fa02 f303 	lsl.w	r3, r2, r3
 800462e:	43db      	mvns	r3, r3
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	4013      	ands	r3, r2
 8004634:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	68da      	ldr	r2, [r3, #12]
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	4313      	orrs	r3, r2
 8004646:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004654:	2201      	movs	r2, #1
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	43db      	mvns	r3, r3
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	4013      	ands	r3, r2
 8004662:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	091b      	lsrs	r3, r3, #4
 800466a:	f003 0201 	and.w	r2, r3, #1
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	fa02 f303 	lsl.w	r3, r2, r3
 8004674:	69ba      	ldr	r2, [r7, #24]
 8004676:	4313      	orrs	r3, r2
 8004678:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f003 0303 	and.w	r3, r3, #3
 8004688:	2b03      	cmp	r3, #3
 800468a:	d017      	beq.n	80046bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	2203      	movs	r2, #3
 8004698:	fa02 f303 	lsl.w	r3, r2, r3
 800469c:	43db      	mvns	r3, r3
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	4013      	ands	r3, r2
 80046a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	005b      	lsls	r3, r3, #1
 80046ac:	fa02 f303 	lsl.w	r3, r2, r3
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f003 0303 	and.w	r3, r3, #3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d123      	bne.n	8004710 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	08da      	lsrs	r2, r3, #3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3208      	adds	r2, #8
 80046d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	220f      	movs	r2, #15
 80046e0:	fa02 f303 	lsl.w	r3, r2, r3
 80046e4:	43db      	mvns	r3, r3
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	4013      	ands	r3, r2
 80046ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	691a      	ldr	r2, [r3, #16]
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	f003 0307 	and.w	r3, r3, #7
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	4313      	orrs	r3, r2
 8004700:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	08da      	lsrs	r2, r3, #3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	3208      	adds	r2, #8
 800470a:	69b9      	ldr	r1, [r7, #24]
 800470c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	2203      	movs	r2, #3
 800471c:	fa02 f303 	lsl.w	r3, r2, r3
 8004720:	43db      	mvns	r3, r3
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	4013      	ands	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f003 0203 	and.w	r2, r3, #3
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	4313      	orrs	r3, r2
 800473c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 80a2 	beq.w	8004896 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004752:	2300      	movs	r3, #0
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	4b57      	ldr	r3, [pc, #348]	@ (80048b4 <HAL_GPIO_Init+0x2e8>)
 8004758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800475a:	4a56      	ldr	r2, [pc, #344]	@ (80048b4 <HAL_GPIO_Init+0x2e8>)
 800475c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004760:	6453      	str	r3, [r2, #68]	@ 0x44
 8004762:	4b54      	ldr	r3, [pc, #336]	@ (80048b4 <HAL_GPIO_Init+0x2e8>)
 8004764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004766:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800476e:	4a52      	ldr	r2, [pc, #328]	@ (80048b8 <HAL_GPIO_Init+0x2ec>)
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	089b      	lsrs	r3, r3, #2
 8004774:	3302      	adds	r3, #2
 8004776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800477a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	220f      	movs	r2, #15
 8004786:	fa02 f303 	lsl.w	r3, r2, r3
 800478a:	43db      	mvns	r3, r3
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	4013      	ands	r3, r2
 8004790:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a49      	ldr	r2, [pc, #292]	@ (80048bc <HAL_GPIO_Init+0x2f0>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d019      	beq.n	80047ce <HAL_GPIO_Init+0x202>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a48      	ldr	r2, [pc, #288]	@ (80048c0 <HAL_GPIO_Init+0x2f4>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d013      	beq.n	80047ca <HAL_GPIO_Init+0x1fe>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a47      	ldr	r2, [pc, #284]	@ (80048c4 <HAL_GPIO_Init+0x2f8>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d00d      	beq.n	80047c6 <HAL_GPIO_Init+0x1fa>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a46      	ldr	r2, [pc, #280]	@ (80048c8 <HAL_GPIO_Init+0x2fc>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d007      	beq.n	80047c2 <HAL_GPIO_Init+0x1f6>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a45      	ldr	r2, [pc, #276]	@ (80048cc <HAL_GPIO_Init+0x300>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d101      	bne.n	80047be <HAL_GPIO_Init+0x1f2>
 80047ba:	2304      	movs	r3, #4
 80047bc:	e008      	b.n	80047d0 <HAL_GPIO_Init+0x204>
 80047be:	2307      	movs	r3, #7
 80047c0:	e006      	b.n	80047d0 <HAL_GPIO_Init+0x204>
 80047c2:	2303      	movs	r3, #3
 80047c4:	e004      	b.n	80047d0 <HAL_GPIO_Init+0x204>
 80047c6:	2302      	movs	r3, #2
 80047c8:	e002      	b.n	80047d0 <HAL_GPIO_Init+0x204>
 80047ca:	2301      	movs	r3, #1
 80047cc:	e000      	b.n	80047d0 <HAL_GPIO_Init+0x204>
 80047ce:	2300      	movs	r3, #0
 80047d0:	69fa      	ldr	r2, [r7, #28]
 80047d2:	f002 0203 	and.w	r2, r2, #3
 80047d6:	0092      	lsls	r2, r2, #2
 80047d8:	4093      	lsls	r3, r2
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	4313      	orrs	r3, r2
 80047de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047e0:	4935      	ldr	r1, [pc, #212]	@ (80048b8 <HAL_GPIO_Init+0x2ec>)
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	089b      	lsrs	r3, r3, #2
 80047e6:	3302      	adds	r3, #2
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047ee:	4b38      	ldr	r3, [pc, #224]	@ (80048d0 <HAL_GPIO_Init+0x304>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	43db      	mvns	r3, r3
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	4013      	ands	r3, r2
 80047fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	4313      	orrs	r3, r2
 8004810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004812:	4a2f      	ldr	r2, [pc, #188]	@ (80048d0 <HAL_GPIO_Init+0x304>)
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004818:	4b2d      	ldr	r3, [pc, #180]	@ (80048d0 <HAL_GPIO_Init+0x304>)
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	43db      	mvns	r3, r3
 8004822:	69ba      	ldr	r2, [r7, #24]
 8004824:	4013      	ands	r3, r2
 8004826:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d003      	beq.n	800483c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	4313      	orrs	r3, r2
 800483a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800483c:	4a24      	ldr	r2, [pc, #144]	@ (80048d0 <HAL_GPIO_Init+0x304>)
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004842:	4b23      	ldr	r3, [pc, #140]	@ (80048d0 <HAL_GPIO_Init+0x304>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	43db      	mvns	r3, r3
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	4013      	ands	r3, r2
 8004850:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800485e:	69ba      	ldr	r2, [r7, #24]
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	4313      	orrs	r3, r2
 8004864:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004866:	4a1a      	ldr	r2, [pc, #104]	@ (80048d0 <HAL_GPIO_Init+0x304>)
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800486c:	4b18      	ldr	r3, [pc, #96]	@ (80048d0 <HAL_GPIO_Init+0x304>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	43db      	mvns	r3, r3
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	4013      	ands	r3, r2
 800487a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d003      	beq.n	8004890 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	4313      	orrs	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004890:	4a0f      	ldr	r2, [pc, #60]	@ (80048d0 <HAL_GPIO_Init+0x304>)
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	3301      	adds	r3, #1
 800489a:	61fb      	str	r3, [r7, #28]
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	2b0f      	cmp	r3, #15
 80048a0:	f67f aea2 	bls.w	80045e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80048a4:	bf00      	nop
 80048a6:	bf00      	nop
 80048a8:	3724      	adds	r7, #36	@ 0x24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	40023800 	.word	0x40023800
 80048b8:	40013800 	.word	0x40013800
 80048bc:	40020000 	.word	0x40020000
 80048c0:	40020400 	.word	0x40020400
 80048c4:	40020800 	.word	0x40020800
 80048c8:	40020c00 	.word	0x40020c00
 80048cc:	40021000 	.word	0x40021000
 80048d0:	40013c00 	.word	0x40013c00

080048d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	460b      	mov	r3, r1
 80048de:	807b      	strh	r3, [r7, #2]
 80048e0:	4613      	mov	r3, r2
 80048e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048e4:	787b      	ldrb	r3, [r7, #1]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048ea:	887a      	ldrh	r2, [r7, #2]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80048f0:	e003      	b.n	80048fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80048f2:	887b      	ldrh	r3, [r7, #2]
 80048f4:	041a      	lsls	r2, r3, #16
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	619a      	str	r2, [r3, #24]
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
	...

08004908 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e267      	b.n	8004dea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d075      	beq.n	8004a12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004926:	4b88      	ldr	r3, [pc, #544]	@ (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 030c 	and.w	r3, r3, #12
 800492e:	2b04      	cmp	r3, #4
 8004930:	d00c      	beq.n	800494c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004932:	4b85      	ldr	r3, [pc, #532]	@ (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800493a:	2b08      	cmp	r3, #8
 800493c:	d112      	bne.n	8004964 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800493e:	4b82      	ldr	r3, [pc, #520]	@ (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004946:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800494a:	d10b      	bne.n	8004964 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800494c:	4b7e      	ldr	r3, [pc, #504]	@ (8004b48 <HAL_RCC_OscConfig+0x240>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d05b      	beq.n	8004a10 <HAL_RCC_OscConfig+0x108>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d157      	bne.n	8004a10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e242      	b.n	8004dea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800496c:	d106      	bne.n	800497c <HAL_RCC_OscConfig+0x74>
 800496e:	4b76      	ldr	r3, [pc, #472]	@ (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a75      	ldr	r2, [pc, #468]	@ (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004978:	6013      	str	r3, [r2, #0]
 800497a:	e01d      	b.n	80049b8 <HAL_RCC_OscConfig+0xb0>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004984:	d10c      	bne.n	80049a0 <HAL_RCC_OscConfig+0x98>
 8004986:	4b70      	ldr	r3, [pc, #448]	@ (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a6f      	ldr	r2, [pc, #444]	@ (8004b48 <HAL_RCC_OscConfig+0x240>)
 800498c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004990:	6013      	str	r3, [r2, #0]
 8004992:	4b6d      	ldr	r3, [pc, #436]	@ (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a6c      	ldr	r2, [pc, #432]	@ (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004998:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800499c:	6013      	str	r3, [r2, #0]
 800499e:	e00b      	b.n	80049b8 <HAL_RCC_OscConfig+0xb0>
 80049a0:	4b69      	ldr	r3, [pc, #420]	@ (8004b48 <HAL_RCC_OscConfig+0x240>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a68      	ldr	r2, [pc, #416]	@ (8004b48 <HAL_RCC_OscConfig+0x240>)
 80049a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049aa:	6013      	str	r3, [r2, #0]
 80049ac:	4b66      	ldr	r3, [pc, #408]	@ (8004b48 <HAL_RCC_OscConfig+0x240>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a65      	ldr	r2, [pc, #404]	@ (8004b48 <HAL_RCC_OscConfig+0x240>)
 80049b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d013      	beq.n	80049e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c0:	f7fd fff4 	bl	80029ac <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049c8:	f7fd fff0 	bl	80029ac <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b64      	cmp	r3, #100	@ 0x64
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e207      	b.n	8004dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049da:	4b5b      	ldr	r3, [pc, #364]	@ (8004b48 <HAL_RCC_OscConfig+0x240>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d0f0      	beq.n	80049c8 <HAL_RCC_OscConfig+0xc0>
 80049e6:	e014      	b.n	8004a12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e8:	f7fd ffe0 	bl	80029ac <HAL_GetTick>
 80049ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049f0:	f7fd ffdc 	bl	80029ac <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b64      	cmp	r3, #100	@ 0x64
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e1f3      	b.n	8004dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a02:	4b51      	ldr	r3, [pc, #324]	@ (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1f0      	bne.n	80049f0 <HAL_RCC_OscConfig+0xe8>
 8004a0e:	e000      	b.n	8004a12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d063      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a1e:	4b4a      	ldr	r3, [pc, #296]	@ (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f003 030c 	and.w	r3, r3, #12
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00b      	beq.n	8004a42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a2a:	4b47      	ldr	r3, [pc, #284]	@ (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a32:	2b08      	cmp	r3, #8
 8004a34:	d11c      	bne.n	8004a70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a36:	4b44      	ldr	r3, [pc, #272]	@ (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d116      	bne.n	8004a70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a42:	4b41      	ldr	r3, [pc, #260]	@ (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d005      	beq.n	8004a5a <HAL_RCC_OscConfig+0x152>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d001      	beq.n	8004a5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e1c7      	b.n	8004dea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a5a:	4b3b      	ldr	r3, [pc, #236]	@ (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	4937      	ldr	r1, [pc, #220]	@ (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a6e:	e03a      	b.n	8004ae6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d020      	beq.n	8004aba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a78:	4b34      	ldr	r3, [pc, #208]	@ (8004b4c <HAL_RCC_OscConfig+0x244>)
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a7e:	f7fd ff95 	bl	80029ac <HAL_GetTick>
 8004a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a84:	e008      	b.n	8004a98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a86:	f7fd ff91 	bl	80029ac <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d901      	bls.n	8004a98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e1a8      	b.n	8004dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a98:	4b2b      	ldr	r3, [pc, #172]	@ (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d0f0      	beq.n	8004a86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa4:	4b28      	ldr	r3, [pc, #160]	@ (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	00db      	lsls	r3, r3, #3
 8004ab2:	4925      	ldr	r1, [pc, #148]	@ (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	600b      	str	r3, [r1, #0]
 8004ab8:	e015      	b.n	8004ae6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aba:	4b24      	ldr	r3, [pc, #144]	@ (8004b4c <HAL_RCC_OscConfig+0x244>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac0:	f7fd ff74 	bl	80029ac <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ac8:	f7fd ff70 	bl	80029ac <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e187      	b.n	8004dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ada:	4b1b      	ldr	r3, [pc, #108]	@ (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1f0      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0308 	and.w	r3, r3, #8
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d036      	beq.n	8004b60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d016      	beq.n	8004b28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004afa:	4b15      	ldr	r3, [pc, #84]	@ (8004b50 <HAL_RCC_OscConfig+0x248>)
 8004afc:	2201      	movs	r2, #1
 8004afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b00:	f7fd ff54 	bl	80029ac <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b06:	e008      	b.n	8004b1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b08:	f7fd ff50 	bl	80029ac <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e167      	b.n	8004dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8004b48 <HAL_RCC_OscConfig+0x240>)
 8004b1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d0f0      	beq.n	8004b08 <HAL_RCC_OscConfig+0x200>
 8004b26:	e01b      	b.n	8004b60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b28:	4b09      	ldr	r3, [pc, #36]	@ (8004b50 <HAL_RCC_OscConfig+0x248>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b2e:	f7fd ff3d 	bl	80029ac <HAL_GetTick>
 8004b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b34:	e00e      	b.n	8004b54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b36:	f7fd ff39 	bl	80029ac <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d907      	bls.n	8004b54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e150      	b.n	8004dea <HAL_RCC_OscConfig+0x4e2>
 8004b48:	40023800 	.word	0x40023800
 8004b4c:	42470000 	.word	0x42470000
 8004b50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b54:	4b88      	ldr	r3, [pc, #544]	@ (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004b56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1ea      	bne.n	8004b36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 8097 	beq.w	8004c9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b72:	4b81      	ldr	r3, [pc, #516]	@ (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10f      	bne.n	8004b9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60bb      	str	r3, [r7, #8]
 8004b82:	4b7d      	ldr	r3, [pc, #500]	@ (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b86:	4a7c      	ldr	r2, [pc, #496]	@ (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b8e:	4b7a      	ldr	r3, [pc, #488]	@ (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b96:	60bb      	str	r3, [r7, #8]
 8004b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b9e:	4b77      	ldr	r3, [pc, #476]	@ (8004d7c <HAL_RCC_OscConfig+0x474>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d118      	bne.n	8004bdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004baa:	4b74      	ldr	r3, [pc, #464]	@ (8004d7c <HAL_RCC_OscConfig+0x474>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a73      	ldr	r2, [pc, #460]	@ (8004d7c <HAL_RCC_OscConfig+0x474>)
 8004bb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bb6:	f7fd fef9 	bl	80029ac <HAL_GetTick>
 8004bba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bbc:	e008      	b.n	8004bd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bbe:	f7fd fef5 	bl	80029ac <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d901      	bls.n	8004bd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e10c      	b.n	8004dea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bd0:	4b6a      	ldr	r3, [pc, #424]	@ (8004d7c <HAL_RCC_OscConfig+0x474>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0f0      	beq.n	8004bbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d106      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x2ea>
 8004be4:	4b64      	ldr	r3, [pc, #400]	@ (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004be8:	4a63      	ldr	r2, [pc, #396]	@ (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004bea:	f043 0301 	orr.w	r3, r3, #1
 8004bee:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bf0:	e01c      	b.n	8004c2c <HAL_RCC_OscConfig+0x324>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	2b05      	cmp	r3, #5
 8004bf8:	d10c      	bne.n	8004c14 <HAL_RCC_OscConfig+0x30c>
 8004bfa:	4b5f      	ldr	r3, [pc, #380]	@ (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004bfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bfe:	4a5e      	ldr	r2, [pc, #376]	@ (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004c00:	f043 0304 	orr.w	r3, r3, #4
 8004c04:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c06:	4b5c      	ldr	r3, [pc, #368]	@ (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c0a:	4a5b      	ldr	r2, [pc, #364]	@ (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004c0c:	f043 0301 	orr.w	r3, r3, #1
 8004c10:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c12:	e00b      	b.n	8004c2c <HAL_RCC_OscConfig+0x324>
 8004c14:	4b58      	ldr	r3, [pc, #352]	@ (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004c16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c18:	4a57      	ldr	r2, [pc, #348]	@ (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004c1a:	f023 0301 	bic.w	r3, r3, #1
 8004c1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c20:	4b55      	ldr	r3, [pc, #340]	@ (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c24:	4a54      	ldr	r2, [pc, #336]	@ (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004c26:	f023 0304 	bic.w	r3, r3, #4
 8004c2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d015      	beq.n	8004c60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c34:	f7fd feba 	bl	80029ac <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c3a:	e00a      	b.n	8004c52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c3c:	f7fd feb6 	bl	80029ac <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e0cb      	b.n	8004dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c52:	4b49      	ldr	r3, [pc, #292]	@ (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d0ee      	beq.n	8004c3c <HAL_RCC_OscConfig+0x334>
 8004c5e:	e014      	b.n	8004c8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c60:	f7fd fea4 	bl	80029ac <HAL_GetTick>
 8004c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c66:	e00a      	b.n	8004c7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c68:	f7fd fea0 	bl	80029ac <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e0b5      	b.n	8004dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c7e:	4b3e      	ldr	r3, [pc, #248]	@ (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1ee      	bne.n	8004c68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c8a:	7dfb      	ldrb	r3, [r7, #23]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d105      	bne.n	8004c9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c90:	4b39      	ldr	r3, [pc, #228]	@ (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c94:	4a38      	ldr	r2, [pc, #224]	@ (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004c96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c9a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 80a1 	beq.w	8004de8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ca6:	4b34      	ldr	r3, [pc, #208]	@ (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 030c 	and.w	r3, r3, #12
 8004cae:	2b08      	cmp	r3, #8
 8004cb0:	d05c      	beq.n	8004d6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d141      	bne.n	8004d3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cba:	4b31      	ldr	r3, [pc, #196]	@ (8004d80 <HAL_RCC_OscConfig+0x478>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc0:	f7fd fe74 	bl	80029ac <HAL_GetTick>
 8004cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cc6:	e008      	b.n	8004cda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cc8:	f7fd fe70 	bl	80029ac <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e087      	b.n	8004dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cda:	4b27      	ldr	r3, [pc, #156]	@ (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1f0      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	69da      	ldr	r2, [r3, #28]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf4:	019b      	lsls	r3, r3, #6
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cfc:	085b      	lsrs	r3, r3, #1
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	041b      	lsls	r3, r3, #16
 8004d02:	431a      	orrs	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d08:	061b      	lsls	r3, r3, #24
 8004d0a:	491b      	ldr	r1, [pc, #108]	@ (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d10:	4b1b      	ldr	r3, [pc, #108]	@ (8004d80 <HAL_RCC_OscConfig+0x478>)
 8004d12:	2201      	movs	r2, #1
 8004d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d16:	f7fd fe49 	bl	80029ac <HAL_GetTick>
 8004d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d1c:	e008      	b.n	8004d30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d1e:	f7fd fe45 	bl	80029ac <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d901      	bls.n	8004d30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e05c      	b.n	8004dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d30:	4b11      	ldr	r3, [pc, #68]	@ (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0f0      	beq.n	8004d1e <HAL_RCC_OscConfig+0x416>
 8004d3c:	e054      	b.n	8004de8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d3e:	4b10      	ldr	r3, [pc, #64]	@ (8004d80 <HAL_RCC_OscConfig+0x478>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d44:	f7fd fe32 	bl	80029ac <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d4c:	f7fd fe2e 	bl	80029ac <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e045      	b.n	8004dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d5e:	4b06      	ldr	r3, [pc, #24]	@ (8004d78 <HAL_RCC_OscConfig+0x470>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1f0      	bne.n	8004d4c <HAL_RCC_OscConfig+0x444>
 8004d6a:	e03d      	b.n	8004de8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d107      	bne.n	8004d84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e038      	b.n	8004dea <HAL_RCC_OscConfig+0x4e2>
 8004d78:	40023800 	.word	0x40023800
 8004d7c:	40007000 	.word	0x40007000
 8004d80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d84:	4b1b      	ldr	r3, [pc, #108]	@ (8004df4 <HAL_RCC_OscConfig+0x4ec>)
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d028      	beq.n	8004de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d121      	bne.n	8004de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d11a      	bne.n	8004de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004db4:	4013      	ands	r3, r2
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004dba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d111      	bne.n	8004de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dca:	085b      	lsrs	r3, r3, #1
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d107      	bne.n	8004de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d001      	beq.n	8004de8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e000      	b.n	8004dea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3718      	adds	r7, #24
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	40023800 	.word	0x40023800

08004df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d101      	bne.n	8004e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e0cc      	b.n	8004fa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e0c:	4b68      	ldr	r3, [pc, #416]	@ (8004fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0307 	and.w	r3, r3, #7
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d90c      	bls.n	8004e34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e1a:	4b65      	ldr	r3, [pc, #404]	@ (8004fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	b2d2      	uxtb	r2, r2
 8004e20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e22:	4b63      	ldr	r3, [pc, #396]	@ (8004fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0307 	and.w	r3, r3, #7
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d001      	beq.n	8004e34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e0b8      	b.n	8004fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d020      	beq.n	8004e82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0304 	and.w	r3, r3, #4
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d005      	beq.n	8004e58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e4c:	4b59      	ldr	r3, [pc, #356]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	4a58      	ldr	r2, [pc, #352]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e52:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004e56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0308 	and.w	r3, r3, #8
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d005      	beq.n	8004e70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e64:	4b53      	ldr	r3, [pc, #332]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	4a52      	ldr	r2, [pc, #328]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004e6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e70:	4b50      	ldr	r3, [pc, #320]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	494d      	ldr	r1, [pc, #308]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d044      	beq.n	8004f18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d107      	bne.n	8004ea6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e96:	4b47      	ldr	r3, [pc, #284]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d119      	bne.n	8004ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e07f      	b.n	8004fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d003      	beq.n	8004eb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eb2:	2b03      	cmp	r3, #3
 8004eb4:	d107      	bne.n	8004ec6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eb6:	4b3f      	ldr	r3, [pc, #252]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d109      	bne.n	8004ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e06f      	b.n	8004fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ec6:	4b3b      	ldr	r3, [pc, #236]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e067      	b.n	8004fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ed6:	4b37      	ldr	r3, [pc, #220]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f023 0203 	bic.w	r2, r3, #3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	4934      	ldr	r1, [pc, #208]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ee8:	f7fd fd60 	bl	80029ac <HAL_GetTick>
 8004eec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eee:	e00a      	b.n	8004f06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ef0:	f7fd fd5c 	bl	80029ac <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e04f      	b.n	8004fa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f06:	4b2b      	ldr	r3, [pc, #172]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f003 020c 	and.w	r2, r3, #12
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d1eb      	bne.n	8004ef0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f18:	4b25      	ldr	r3, [pc, #148]	@ (8004fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0307 	and.w	r3, r3, #7
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d20c      	bcs.n	8004f40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f26:	4b22      	ldr	r3, [pc, #136]	@ (8004fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	b2d2      	uxtb	r2, r2
 8004f2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f2e:	4b20      	ldr	r3, [pc, #128]	@ (8004fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d001      	beq.n	8004f40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e032      	b.n	8004fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0304 	and.w	r3, r3, #4
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d008      	beq.n	8004f5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f4c:	4b19      	ldr	r3, [pc, #100]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	4916      	ldr	r1, [pc, #88]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0308 	and.w	r3, r3, #8
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d009      	beq.n	8004f7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f6a:	4b12      	ldr	r3, [pc, #72]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	00db      	lsls	r3, r3, #3
 8004f78:	490e      	ldr	r1, [pc, #56]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f7e:	f000 f821 	bl	8004fc4 <HAL_RCC_GetSysClockFreq>
 8004f82:	4602      	mov	r2, r0
 8004f84:	4b0b      	ldr	r3, [pc, #44]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	091b      	lsrs	r3, r3, #4
 8004f8a:	f003 030f 	and.w	r3, r3, #15
 8004f8e:	490a      	ldr	r1, [pc, #40]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8004f90:	5ccb      	ldrb	r3, [r1, r3]
 8004f92:	fa22 f303 	lsr.w	r3, r2, r3
 8004f96:	4a09      	ldr	r2, [pc, #36]	@ (8004fbc <HAL_RCC_ClockConfig+0x1c4>)
 8004f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f9a:	4b09      	ldr	r3, [pc, #36]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7fd fcc0 	bl	8002924 <HAL_InitTick>

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	40023c00 	.word	0x40023c00
 8004fb4:	40023800 	.word	0x40023800
 8004fb8:	08009f6c 	.word	0x08009f6c
 8004fbc:	20000058 	.word	0x20000058
 8004fc0:	2000005c 	.word	0x2000005c

08004fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fc8:	b090      	sub	sp, #64	@ 0x40
 8004fca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fdc:	4b59      	ldr	r3, [pc, #356]	@ (8005144 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f003 030c 	and.w	r3, r3, #12
 8004fe4:	2b08      	cmp	r3, #8
 8004fe6:	d00d      	beq.n	8005004 <HAL_RCC_GetSysClockFreq+0x40>
 8004fe8:	2b08      	cmp	r3, #8
 8004fea:	f200 80a1 	bhi.w	8005130 <HAL_RCC_GetSysClockFreq+0x16c>
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d002      	beq.n	8004ff8 <HAL_RCC_GetSysClockFreq+0x34>
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	d003      	beq.n	8004ffe <HAL_RCC_GetSysClockFreq+0x3a>
 8004ff6:	e09b      	b.n	8005130 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ff8:	4b53      	ldr	r3, [pc, #332]	@ (8005148 <HAL_RCC_GetSysClockFreq+0x184>)
 8004ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004ffc:	e09b      	b.n	8005136 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ffe:	4b53      	ldr	r3, [pc, #332]	@ (800514c <HAL_RCC_GetSysClockFreq+0x188>)
 8005000:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005002:	e098      	b.n	8005136 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005004:	4b4f      	ldr	r3, [pc, #316]	@ (8005144 <HAL_RCC_GetSysClockFreq+0x180>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800500c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800500e:	4b4d      	ldr	r3, [pc, #308]	@ (8005144 <HAL_RCC_GetSysClockFreq+0x180>)
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d028      	beq.n	800506c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800501a:	4b4a      	ldr	r3, [pc, #296]	@ (8005144 <HAL_RCC_GetSysClockFreq+0x180>)
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	099b      	lsrs	r3, r3, #6
 8005020:	2200      	movs	r2, #0
 8005022:	623b      	str	r3, [r7, #32]
 8005024:	627a      	str	r2, [r7, #36]	@ 0x24
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800502c:	2100      	movs	r1, #0
 800502e:	4b47      	ldr	r3, [pc, #284]	@ (800514c <HAL_RCC_GetSysClockFreq+0x188>)
 8005030:	fb03 f201 	mul.w	r2, r3, r1
 8005034:	2300      	movs	r3, #0
 8005036:	fb00 f303 	mul.w	r3, r0, r3
 800503a:	4413      	add	r3, r2
 800503c:	4a43      	ldr	r2, [pc, #268]	@ (800514c <HAL_RCC_GetSysClockFreq+0x188>)
 800503e:	fba0 1202 	umull	r1, r2, r0, r2
 8005042:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005044:	460a      	mov	r2, r1
 8005046:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005048:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800504a:	4413      	add	r3, r2
 800504c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800504e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005050:	2200      	movs	r2, #0
 8005052:	61bb      	str	r3, [r7, #24]
 8005054:	61fa      	str	r2, [r7, #28]
 8005056:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800505a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800505e:	f7fb fe15 	bl	8000c8c <__aeabi_uldivmod>
 8005062:	4602      	mov	r2, r0
 8005064:	460b      	mov	r3, r1
 8005066:	4613      	mov	r3, r2
 8005068:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800506a:	e053      	b.n	8005114 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800506c:	4b35      	ldr	r3, [pc, #212]	@ (8005144 <HAL_RCC_GetSysClockFreq+0x180>)
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	099b      	lsrs	r3, r3, #6
 8005072:	2200      	movs	r2, #0
 8005074:	613b      	str	r3, [r7, #16]
 8005076:	617a      	str	r2, [r7, #20]
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800507e:	f04f 0b00 	mov.w	fp, #0
 8005082:	4652      	mov	r2, sl
 8005084:	465b      	mov	r3, fp
 8005086:	f04f 0000 	mov.w	r0, #0
 800508a:	f04f 0100 	mov.w	r1, #0
 800508e:	0159      	lsls	r1, r3, #5
 8005090:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005094:	0150      	lsls	r0, r2, #5
 8005096:	4602      	mov	r2, r0
 8005098:	460b      	mov	r3, r1
 800509a:	ebb2 080a 	subs.w	r8, r2, sl
 800509e:	eb63 090b 	sbc.w	r9, r3, fp
 80050a2:	f04f 0200 	mov.w	r2, #0
 80050a6:	f04f 0300 	mov.w	r3, #0
 80050aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80050ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80050b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80050b6:	ebb2 0408 	subs.w	r4, r2, r8
 80050ba:	eb63 0509 	sbc.w	r5, r3, r9
 80050be:	f04f 0200 	mov.w	r2, #0
 80050c2:	f04f 0300 	mov.w	r3, #0
 80050c6:	00eb      	lsls	r3, r5, #3
 80050c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050cc:	00e2      	lsls	r2, r4, #3
 80050ce:	4614      	mov	r4, r2
 80050d0:	461d      	mov	r5, r3
 80050d2:	eb14 030a 	adds.w	r3, r4, sl
 80050d6:	603b      	str	r3, [r7, #0]
 80050d8:	eb45 030b 	adc.w	r3, r5, fp
 80050dc:	607b      	str	r3, [r7, #4]
 80050de:	f04f 0200 	mov.w	r2, #0
 80050e2:	f04f 0300 	mov.w	r3, #0
 80050e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80050ea:	4629      	mov	r1, r5
 80050ec:	028b      	lsls	r3, r1, #10
 80050ee:	4621      	mov	r1, r4
 80050f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050f4:	4621      	mov	r1, r4
 80050f6:	028a      	lsls	r2, r1, #10
 80050f8:	4610      	mov	r0, r2
 80050fa:	4619      	mov	r1, r3
 80050fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050fe:	2200      	movs	r2, #0
 8005100:	60bb      	str	r3, [r7, #8]
 8005102:	60fa      	str	r2, [r7, #12]
 8005104:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005108:	f7fb fdc0 	bl	8000c8c <__aeabi_uldivmod>
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	4613      	mov	r3, r2
 8005112:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005114:	4b0b      	ldr	r3, [pc, #44]	@ (8005144 <HAL_RCC_GetSysClockFreq+0x180>)
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	0c1b      	lsrs	r3, r3, #16
 800511a:	f003 0303 	and.w	r3, r3, #3
 800511e:	3301      	adds	r3, #1
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8005124:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005128:	fbb2 f3f3 	udiv	r3, r2, r3
 800512c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800512e:	e002      	b.n	8005136 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005130:	4b05      	ldr	r3, [pc, #20]	@ (8005148 <HAL_RCC_GetSysClockFreq+0x184>)
 8005132:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005134:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005138:	4618      	mov	r0, r3
 800513a:	3740      	adds	r7, #64	@ 0x40
 800513c:	46bd      	mov	sp, r7
 800513e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005142:	bf00      	nop
 8005144:	40023800 	.word	0x40023800
 8005148:	00f42400 	.word	0x00f42400
 800514c:	017d7840 	.word	0x017d7840

08005150 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005150:	b480      	push	{r7}
 8005152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005154:	4b03      	ldr	r3, [pc, #12]	@ (8005164 <HAL_RCC_GetHCLKFreq+0x14>)
 8005156:	681b      	ldr	r3, [r3, #0]
}
 8005158:	4618      	mov	r0, r3
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	20000058 	.word	0x20000058

08005168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800516c:	f7ff fff0 	bl	8005150 <HAL_RCC_GetHCLKFreq>
 8005170:	4602      	mov	r2, r0
 8005172:	4b05      	ldr	r3, [pc, #20]	@ (8005188 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	0a9b      	lsrs	r3, r3, #10
 8005178:	f003 0307 	and.w	r3, r3, #7
 800517c:	4903      	ldr	r1, [pc, #12]	@ (800518c <HAL_RCC_GetPCLK1Freq+0x24>)
 800517e:	5ccb      	ldrb	r3, [r1, r3]
 8005180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005184:	4618      	mov	r0, r3
 8005186:	bd80      	pop	{r7, pc}
 8005188:	40023800 	.word	0x40023800
 800518c:	08009f7c 	.word	0x08009f7c

08005190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005194:	f7ff ffdc 	bl	8005150 <HAL_RCC_GetHCLKFreq>
 8005198:	4602      	mov	r2, r0
 800519a:	4b05      	ldr	r3, [pc, #20]	@ (80051b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	0b5b      	lsrs	r3, r3, #13
 80051a0:	f003 0307 	and.w	r3, r3, #7
 80051a4:	4903      	ldr	r1, [pc, #12]	@ (80051b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051a6:	5ccb      	ldrb	r3, [r1, r3]
 80051a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	40023800 	.word	0x40023800
 80051b4:	08009f7c 	.word	0x08009f7c

080051b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e041      	b.n	800524e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d106      	bne.n	80051e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7fd f8ce 	bl	8002380 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2202      	movs	r2, #2
 80051e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3304      	adds	r3, #4
 80051f4:	4619      	mov	r1, r3
 80051f6:	4610      	mov	r0, r2
 80051f8:	f000 f9a0 	bl	800553c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3708      	adds	r7, #8
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
	...

08005258 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d109      	bne.n	800527c <HAL_TIM_PWM_Start+0x24>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b01      	cmp	r3, #1
 8005272:	bf14      	ite	ne
 8005274:	2301      	movne	r3, #1
 8005276:	2300      	moveq	r3, #0
 8005278:	b2db      	uxtb	r3, r3
 800527a:	e022      	b.n	80052c2 <HAL_TIM_PWM_Start+0x6a>
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	2b04      	cmp	r3, #4
 8005280:	d109      	bne.n	8005296 <HAL_TIM_PWM_Start+0x3e>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b01      	cmp	r3, #1
 800528c:	bf14      	ite	ne
 800528e:	2301      	movne	r3, #1
 8005290:	2300      	moveq	r3, #0
 8005292:	b2db      	uxtb	r3, r3
 8005294:	e015      	b.n	80052c2 <HAL_TIM_PWM_Start+0x6a>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b08      	cmp	r3, #8
 800529a:	d109      	bne.n	80052b0 <HAL_TIM_PWM_Start+0x58>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	bf14      	ite	ne
 80052a8:	2301      	movne	r3, #1
 80052aa:	2300      	moveq	r3, #0
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	e008      	b.n	80052c2 <HAL_TIM_PWM_Start+0x6a>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	bf14      	ite	ne
 80052bc:	2301      	movne	r3, #1
 80052be:	2300      	moveq	r3, #0
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e068      	b.n	800539c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d104      	bne.n	80052da <HAL_TIM_PWM_Start+0x82>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052d8:	e013      	b.n	8005302 <HAL_TIM_PWM_Start+0xaa>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b04      	cmp	r3, #4
 80052de:	d104      	bne.n	80052ea <HAL_TIM_PWM_Start+0x92>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052e8:	e00b      	b.n	8005302 <HAL_TIM_PWM_Start+0xaa>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b08      	cmp	r3, #8
 80052ee:	d104      	bne.n	80052fa <HAL_TIM_PWM_Start+0xa2>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052f8:	e003      	b.n	8005302 <HAL_TIM_PWM_Start+0xaa>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2202      	movs	r2, #2
 80052fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2201      	movs	r2, #1
 8005308:	6839      	ldr	r1, [r7, #0]
 800530a:	4618      	mov	r0, r3
 800530c:	f000 fb2e 	bl	800596c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a23      	ldr	r2, [pc, #140]	@ (80053a4 <HAL_TIM_PWM_Start+0x14c>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d107      	bne.n	800532a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005328:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a1d      	ldr	r2, [pc, #116]	@ (80053a4 <HAL_TIM_PWM_Start+0x14c>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d018      	beq.n	8005366 <HAL_TIM_PWM_Start+0x10e>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800533c:	d013      	beq.n	8005366 <HAL_TIM_PWM_Start+0x10e>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a19      	ldr	r2, [pc, #100]	@ (80053a8 <HAL_TIM_PWM_Start+0x150>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d00e      	beq.n	8005366 <HAL_TIM_PWM_Start+0x10e>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a17      	ldr	r2, [pc, #92]	@ (80053ac <HAL_TIM_PWM_Start+0x154>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d009      	beq.n	8005366 <HAL_TIM_PWM_Start+0x10e>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a16      	ldr	r2, [pc, #88]	@ (80053b0 <HAL_TIM_PWM_Start+0x158>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d004      	beq.n	8005366 <HAL_TIM_PWM_Start+0x10e>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a14      	ldr	r2, [pc, #80]	@ (80053b4 <HAL_TIM_PWM_Start+0x15c>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d111      	bne.n	800538a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f003 0307 	and.w	r3, r3, #7
 8005370:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2b06      	cmp	r3, #6
 8005376:	d010      	beq.n	800539a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f042 0201 	orr.w	r2, r2, #1
 8005386:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005388:	e007      	b.n	800539a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f042 0201 	orr.w	r2, r2, #1
 8005398:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	40010000 	.word	0x40010000
 80053a8:	40000400 	.word	0x40000400
 80053ac:	40000800 	.word	0x40000800
 80053b0:	40000c00 	.word	0x40000c00
 80053b4:	40014000 	.word	0x40014000

080053b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053c4:	2300      	movs	r3, #0
 80053c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d101      	bne.n	80053d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053d2:	2302      	movs	r3, #2
 80053d4:	e0ae      	b.n	8005534 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b0c      	cmp	r3, #12
 80053e2:	f200 809f 	bhi.w	8005524 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80053e6:	a201      	add	r2, pc, #4	@ (adr r2, 80053ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ec:	08005421 	.word	0x08005421
 80053f0:	08005525 	.word	0x08005525
 80053f4:	08005525 	.word	0x08005525
 80053f8:	08005525 	.word	0x08005525
 80053fc:	08005461 	.word	0x08005461
 8005400:	08005525 	.word	0x08005525
 8005404:	08005525 	.word	0x08005525
 8005408:	08005525 	.word	0x08005525
 800540c:	080054a3 	.word	0x080054a3
 8005410:	08005525 	.word	0x08005525
 8005414:	08005525 	.word	0x08005525
 8005418:	08005525 	.word	0x08005525
 800541c:	080054e3 	.word	0x080054e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68b9      	ldr	r1, [r7, #8]
 8005426:	4618      	mov	r0, r3
 8005428:	f000 f914 	bl	8005654 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	699a      	ldr	r2, [r3, #24]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f042 0208 	orr.w	r2, r2, #8
 800543a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	699a      	ldr	r2, [r3, #24]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f022 0204 	bic.w	r2, r2, #4
 800544a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6999      	ldr	r1, [r3, #24]
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	691a      	ldr	r2, [r3, #16]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	619a      	str	r2, [r3, #24]
      break;
 800545e:	e064      	b.n	800552a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68b9      	ldr	r1, [r7, #8]
 8005466:	4618      	mov	r0, r3
 8005468:	f000 f95a 	bl	8005720 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	699a      	ldr	r2, [r3, #24]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800547a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699a      	ldr	r2, [r3, #24]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800548a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6999      	ldr	r1, [r3, #24]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	021a      	lsls	r2, r3, #8
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	430a      	orrs	r2, r1
 800549e:	619a      	str	r2, [r3, #24]
      break;
 80054a0:	e043      	b.n	800552a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68b9      	ldr	r1, [r7, #8]
 80054a8:	4618      	mov	r0, r3
 80054aa:	f000 f9a5 	bl	80057f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	69da      	ldr	r2, [r3, #28]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f042 0208 	orr.w	r2, r2, #8
 80054bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	69da      	ldr	r2, [r3, #28]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 0204 	bic.w	r2, r2, #4
 80054cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	69d9      	ldr	r1, [r3, #28]
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	691a      	ldr	r2, [r3, #16]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	430a      	orrs	r2, r1
 80054de:	61da      	str	r2, [r3, #28]
      break;
 80054e0:	e023      	b.n	800552a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68b9      	ldr	r1, [r7, #8]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f000 f9ef 	bl	80058cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	69da      	ldr	r2, [r3, #28]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	69da      	ldr	r2, [r3, #28]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800550c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	69d9      	ldr	r1, [r3, #28]
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	021a      	lsls	r2, r3, #8
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	61da      	str	r2, [r3, #28]
      break;
 8005522:	e002      	b.n	800552a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	75fb      	strb	r3, [r7, #23]
      break;
 8005528:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005532:	7dfb      	ldrb	r3, [r7, #23]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3718      	adds	r7, #24
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a3a      	ldr	r2, [pc, #232]	@ (8005638 <TIM_Base_SetConfig+0xfc>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d00f      	beq.n	8005574 <TIM_Base_SetConfig+0x38>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800555a:	d00b      	beq.n	8005574 <TIM_Base_SetConfig+0x38>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a37      	ldr	r2, [pc, #220]	@ (800563c <TIM_Base_SetConfig+0x100>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d007      	beq.n	8005574 <TIM_Base_SetConfig+0x38>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a36      	ldr	r2, [pc, #216]	@ (8005640 <TIM_Base_SetConfig+0x104>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d003      	beq.n	8005574 <TIM_Base_SetConfig+0x38>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a35      	ldr	r2, [pc, #212]	@ (8005644 <TIM_Base_SetConfig+0x108>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d108      	bne.n	8005586 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800557a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	4313      	orrs	r3, r2
 8005584:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a2b      	ldr	r2, [pc, #172]	@ (8005638 <TIM_Base_SetConfig+0xfc>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d01b      	beq.n	80055c6 <TIM_Base_SetConfig+0x8a>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005594:	d017      	beq.n	80055c6 <TIM_Base_SetConfig+0x8a>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a28      	ldr	r2, [pc, #160]	@ (800563c <TIM_Base_SetConfig+0x100>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d013      	beq.n	80055c6 <TIM_Base_SetConfig+0x8a>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a27      	ldr	r2, [pc, #156]	@ (8005640 <TIM_Base_SetConfig+0x104>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d00f      	beq.n	80055c6 <TIM_Base_SetConfig+0x8a>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a26      	ldr	r2, [pc, #152]	@ (8005644 <TIM_Base_SetConfig+0x108>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00b      	beq.n	80055c6 <TIM_Base_SetConfig+0x8a>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a25      	ldr	r2, [pc, #148]	@ (8005648 <TIM_Base_SetConfig+0x10c>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d007      	beq.n	80055c6 <TIM_Base_SetConfig+0x8a>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a24      	ldr	r2, [pc, #144]	@ (800564c <TIM_Base_SetConfig+0x110>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d003      	beq.n	80055c6 <TIM_Base_SetConfig+0x8a>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a23      	ldr	r2, [pc, #140]	@ (8005650 <TIM_Base_SetConfig+0x114>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d108      	bne.n	80055d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a0e      	ldr	r2, [pc, #56]	@ (8005638 <TIM_Base_SetConfig+0xfc>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d103      	bne.n	800560c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	691a      	ldr	r2, [r3, #16]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	2b01      	cmp	r3, #1
 800561c:	d105      	bne.n	800562a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	f023 0201 	bic.w	r2, r3, #1
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	611a      	str	r2, [r3, #16]
  }
}
 800562a:	bf00      	nop
 800562c:	3714      	adds	r7, #20
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	40010000 	.word	0x40010000
 800563c:	40000400 	.word	0x40000400
 8005640:	40000800 	.word	0x40000800
 8005644:	40000c00 	.word	0x40000c00
 8005648:	40014000 	.word	0x40014000
 800564c:	40014400 	.word	0x40014400
 8005650:	40014800 	.word	0x40014800

08005654 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005654:	b480      	push	{r7}
 8005656:	b087      	sub	sp, #28
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	f023 0201 	bic.w	r2, r3, #1
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f023 0303 	bic.w	r3, r3, #3
 800568a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	4313      	orrs	r3, r2
 8005694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	f023 0302 	bic.w	r3, r3, #2
 800569c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a1c      	ldr	r2, [pc, #112]	@ (800571c <TIM_OC1_SetConfig+0xc8>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d10c      	bne.n	80056ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f023 0308 	bic.w	r3, r3, #8
 80056b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	4313      	orrs	r3, r2
 80056c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f023 0304 	bic.w	r3, r3, #4
 80056c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a13      	ldr	r2, [pc, #76]	@ (800571c <TIM_OC1_SetConfig+0xc8>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d111      	bne.n	80056f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80056e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	621a      	str	r2, [r3, #32]
}
 8005710:	bf00      	nop
 8005712:	371c      	adds	r7, #28
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr
 800571c:	40010000 	.word	0x40010000

08005720 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005720:	b480      	push	{r7}
 8005722:	b087      	sub	sp, #28
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a1b      	ldr	r3, [r3, #32]
 8005734:	f023 0210 	bic.w	r2, r3, #16
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800574e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005756:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	021b      	lsls	r3, r3, #8
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	4313      	orrs	r3, r2
 8005762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f023 0320 	bic.w	r3, r3, #32
 800576a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	011b      	lsls	r3, r3, #4
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	4313      	orrs	r3, r2
 8005776:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a1e      	ldr	r2, [pc, #120]	@ (80057f4 <TIM_OC2_SetConfig+0xd4>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d10d      	bne.n	800579c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	011b      	lsls	r3, r3, #4
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	4313      	orrs	r3, r2
 8005792:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800579a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a15      	ldr	r2, [pc, #84]	@ (80057f4 <TIM_OC2_SetConfig+0xd4>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d113      	bne.n	80057cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80057aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80057b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	4313      	orrs	r3, r2
 80057be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	699b      	ldr	r3, [r3, #24]
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	621a      	str	r2, [r3, #32]
}
 80057e6:	bf00      	nop
 80057e8:	371c      	adds	r7, #28
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	40010000 	.word	0x40010000

080057f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b087      	sub	sp, #28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f023 0303 	bic.w	r3, r3, #3
 800582e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	4313      	orrs	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005840:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	021b      	lsls	r3, r3, #8
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	4313      	orrs	r3, r2
 800584c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a1d      	ldr	r2, [pc, #116]	@ (80058c8 <TIM_OC3_SetConfig+0xd0>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d10d      	bne.n	8005872 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800585c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	021b      	lsls	r3, r3, #8
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	4313      	orrs	r3, r2
 8005868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a14      	ldr	r2, [pc, #80]	@ (80058c8 <TIM_OC3_SetConfig+0xd0>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d113      	bne.n	80058a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	011b      	lsls	r3, r3, #4
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	4313      	orrs	r3, r2
 8005894:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	011b      	lsls	r3, r3, #4
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	4313      	orrs	r3, r2
 80058a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	621a      	str	r2, [r3, #32]
}
 80058bc:	bf00      	nop
 80058be:	371c      	adds	r7, #28
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr
 80058c8:	40010000 	.word	0x40010000

080058cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b087      	sub	sp, #28
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a1b      	ldr	r3, [r3, #32]
 80058da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a1b      	ldr	r3, [r3, #32]
 80058e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005902:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	021b      	lsls	r3, r3, #8
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	4313      	orrs	r3, r2
 800590e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005916:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	031b      	lsls	r3, r3, #12
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	4313      	orrs	r3, r2
 8005922:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a10      	ldr	r2, [pc, #64]	@ (8005968 <TIM_OC4_SetConfig+0x9c>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d109      	bne.n	8005940 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005932:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	019b      	lsls	r3, r3, #6
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	4313      	orrs	r3, r2
 800593e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	685a      	ldr	r2, [r3, #4]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	621a      	str	r2, [r3, #32]
}
 800595a:	bf00      	nop
 800595c:	371c      	adds	r7, #28
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	40010000 	.word	0x40010000

0800596c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800596c:	b480      	push	{r7}
 800596e:	b087      	sub	sp, #28
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	f003 031f 	and.w	r3, r3, #31
 800597e:	2201      	movs	r2, #1
 8005980:	fa02 f303 	lsl.w	r3, r2, r3
 8005984:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6a1a      	ldr	r2, [r3, #32]
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	43db      	mvns	r3, r3
 800598e:	401a      	ands	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6a1a      	ldr	r2, [r3, #32]
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	f003 031f 	and.w	r3, r3, #31
 800599e:	6879      	ldr	r1, [r7, #4]
 80059a0:	fa01 f303 	lsl.w	r3, r1, r3
 80059a4:	431a      	orrs	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	621a      	str	r2, [r3, #32]
}
 80059aa:	bf00      	nop
 80059ac:	371c      	adds	r7, #28
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
	...

080059b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d101      	bne.n	80059d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059cc:	2302      	movs	r3, #2
 80059ce:	e050      	b.n	8005a72 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2202      	movs	r2, #2
 80059dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a1c      	ldr	r2, [pc, #112]	@ (8005a80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d018      	beq.n	8005a46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a1c:	d013      	beq.n	8005a46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a18      	ldr	r2, [pc, #96]	@ (8005a84 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d00e      	beq.n	8005a46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a16      	ldr	r2, [pc, #88]	@ (8005a88 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d009      	beq.n	8005a46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a15      	ldr	r2, [pc, #84]	@ (8005a8c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d004      	beq.n	8005a46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a13      	ldr	r2, [pc, #76]	@ (8005a90 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d10c      	bne.n	8005a60 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	40010000 	.word	0x40010000
 8005a84:	40000400 	.word	0x40000400
 8005a88:	40000800 	.word	0x40000800
 8005a8c:	40000c00 	.word	0x40000c00
 8005a90:	40014000 	.word	0x40014000

08005a94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d101      	bne.n	8005ab0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005aac:	2302      	movs	r3, #2
 8005aae:	e03d      	b.n	8005b2c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3714      	adds	r7, #20
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e042      	b.n	8005bd0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d106      	bne.n	8005b64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f7fc fce2 	bl	8002528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2224      	movs	r2, #36	@ 0x24
 8005b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68da      	ldr	r2, [r3, #12]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 ff85 	bl	8006a8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	691a      	ldr	r2, [r3, #16]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	695a      	ldr	r2, [r3, #20]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ba0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68da      	ldr	r2, [r3, #12]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005bb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2220      	movs	r2, #32
 8005bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b08a      	sub	sp, #40	@ 0x28
 8005bdc:	af02      	add	r7, sp, #8
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	603b      	str	r3, [r7, #0]
 8005be4:	4613      	mov	r3, r2
 8005be6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005be8:	2300      	movs	r3, #0
 8005bea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2b20      	cmp	r3, #32
 8005bf6:	d175      	bne.n	8005ce4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d002      	beq.n	8005c04 <HAL_UART_Transmit+0x2c>
 8005bfe:	88fb      	ldrh	r3, [r7, #6]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d101      	bne.n	8005c08 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e06e      	b.n	8005ce6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2221      	movs	r2, #33	@ 0x21
 8005c12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c16:	f7fc fec9 	bl	80029ac <HAL_GetTick>
 8005c1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	88fa      	ldrh	r2, [r7, #6]
 8005c20:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	88fa      	ldrh	r2, [r7, #6]
 8005c26:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c30:	d108      	bne.n	8005c44 <HAL_UART_Transmit+0x6c>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d104      	bne.n	8005c44 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	61bb      	str	r3, [r7, #24]
 8005c42:	e003      	b.n	8005c4c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c4c:	e02e      	b.n	8005cac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	2200      	movs	r2, #0
 8005c56:	2180      	movs	r1, #128	@ 0x80
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f000 fc5d 	bl	8006518 <UART_WaitOnFlagUntilTimeout>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d005      	beq.n	8005c70 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2220      	movs	r2, #32
 8005c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e03a      	b.n	8005ce6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10b      	bne.n	8005c8e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	881b      	ldrh	r3, [r3, #0]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	3302      	adds	r3, #2
 8005c8a:	61bb      	str	r3, [r7, #24]
 8005c8c:	e007      	b.n	8005c9e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	781a      	ldrb	r2, [r3, #0]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1cb      	bne.n	8005c4e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	2140      	movs	r1, #64	@ 0x40
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f000 fc29 	bl	8006518 <UART_WaitOnFlagUntilTimeout>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d005      	beq.n	8005cd8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	e006      	b.n	8005ce6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2220      	movs	r2, #32
 8005cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	e000      	b.n	8005ce6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005ce4:	2302      	movs	r3, #2
  }
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3720      	adds	r7, #32
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b08c      	sub	sp, #48	@ 0x30
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	60f8      	str	r0, [r7, #12]
 8005cf6:	60b9      	str	r1, [r7, #8]
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2b20      	cmp	r3, #32
 8005d06:	d14a      	bne.n	8005d9e <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d002      	beq.n	8005d14 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005d0e:	88fb      	ldrh	r3, [r7, #6]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d101      	bne.n	8005d18 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e043      	b.n	8005da0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005d24:	88fb      	ldrh	r3, [r7, #6]
 8005d26:	461a      	mov	r2, r3
 8005d28:	68b9      	ldr	r1, [r7, #8]
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 fc4e 	bl	80065cc <UART_Start_Receive_DMA>
 8005d30:	4603      	mov	r3, r0
 8005d32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005d36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d12c      	bne.n	8005d98 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d125      	bne.n	8005d92 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d46:	2300      	movs	r3, #0
 8005d48:	613b      	str	r3, [r7, #16]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	613b      	str	r3, [r7, #16]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	613b      	str	r3, [r7, #16]
 8005d5a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	330c      	adds	r3, #12
 8005d62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	e853 3f00 	ldrex	r3, [r3]
 8005d6a:	617b      	str	r3, [r7, #20]
   return(result);
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	f043 0310 	orr.w	r3, r3, #16
 8005d72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	330c      	adds	r3, #12
 8005d7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d7c:	627a      	str	r2, [r7, #36]	@ 0x24
 8005d7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d80:	6a39      	ldr	r1, [r7, #32]
 8005d82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d84:	e841 2300 	strex	r3, r2, [r1]
 8005d88:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1e5      	bne.n	8005d5c <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8005d90:	e002      	b.n	8005d98 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8005d98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005d9c:	e000      	b.n	8005da0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005d9e:	2302      	movs	r3, #2
  }
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3730      	adds	r7, #48	@ 0x30
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b0ba      	sub	sp, #232	@ 0xe8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dde:	f003 030f 	and.w	r3, r3, #15
 8005de2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005de6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10f      	bne.n	8005e0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005df2:	f003 0320 	and.w	r3, r3, #32
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d009      	beq.n	8005e0e <HAL_UART_IRQHandler+0x66>
 8005dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dfe:	f003 0320 	and.w	r3, r3, #32
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d003      	beq.n	8005e0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fd81 	bl	800690e <UART_Receive_IT>
      return;
 8005e0c:	e25b      	b.n	80062c6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f000 80de 	beq.w	8005fd4 <HAL_UART_IRQHandler+0x22c>
 8005e18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d106      	bne.n	8005e32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e28:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 80d1 	beq.w	8005fd4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00b      	beq.n	8005e56 <HAL_UART_IRQHandler+0xae>
 8005e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d005      	beq.n	8005e56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e4e:	f043 0201 	orr.w	r2, r3, #1
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e5a:	f003 0304 	and.w	r3, r3, #4
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00b      	beq.n	8005e7a <HAL_UART_IRQHandler+0xd2>
 8005e62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d005      	beq.n	8005e7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e72:	f043 0202 	orr.w	r2, r3, #2
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e7e:	f003 0302 	and.w	r3, r3, #2
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00b      	beq.n	8005e9e <HAL_UART_IRQHandler+0xf6>
 8005e86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d005      	beq.n	8005e9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e96:	f043 0204 	orr.w	r2, r3, #4
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ea2:	f003 0308 	and.w	r3, r3, #8
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d011      	beq.n	8005ece <HAL_UART_IRQHandler+0x126>
 8005eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005eae:	f003 0320 	and.w	r3, r3, #32
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d105      	bne.n	8005ec2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d005      	beq.n	8005ece <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ec6:	f043 0208 	orr.w	r2, r3, #8
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f000 81f2 	beq.w	80062bc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005edc:	f003 0320 	and.w	r3, r3, #32
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d008      	beq.n	8005ef6 <HAL_UART_IRQHandler+0x14e>
 8005ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ee8:	f003 0320 	and.w	r3, r3, #32
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d002      	beq.n	8005ef6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 fd0c 	bl	800690e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	695b      	ldr	r3, [r3, #20]
 8005efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f00:	2b40      	cmp	r3, #64	@ 0x40
 8005f02:	bf0c      	ite	eq
 8005f04:	2301      	moveq	r3, #1
 8005f06:	2300      	movne	r3, #0
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f12:	f003 0308 	and.w	r3, r3, #8
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d103      	bne.n	8005f22 <HAL_UART_IRQHandler+0x17a>
 8005f1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d04f      	beq.n	8005fc2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 fc14 	bl	8006750 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f32:	2b40      	cmp	r3, #64	@ 0x40
 8005f34:	d141      	bne.n	8005fba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	3314      	adds	r3, #20
 8005f3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f44:	e853 3f00 	ldrex	r3, [r3]
 8005f48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005f4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	3314      	adds	r3, #20
 8005f5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005f62:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005f66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005f6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005f72:	e841 2300 	strex	r3, r2, [r1]
 8005f76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005f7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1d9      	bne.n	8005f36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d013      	beq.n	8005fb2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f8e:	4a7e      	ldr	r2, [pc, #504]	@ (8006188 <HAL_UART_IRQHandler+0x3e0>)
 8005f90:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7fd fda4 	bl	8003ae4 <HAL_DMA_Abort_IT>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d016      	beq.n	8005fd0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005fac:	4610      	mov	r0, r2
 8005fae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fb0:	e00e      	b.n	8005fd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f9a8 	bl	8006308 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fb8:	e00a      	b.n	8005fd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f9a4 	bl	8006308 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc0:	e006      	b.n	8005fd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f9a0 	bl	8006308 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005fce:	e175      	b.n	80062bc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd0:	bf00      	nop
    return;
 8005fd2:	e173      	b.n	80062bc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	f040 814f 	bne.w	800627c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fe2:	f003 0310 	and.w	r3, r3, #16
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f000 8148 	beq.w	800627c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ff0:	f003 0310 	and.w	r3, r3, #16
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 8141 	beq.w	800627c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	60bb      	str	r3, [r7, #8]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	60bb      	str	r3, [r7, #8]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	60bb      	str	r3, [r7, #8]
 800600e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800601a:	2b40      	cmp	r3, #64	@ 0x40
 800601c:	f040 80b6 	bne.w	800618c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800602c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006030:	2b00      	cmp	r3, #0
 8006032:	f000 8145 	beq.w	80062c0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800603a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800603e:	429a      	cmp	r2, r3
 8006040:	f080 813e 	bcs.w	80062c0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800604a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006056:	f000 8088 	beq.w	800616a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	330c      	adds	r3, #12
 8006060:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006064:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006068:	e853 3f00 	ldrex	r3, [r3]
 800606c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006070:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006074:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006078:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	330c      	adds	r3, #12
 8006082:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006086:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800608a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006092:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006096:	e841 2300 	strex	r3, r2, [r1]
 800609a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800609e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1d9      	bne.n	800605a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	3314      	adds	r3, #20
 80060ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80060b0:	e853 3f00 	ldrex	r3, [r3]
 80060b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80060b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80060b8:	f023 0301 	bic.w	r3, r3, #1
 80060bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	3314      	adds	r3, #20
 80060c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80060ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80060ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80060d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80060d6:	e841 2300 	strex	r3, r2, [r1]
 80060da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80060dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1e1      	bne.n	80060a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	3314      	adds	r3, #20
 80060e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80060ec:	e853 3f00 	ldrex	r3, [r3]
 80060f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80060f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80060f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	3314      	adds	r3, #20
 8006102:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006106:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006108:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800610c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800610e:	e841 2300 	strex	r3, r2, [r1]
 8006112:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006114:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1e3      	bne.n	80060e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2220      	movs	r2, #32
 800611e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	330c      	adds	r3, #12
 800612e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006130:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006132:	e853 3f00 	ldrex	r3, [r3]
 8006136:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006138:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800613a:	f023 0310 	bic.w	r3, r3, #16
 800613e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	330c      	adds	r3, #12
 8006148:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800614c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800614e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006150:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006152:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006154:	e841 2300 	strex	r3, r2, [r1]
 8006158:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800615a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1e3      	bne.n	8006128 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006164:	4618      	mov	r0, r3
 8006166:	f7fd fc4d 	bl	8003a04 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2202      	movs	r2, #2
 800616e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006178:	b29b      	uxth	r3, r3
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	b29b      	uxth	r3, r3
 800617e:	4619      	mov	r1, r3
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f7fb fa71 	bl	8001668 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006186:	e09b      	b.n	80062c0 <HAL_UART_IRQHandler+0x518>
 8006188:	08006817 	.word	0x08006817
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006194:	b29b      	uxth	r3, r3
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f000 808e 	beq.w	80062c4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80061a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f000 8089 	beq.w	80062c4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	330c      	adds	r3, #12
 80061b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061bc:	e853 3f00 	ldrex	r3, [r3]
 80061c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80061c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	330c      	adds	r3, #12
 80061d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80061d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80061d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80061dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061de:	e841 2300 	strex	r3, r2, [r1]
 80061e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80061e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1e3      	bne.n	80061b2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	3314      	adds	r3, #20
 80061f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f4:	e853 3f00 	ldrex	r3, [r3]
 80061f8:	623b      	str	r3, [r7, #32]
   return(result);
 80061fa:	6a3b      	ldr	r3, [r7, #32]
 80061fc:	f023 0301 	bic.w	r3, r3, #1
 8006200:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	3314      	adds	r3, #20
 800620a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800620e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006210:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006212:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006214:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006216:	e841 2300 	strex	r3, r2, [r1]
 800621a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800621c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1e3      	bne.n	80061ea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2220      	movs	r2, #32
 8006226:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	330c      	adds	r3, #12
 8006236:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	e853 3f00 	ldrex	r3, [r3]
 800623e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f023 0310 	bic.w	r3, r3, #16
 8006246:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	330c      	adds	r3, #12
 8006250:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006254:	61fa      	str	r2, [r7, #28]
 8006256:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006258:	69b9      	ldr	r1, [r7, #24]
 800625a:	69fa      	ldr	r2, [r7, #28]
 800625c:	e841 2300 	strex	r3, r2, [r1]
 8006260:	617b      	str	r3, [r7, #20]
   return(result);
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1e3      	bne.n	8006230 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2202      	movs	r2, #2
 800626c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800626e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006272:	4619      	mov	r1, r3
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f7fb f9f7 	bl	8001668 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800627a:	e023      	b.n	80062c4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800627c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006284:	2b00      	cmp	r3, #0
 8006286:	d009      	beq.n	800629c <HAL_UART_IRQHandler+0x4f4>
 8006288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800628c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006290:	2b00      	cmp	r3, #0
 8006292:	d003      	beq.n	800629c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 fad2 	bl	800683e <UART_Transmit_IT>
    return;
 800629a:	e014      	b.n	80062c6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800629c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00e      	beq.n	80062c6 <HAL_UART_IRQHandler+0x51e>
 80062a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d008      	beq.n	80062c6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 fb12 	bl	80068de <UART_EndTransmit_IT>
    return;
 80062ba:	e004      	b.n	80062c6 <HAL_UART_IRQHandler+0x51e>
    return;
 80062bc:	bf00      	nop
 80062be:	e002      	b.n	80062c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80062c0:	bf00      	nop
 80062c2:	e000      	b.n	80062c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80062c4:	bf00      	nop
  }
}
 80062c6:	37e8      	adds	r7, #232	@ 0xe8
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b09c      	sub	sp, #112	@ 0x70
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006328:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006334:	2b00      	cmp	r3, #0
 8006336:	d172      	bne.n	800641e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006338:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800633a:	2200      	movs	r2, #0
 800633c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800633e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	330c      	adds	r3, #12
 8006344:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006346:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006348:	e853 3f00 	ldrex	r3, [r3]
 800634c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800634e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006350:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006354:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006356:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	330c      	adds	r3, #12
 800635c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800635e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006360:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006362:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006364:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006366:	e841 2300 	strex	r3, r2, [r1]
 800636a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800636c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1e5      	bne.n	800633e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006372:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	3314      	adds	r3, #20
 8006378:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800637c:	e853 3f00 	ldrex	r3, [r3]
 8006380:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006384:	f023 0301 	bic.w	r3, r3, #1
 8006388:	667b      	str	r3, [r7, #100]	@ 0x64
 800638a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	3314      	adds	r3, #20
 8006390:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006392:	647a      	str	r2, [r7, #68]	@ 0x44
 8006394:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006396:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006398:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800639a:	e841 2300 	strex	r3, r2, [r1]
 800639e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80063a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1e5      	bne.n	8006372 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	3314      	adds	r3, #20
 80063ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b0:	e853 3f00 	ldrex	r3, [r3]
 80063b4:	623b      	str	r3, [r7, #32]
   return(result);
 80063b6:	6a3b      	ldr	r3, [r7, #32]
 80063b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80063be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	3314      	adds	r3, #20
 80063c4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80063c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80063c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063ce:	e841 2300 	strex	r3, r2, [r1]
 80063d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80063d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1e5      	bne.n	80063a6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80063da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063dc:	2220      	movs	r2, #32
 80063de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d119      	bne.n	800641e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	330c      	adds	r3, #12
 80063f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	e853 3f00 	ldrex	r3, [r3]
 80063f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f023 0310 	bic.w	r3, r3, #16
 8006400:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006402:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	330c      	adds	r3, #12
 8006408:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800640a:	61fa      	str	r2, [r7, #28]
 800640c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640e:	69b9      	ldr	r1, [r7, #24]
 8006410:	69fa      	ldr	r2, [r7, #28]
 8006412:	e841 2300 	strex	r3, r2, [r1]
 8006416:	617b      	str	r3, [r7, #20]
   return(result);
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1e5      	bne.n	80063ea <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800641e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006420:	2200      	movs	r2, #0
 8006422:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006424:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006428:	2b01      	cmp	r3, #1
 800642a:	d106      	bne.n	800643a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800642c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800642e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006430:	4619      	mov	r1, r3
 8006432:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006434:	f7fb f918 	bl	8001668 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006438:	e002      	b.n	8006440 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800643a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800643c:	f7ff ff50 	bl	80062e0 <HAL_UART_RxCpltCallback>
}
 8006440:	bf00      	nop
 8006442:	3770      	adds	r7, #112	@ 0x70
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006454:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2201      	movs	r2, #1
 800645a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006460:	2b01      	cmp	r3, #1
 8006462:	d108      	bne.n	8006476 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006468:	085b      	lsrs	r3, r3, #1
 800646a:	b29b      	uxth	r3, r3
 800646c:	4619      	mov	r1, r3
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f7fb f8fa 	bl	8001668 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006474:	e002      	b.n	800647c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f7ff ff3c 	bl	80062f4 <HAL_UART_RxHalfCpltCallback>
}
 800647c:	bf00      	nop
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800648c:	2300      	movs	r3, #0
 800648e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006494:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	695b      	ldr	r3, [r3, #20]
 800649c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064a0:	2b80      	cmp	r3, #128	@ 0x80
 80064a2:	bf0c      	ite	eq
 80064a4:	2301      	moveq	r3, #1
 80064a6:	2300      	movne	r3, #0
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	2b21      	cmp	r3, #33	@ 0x21
 80064b6:	d108      	bne.n	80064ca <UART_DMAError+0x46>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d005      	beq.n	80064ca <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	2200      	movs	r2, #0
 80064c2:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80064c4:	68b8      	ldr	r0, [r7, #8]
 80064c6:	f000 f91b 	bl	8006700 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	695b      	ldr	r3, [r3, #20]
 80064d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064d4:	2b40      	cmp	r3, #64	@ 0x40
 80064d6:	bf0c      	ite	eq
 80064d8:	2301      	moveq	r3, #1
 80064da:	2300      	movne	r3, #0
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	2b22      	cmp	r3, #34	@ 0x22
 80064ea:	d108      	bne.n	80064fe <UART_DMAError+0x7a>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d005      	beq.n	80064fe <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	2200      	movs	r2, #0
 80064f6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80064f8:	68b8      	ldr	r0, [r7, #8]
 80064fa:	f000 f929 	bl	8006750 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006502:	f043 0210 	orr.w	r2, r3, #16
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800650a:	68b8      	ldr	r0, [r7, #8]
 800650c:	f7ff fefc 	bl	8006308 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006510:	bf00      	nop
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	603b      	str	r3, [r7, #0]
 8006524:	4613      	mov	r3, r2
 8006526:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006528:	e03b      	b.n	80065a2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800652a:	6a3b      	ldr	r3, [r7, #32]
 800652c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006530:	d037      	beq.n	80065a2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006532:	f7fc fa3b 	bl	80029ac <HAL_GetTick>
 8006536:	4602      	mov	r2, r0
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	6a3a      	ldr	r2, [r7, #32]
 800653e:	429a      	cmp	r2, r3
 8006540:	d302      	bcc.n	8006548 <UART_WaitOnFlagUntilTimeout+0x30>
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d101      	bne.n	800654c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e03a      	b.n	80065c2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	f003 0304 	and.w	r3, r3, #4
 8006556:	2b00      	cmp	r3, #0
 8006558:	d023      	beq.n	80065a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	2b80      	cmp	r3, #128	@ 0x80
 800655e:	d020      	beq.n	80065a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	2b40      	cmp	r3, #64	@ 0x40
 8006564:	d01d      	beq.n	80065a2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0308 	and.w	r3, r3, #8
 8006570:	2b08      	cmp	r3, #8
 8006572:	d116      	bne.n	80065a2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006574:	2300      	movs	r3, #0
 8006576:	617b      	str	r3, [r7, #20]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	617b      	str	r3, [r7, #20]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	617b      	str	r3, [r7, #20]
 8006588:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f000 f8e0 	bl	8006750 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2208      	movs	r2, #8
 8006594:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e00f      	b.n	80065c2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	4013      	ands	r3, r2
 80065ac:	68ba      	ldr	r2, [r7, #8]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	bf0c      	ite	eq
 80065b2:	2301      	moveq	r3, #1
 80065b4:	2300      	movne	r3, #0
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	461a      	mov	r2, r3
 80065ba:	79fb      	ldrb	r3, [r7, #7]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d0b4      	beq.n	800652a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3718      	adds	r7, #24
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
	...

080065cc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b098      	sub	sp, #96	@ 0x60
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	4613      	mov	r3, r2
 80065d8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80065da:	68ba      	ldr	r2, [r7, #8]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	88fa      	ldrh	r2, [r7, #6]
 80065e4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2222      	movs	r2, #34	@ 0x22
 80065f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065f8:	4a3e      	ldr	r2, [pc, #248]	@ (80066f4 <UART_Start_Receive_DMA+0x128>)
 80065fa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006600:	4a3d      	ldr	r2, [pc, #244]	@ (80066f8 <UART_Start_Receive_DMA+0x12c>)
 8006602:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006608:	4a3c      	ldr	r2, [pc, #240]	@ (80066fc <UART_Start_Receive_DMA+0x130>)
 800660a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006610:	2200      	movs	r2, #0
 8006612:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006614:	f107 0308 	add.w	r3, r7, #8
 8006618:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	3304      	adds	r3, #4
 8006624:	4619      	mov	r1, r3
 8006626:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	88fb      	ldrh	r3, [r7, #6]
 800662c:	f7fd f992 	bl	8003954 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006630:	2300      	movs	r3, #0
 8006632:	613b      	str	r3, [r7, #16]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	613b      	str	r3, [r7, #16]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	613b      	str	r3, [r7, #16]
 8006644:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d019      	beq.n	8006682 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	330c      	adds	r3, #12
 8006654:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006656:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006658:	e853 3f00 	ldrex	r3, [r3]
 800665c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800665e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006660:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006664:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	330c      	adds	r3, #12
 800666c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800666e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006670:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006672:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006674:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006676:	e841 2300 	strex	r3, r2, [r1]
 800667a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800667c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1e5      	bne.n	800664e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	3314      	adds	r3, #20
 8006688:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800668c:	e853 3f00 	ldrex	r3, [r3]
 8006690:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006694:	f043 0301 	orr.w	r3, r3, #1
 8006698:	657b      	str	r3, [r7, #84]	@ 0x54
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	3314      	adds	r3, #20
 80066a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80066a2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80066a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80066a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80066aa:	e841 2300 	strex	r3, r2, [r1]
 80066ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80066b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1e5      	bne.n	8006682 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	3314      	adds	r3, #20
 80066bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	e853 3f00 	ldrex	r3, [r3]
 80066c4:	617b      	str	r3, [r7, #20]
   return(result);
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	3314      	adds	r3, #20
 80066d4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80066d6:	627a      	str	r2, [r7, #36]	@ 0x24
 80066d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066da:	6a39      	ldr	r1, [r7, #32]
 80066dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066de:	e841 2300 	strex	r3, r2, [r1]
 80066e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1e5      	bne.n	80066b6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3760      	adds	r7, #96	@ 0x60
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	0800631d 	.word	0x0800631d
 80066f8:	08006449 	.word	0x08006449
 80066fc:	08006485 	.word	0x08006485

08006700 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006700:	b480      	push	{r7}
 8006702:	b089      	sub	sp, #36	@ 0x24
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	330c      	adds	r3, #12
 800670e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	e853 3f00 	ldrex	r3, [r3]
 8006716:	60bb      	str	r3, [r7, #8]
   return(result);
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800671e:	61fb      	str	r3, [r7, #28]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	330c      	adds	r3, #12
 8006726:	69fa      	ldr	r2, [r7, #28]
 8006728:	61ba      	str	r2, [r7, #24]
 800672a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672c:	6979      	ldr	r1, [r7, #20]
 800672e:	69ba      	ldr	r2, [r7, #24]
 8006730:	e841 2300 	strex	r3, r2, [r1]
 8006734:	613b      	str	r3, [r7, #16]
   return(result);
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1e5      	bne.n	8006708 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2220      	movs	r2, #32
 8006740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006744:	bf00      	nop
 8006746:	3724      	adds	r7, #36	@ 0x24
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006750:	b480      	push	{r7}
 8006752:	b095      	sub	sp, #84	@ 0x54
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	330c      	adds	r3, #12
 800675e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006762:	e853 3f00 	ldrex	r3, [r3]
 8006766:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800676a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800676e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	330c      	adds	r3, #12
 8006776:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006778:	643a      	str	r2, [r7, #64]	@ 0x40
 800677a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800677e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006780:	e841 2300 	strex	r3, r2, [r1]
 8006784:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006788:	2b00      	cmp	r3, #0
 800678a:	d1e5      	bne.n	8006758 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	3314      	adds	r3, #20
 8006792:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006794:	6a3b      	ldr	r3, [r7, #32]
 8006796:	e853 3f00 	ldrex	r3, [r3]
 800679a:	61fb      	str	r3, [r7, #28]
   return(result);
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	f023 0301 	bic.w	r3, r3, #1
 80067a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	3314      	adds	r3, #20
 80067aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067b4:	e841 2300 	strex	r3, r2, [r1]
 80067b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80067ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1e5      	bne.n	800678c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d119      	bne.n	80067fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	330c      	adds	r3, #12
 80067ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	e853 3f00 	ldrex	r3, [r3]
 80067d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	f023 0310 	bic.w	r3, r3, #16
 80067de:	647b      	str	r3, [r7, #68]	@ 0x44
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	330c      	adds	r3, #12
 80067e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067e8:	61ba      	str	r2, [r7, #24]
 80067ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ec:	6979      	ldr	r1, [r7, #20]
 80067ee:	69ba      	ldr	r2, [r7, #24]
 80067f0:	e841 2300 	strex	r3, r2, [r1]
 80067f4:	613b      	str	r3, [r7, #16]
   return(result);
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1e5      	bne.n	80067c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2220      	movs	r2, #32
 8006800:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800680a:	bf00      	nop
 800680c:	3754      	adds	r7, #84	@ 0x54
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr

08006816 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b084      	sub	sp, #16
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006822:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	f7ff fd69 	bl	8006308 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006836:	bf00      	nop
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800683e:	b480      	push	{r7}
 8006840:	b085      	sub	sp, #20
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800684c:	b2db      	uxtb	r3, r3
 800684e:	2b21      	cmp	r3, #33	@ 0x21
 8006850:	d13e      	bne.n	80068d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800685a:	d114      	bne.n	8006886 <UART_Transmit_IT+0x48>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d110      	bne.n	8006886 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a1b      	ldr	r3, [r3, #32]
 8006868:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	881b      	ldrh	r3, [r3, #0]
 800686e:	461a      	mov	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006878:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	1c9a      	adds	r2, r3, #2
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	621a      	str	r2, [r3, #32]
 8006884:	e008      	b.n	8006898 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a1b      	ldr	r3, [r3, #32]
 800688a:	1c59      	adds	r1, r3, #1
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	6211      	str	r1, [r2, #32]
 8006890:	781a      	ldrb	r2, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800689c:	b29b      	uxth	r3, r3
 800689e:	3b01      	subs	r3, #1
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	4619      	mov	r1, r3
 80068a6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10f      	bne.n	80068cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68da      	ldr	r2, [r3, #12]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80068ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68da      	ldr	r2, [r3, #12]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80068ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80068cc:	2300      	movs	r3, #0
 80068ce:	e000      	b.n	80068d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80068d0:	2302      	movs	r3, #2
  }
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3714      	adds	r7, #20
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr

080068de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b082      	sub	sp, #8
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68da      	ldr	r2, [r3, #12]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2220      	movs	r2, #32
 80068fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7ff fce4 	bl	80062cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b08c      	sub	sp, #48	@ 0x30
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b22      	cmp	r3, #34	@ 0x22
 8006920:	f040 80ae 	bne.w	8006a80 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800692c:	d117      	bne.n	800695e <UART_Receive_IT+0x50>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d113      	bne.n	800695e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006936:	2300      	movs	r3, #0
 8006938:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800693e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	b29b      	uxth	r3, r3
 8006948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800694c:	b29a      	uxth	r2, r3
 800694e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006950:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006956:	1c9a      	adds	r2, r3, #2
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	629a      	str	r2, [r3, #40]	@ 0x28
 800695c:	e026      	b.n	80069ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006962:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006964:	2300      	movs	r3, #0
 8006966:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006970:	d007      	beq.n	8006982 <UART_Receive_IT+0x74>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10a      	bne.n	8006990 <UART_Receive_IT+0x82>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d106      	bne.n	8006990 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	b2da      	uxtb	r2, r3
 800698a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800698c:	701a      	strb	r2, [r3, #0]
 800698e:	e008      	b.n	80069a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	b2db      	uxtb	r3, r3
 8006998:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800699c:	b2da      	uxtb	r2, r3
 800699e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069a6:	1c5a      	adds	r2, r3, #1
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	3b01      	subs	r3, #1
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	4619      	mov	r1, r3
 80069ba:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d15d      	bne.n	8006a7c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68da      	ldr	r2, [r3, #12]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f022 0220 	bic.w	r2, r2, #32
 80069ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68da      	ldr	r2, [r3, #12]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80069de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	695a      	ldr	r2, [r3, #20]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f022 0201 	bic.w	r2, r2, #1
 80069ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2220      	movs	r2, #32
 80069f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d135      	bne.n	8006a72 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	330c      	adds	r3, #12
 8006a12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	e853 3f00 	ldrex	r3, [r3]
 8006a1a:	613b      	str	r3, [r7, #16]
   return(result);
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	f023 0310 	bic.w	r3, r3, #16
 8006a22:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	330c      	adds	r3, #12
 8006a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a2c:	623a      	str	r2, [r7, #32]
 8006a2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a30:	69f9      	ldr	r1, [r7, #28]
 8006a32:	6a3a      	ldr	r2, [r7, #32]
 8006a34:	e841 2300 	strex	r3, r2, [r1]
 8006a38:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1e5      	bne.n	8006a0c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 0310 	and.w	r3, r3, #16
 8006a4a:	2b10      	cmp	r3, #16
 8006a4c:	d10a      	bne.n	8006a64 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a4e:	2300      	movs	r3, #0
 8006a50:	60fb      	str	r3, [r7, #12]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	60fb      	str	r3, [r7, #12]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	60fb      	str	r3, [r7, #12]
 8006a62:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006a68:	4619      	mov	r1, r3
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7fa fdfc 	bl	8001668 <HAL_UARTEx_RxEventCallback>
 8006a70:	e002      	b.n	8006a78 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f7ff fc34 	bl	80062e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	e002      	b.n	8006a82 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	e000      	b.n	8006a82 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006a80:	2302      	movs	r3, #2
  }
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3730      	adds	r7, #48	@ 0x30
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
	...

08006a8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a90:	b0c0      	sub	sp, #256	@ 0x100
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aa8:	68d9      	ldr	r1, [r3, #12]
 8006aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	ea40 0301 	orr.w	r3, r0, r1
 8006ab4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aba:	689a      	ldr	r2, [r3, #8]
 8006abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	431a      	orrs	r2, r3
 8006ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	431a      	orrs	r2, r3
 8006acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ad0:	69db      	ldr	r3, [r3, #28]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006ae4:	f021 010c 	bic.w	r1, r1, #12
 8006ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006af2:	430b      	orrs	r3, r1
 8006af4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b06:	6999      	ldr	r1, [r3, #24]
 8006b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	ea40 0301 	orr.w	r3, r0, r1
 8006b12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	4b8f      	ldr	r3, [pc, #572]	@ (8006d58 <UART_SetConfig+0x2cc>)
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d005      	beq.n	8006b2c <UART_SetConfig+0xa0>
 8006b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	4b8d      	ldr	r3, [pc, #564]	@ (8006d5c <UART_SetConfig+0x2d0>)
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d104      	bne.n	8006b36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b2c:	f7fe fb30 	bl	8005190 <HAL_RCC_GetPCLK2Freq>
 8006b30:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006b34:	e003      	b.n	8006b3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b36:	f7fe fb17 	bl	8005168 <HAL_RCC_GetPCLK1Freq>
 8006b3a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b42:	69db      	ldr	r3, [r3, #28]
 8006b44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b48:	f040 810c 	bne.w	8006d64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b50:	2200      	movs	r2, #0
 8006b52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006b56:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006b5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006b5e:	4622      	mov	r2, r4
 8006b60:	462b      	mov	r3, r5
 8006b62:	1891      	adds	r1, r2, r2
 8006b64:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006b66:	415b      	adcs	r3, r3
 8006b68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006b6e:	4621      	mov	r1, r4
 8006b70:	eb12 0801 	adds.w	r8, r2, r1
 8006b74:	4629      	mov	r1, r5
 8006b76:	eb43 0901 	adc.w	r9, r3, r1
 8006b7a:	f04f 0200 	mov.w	r2, #0
 8006b7e:	f04f 0300 	mov.w	r3, #0
 8006b82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b8e:	4690      	mov	r8, r2
 8006b90:	4699      	mov	r9, r3
 8006b92:	4623      	mov	r3, r4
 8006b94:	eb18 0303 	adds.w	r3, r8, r3
 8006b98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006b9c:	462b      	mov	r3, r5
 8006b9e:	eb49 0303 	adc.w	r3, r9, r3
 8006ba2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006bb2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006bb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006bba:	460b      	mov	r3, r1
 8006bbc:	18db      	adds	r3, r3, r3
 8006bbe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	eb42 0303 	adc.w	r3, r2, r3
 8006bc6:	657b      	str	r3, [r7, #84]	@ 0x54
 8006bc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006bcc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006bd0:	f7fa f85c 	bl	8000c8c <__aeabi_uldivmod>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	4b61      	ldr	r3, [pc, #388]	@ (8006d60 <UART_SetConfig+0x2d4>)
 8006bda:	fba3 2302 	umull	r2, r3, r3, r2
 8006bde:	095b      	lsrs	r3, r3, #5
 8006be0:	011c      	lsls	r4, r3, #4
 8006be2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006be6:	2200      	movs	r2, #0
 8006be8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006bec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006bf0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006bf4:	4642      	mov	r2, r8
 8006bf6:	464b      	mov	r3, r9
 8006bf8:	1891      	adds	r1, r2, r2
 8006bfa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006bfc:	415b      	adcs	r3, r3
 8006bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006c04:	4641      	mov	r1, r8
 8006c06:	eb12 0a01 	adds.w	sl, r2, r1
 8006c0a:	4649      	mov	r1, r9
 8006c0c:	eb43 0b01 	adc.w	fp, r3, r1
 8006c10:	f04f 0200 	mov.w	r2, #0
 8006c14:	f04f 0300 	mov.w	r3, #0
 8006c18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006c20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c24:	4692      	mov	sl, r2
 8006c26:	469b      	mov	fp, r3
 8006c28:	4643      	mov	r3, r8
 8006c2a:	eb1a 0303 	adds.w	r3, sl, r3
 8006c2e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c32:	464b      	mov	r3, r9
 8006c34:	eb4b 0303 	adc.w	r3, fp, r3
 8006c38:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006c48:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006c4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006c50:	460b      	mov	r3, r1
 8006c52:	18db      	adds	r3, r3, r3
 8006c54:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c56:	4613      	mov	r3, r2
 8006c58:	eb42 0303 	adc.w	r3, r2, r3
 8006c5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006c62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006c66:	f7fa f811 	bl	8000c8c <__aeabi_uldivmod>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	4611      	mov	r1, r2
 8006c70:	4b3b      	ldr	r3, [pc, #236]	@ (8006d60 <UART_SetConfig+0x2d4>)
 8006c72:	fba3 2301 	umull	r2, r3, r3, r1
 8006c76:	095b      	lsrs	r3, r3, #5
 8006c78:	2264      	movs	r2, #100	@ 0x64
 8006c7a:	fb02 f303 	mul.w	r3, r2, r3
 8006c7e:	1acb      	subs	r3, r1, r3
 8006c80:	00db      	lsls	r3, r3, #3
 8006c82:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006c86:	4b36      	ldr	r3, [pc, #216]	@ (8006d60 <UART_SetConfig+0x2d4>)
 8006c88:	fba3 2302 	umull	r2, r3, r3, r2
 8006c8c:	095b      	lsrs	r3, r3, #5
 8006c8e:	005b      	lsls	r3, r3, #1
 8006c90:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006c94:	441c      	add	r4, r3
 8006c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ca0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006ca4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006ca8:	4642      	mov	r2, r8
 8006caa:	464b      	mov	r3, r9
 8006cac:	1891      	adds	r1, r2, r2
 8006cae:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006cb0:	415b      	adcs	r3, r3
 8006cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006cb8:	4641      	mov	r1, r8
 8006cba:	1851      	adds	r1, r2, r1
 8006cbc:	6339      	str	r1, [r7, #48]	@ 0x30
 8006cbe:	4649      	mov	r1, r9
 8006cc0:	414b      	adcs	r3, r1
 8006cc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cc4:	f04f 0200 	mov.w	r2, #0
 8006cc8:	f04f 0300 	mov.w	r3, #0
 8006ccc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006cd0:	4659      	mov	r1, fp
 8006cd2:	00cb      	lsls	r3, r1, #3
 8006cd4:	4651      	mov	r1, sl
 8006cd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cda:	4651      	mov	r1, sl
 8006cdc:	00ca      	lsls	r2, r1, #3
 8006cde:	4610      	mov	r0, r2
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	4642      	mov	r2, r8
 8006ce6:	189b      	adds	r3, r3, r2
 8006ce8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006cec:	464b      	mov	r3, r9
 8006cee:	460a      	mov	r2, r1
 8006cf0:	eb42 0303 	adc.w	r3, r2, r3
 8006cf4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006d04:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006d08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	18db      	adds	r3, r3, r3
 8006d10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d12:	4613      	mov	r3, r2
 8006d14:	eb42 0303 	adc.w	r3, r2, r3
 8006d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006d1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006d22:	f7f9 ffb3 	bl	8000c8c <__aeabi_uldivmod>
 8006d26:	4602      	mov	r2, r0
 8006d28:	460b      	mov	r3, r1
 8006d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d60 <UART_SetConfig+0x2d4>)
 8006d2c:	fba3 1302 	umull	r1, r3, r3, r2
 8006d30:	095b      	lsrs	r3, r3, #5
 8006d32:	2164      	movs	r1, #100	@ 0x64
 8006d34:	fb01 f303 	mul.w	r3, r1, r3
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	00db      	lsls	r3, r3, #3
 8006d3c:	3332      	adds	r3, #50	@ 0x32
 8006d3e:	4a08      	ldr	r2, [pc, #32]	@ (8006d60 <UART_SetConfig+0x2d4>)
 8006d40:	fba2 2303 	umull	r2, r3, r2, r3
 8006d44:	095b      	lsrs	r3, r3, #5
 8006d46:	f003 0207 	and.w	r2, r3, #7
 8006d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4422      	add	r2, r4
 8006d52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006d54:	e106      	b.n	8006f64 <UART_SetConfig+0x4d8>
 8006d56:	bf00      	nop
 8006d58:	40011000 	.word	0x40011000
 8006d5c:	40011400 	.word	0x40011400
 8006d60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006d6e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006d72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006d76:	4642      	mov	r2, r8
 8006d78:	464b      	mov	r3, r9
 8006d7a:	1891      	adds	r1, r2, r2
 8006d7c:	6239      	str	r1, [r7, #32]
 8006d7e:	415b      	adcs	r3, r3
 8006d80:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006d86:	4641      	mov	r1, r8
 8006d88:	1854      	adds	r4, r2, r1
 8006d8a:	4649      	mov	r1, r9
 8006d8c:	eb43 0501 	adc.w	r5, r3, r1
 8006d90:	f04f 0200 	mov.w	r2, #0
 8006d94:	f04f 0300 	mov.w	r3, #0
 8006d98:	00eb      	lsls	r3, r5, #3
 8006d9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d9e:	00e2      	lsls	r2, r4, #3
 8006da0:	4614      	mov	r4, r2
 8006da2:	461d      	mov	r5, r3
 8006da4:	4643      	mov	r3, r8
 8006da6:	18e3      	adds	r3, r4, r3
 8006da8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006dac:	464b      	mov	r3, r9
 8006dae:	eb45 0303 	adc.w	r3, r5, r3
 8006db2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006dc2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006dc6:	f04f 0200 	mov.w	r2, #0
 8006dca:	f04f 0300 	mov.w	r3, #0
 8006dce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006dd2:	4629      	mov	r1, r5
 8006dd4:	008b      	lsls	r3, r1, #2
 8006dd6:	4621      	mov	r1, r4
 8006dd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ddc:	4621      	mov	r1, r4
 8006dde:	008a      	lsls	r2, r1, #2
 8006de0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006de4:	f7f9 ff52 	bl	8000c8c <__aeabi_uldivmod>
 8006de8:	4602      	mov	r2, r0
 8006dea:	460b      	mov	r3, r1
 8006dec:	4b60      	ldr	r3, [pc, #384]	@ (8006f70 <UART_SetConfig+0x4e4>)
 8006dee:	fba3 2302 	umull	r2, r3, r3, r2
 8006df2:	095b      	lsrs	r3, r3, #5
 8006df4:	011c      	lsls	r4, r3, #4
 8006df6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006e00:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006e04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006e08:	4642      	mov	r2, r8
 8006e0a:	464b      	mov	r3, r9
 8006e0c:	1891      	adds	r1, r2, r2
 8006e0e:	61b9      	str	r1, [r7, #24]
 8006e10:	415b      	adcs	r3, r3
 8006e12:	61fb      	str	r3, [r7, #28]
 8006e14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e18:	4641      	mov	r1, r8
 8006e1a:	1851      	adds	r1, r2, r1
 8006e1c:	6139      	str	r1, [r7, #16]
 8006e1e:	4649      	mov	r1, r9
 8006e20:	414b      	adcs	r3, r1
 8006e22:	617b      	str	r3, [r7, #20]
 8006e24:	f04f 0200 	mov.w	r2, #0
 8006e28:	f04f 0300 	mov.w	r3, #0
 8006e2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e30:	4659      	mov	r1, fp
 8006e32:	00cb      	lsls	r3, r1, #3
 8006e34:	4651      	mov	r1, sl
 8006e36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e3a:	4651      	mov	r1, sl
 8006e3c:	00ca      	lsls	r2, r1, #3
 8006e3e:	4610      	mov	r0, r2
 8006e40:	4619      	mov	r1, r3
 8006e42:	4603      	mov	r3, r0
 8006e44:	4642      	mov	r2, r8
 8006e46:	189b      	adds	r3, r3, r2
 8006e48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006e4c:	464b      	mov	r3, r9
 8006e4e:	460a      	mov	r2, r1
 8006e50:	eb42 0303 	adc.w	r3, r2, r3
 8006e54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006e62:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006e64:	f04f 0200 	mov.w	r2, #0
 8006e68:	f04f 0300 	mov.w	r3, #0
 8006e6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006e70:	4649      	mov	r1, r9
 8006e72:	008b      	lsls	r3, r1, #2
 8006e74:	4641      	mov	r1, r8
 8006e76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e7a:	4641      	mov	r1, r8
 8006e7c:	008a      	lsls	r2, r1, #2
 8006e7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006e82:	f7f9 ff03 	bl	8000c8c <__aeabi_uldivmod>
 8006e86:	4602      	mov	r2, r0
 8006e88:	460b      	mov	r3, r1
 8006e8a:	4611      	mov	r1, r2
 8006e8c:	4b38      	ldr	r3, [pc, #224]	@ (8006f70 <UART_SetConfig+0x4e4>)
 8006e8e:	fba3 2301 	umull	r2, r3, r3, r1
 8006e92:	095b      	lsrs	r3, r3, #5
 8006e94:	2264      	movs	r2, #100	@ 0x64
 8006e96:	fb02 f303 	mul.w	r3, r2, r3
 8006e9a:	1acb      	subs	r3, r1, r3
 8006e9c:	011b      	lsls	r3, r3, #4
 8006e9e:	3332      	adds	r3, #50	@ 0x32
 8006ea0:	4a33      	ldr	r2, [pc, #204]	@ (8006f70 <UART_SetConfig+0x4e4>)
 8006ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea6:	095b      	lsrs	r3, r3, #5
 8006ea8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006eac:	441c      	add	r4, r3
 8006eae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	673b      	str	r3, [r7, #112]	@ 0x70
 8006eb6:	677a      	str	r2, [r7, #116]	@ 0x74
 8006eb8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006ebc:	4642      	mov	r2, r8
 8006ebe:	464b      	mov	r3, r9
 8006ec0:	1891      	adds	r1, r2, r2
 8006ec2:	60b9      	str	r1, [r7, #8]
 8006ec4:	415b      	adcs	r3, r3
 8006ec6:	60fb      	str	r3, [r7, #12]
 8006ec8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ecc:	4641      	mov	r1, r8
 8006ece:	1851      	adds	r1, r2, r1
 8006ed0:	6039      	str	r1, [r7, #0]
 8006ed2:	4649      	mov	r1, r9
 8006ed4:	414b      	adcs	r3, r1
 8006ed6:	607b      	str	r3, [r7, #4]
 8006ed8:	f04f 0200 	mov.w	r2, #0
 8006edc:	f04f 0300 	mov.w	r3, #0
 8006ee0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ee4:	4659      	mov	r1, fp
 8006ee6:	00cb      	lsls	r3, r1, #3
 8006ee8:	4651      	mov	r1, sl
 8006eea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006eee:	4651      	mov	r1, sl
 8006ef0:	00ca      	lsls	r2, r1, #3
 8006ef2:	4610      	mov	r0, r2
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	4642      	mov	r2, r8
 8006efa:	189b      	adds	r3, r3, r2
 8006efc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006efe:	464b      	mov	r3, r9
 8006f00:	460a      	mov	r2, r1
 8006f02:	eb42 0303 	adc.w	r3, r2, r3
 8006f06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f12:	667a      	str	r2, [r7, #100]	@ 0x64
 8006f14:	f04f 0200 	mov.w	r2, #0
 8006f18:	f04f 0300 	mov.w	r3, #0
 8006f1c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006f20:	4649      	mov	r1, r9
 8006f22:	008b      	lsls	r3, r1, #2
 8006f24:	4641      	mov	r1, r8
 8006f26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f2a:	4641      	mov	r1, r8
 8006f2c:	008a      	lsls	r2, r1, #2
 8006f2e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006f32:	f7f9 feab 	bl	8000c8c <__aeabi_uldivmod>
 8006f36:	4602      	mov	r2, r0
 8006f38:	460b      	mov	r3, r1
 8006f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006f70 <UART_SetConfig+0x4e4>)
 8006f3c:	fba3 1302 	umull	r1, r3, r3, r2
 8006f40:	095b      	lsrs	r3, r3, #5
 8006f42:	2164      	movs	r1, #100	@ 0x64
 8006f44:	fb01 f303 	mul.w	r3, r1, r3
 8006f48:	1ad3      	subs	r3, r2, r3
 8006f4a:	011b      	lsls	r3, r3, #4
 8006f4c:	3332      	adds	r3, #50	@ 0x32
 8006f4e:	4a08      	ldr	r2, [pc, #32]	@ (8006f70 <UART_SetConfig+0x4e4>)
 8006f50:	fba2 2303 	umull	r2, r3, r2, r3
 8006f54:	095b      	lsrs	r3, r3, #5
 8006f56:	f003 020f 	and.w	r2, r3, #15
 8006f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4422      	add	r2, r4
 8006f62:	609a      	str	r2, [r3, #8]
}
 8006f64:	bf00      	nop
 8006f66:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f70:	51eb851f 	.word	0x51eb851f

08006f74 <atof>:
 8006f74:	2100      	movs	r1, #0
 8006f76:	f000 becb 	b.w	8007d10 <strtod>
	...

08006f7c <siprintf>:
 8006f7c:	b40e      	push	{r1, r2, r3}
 8006f7e:	b510      	push	{r4, lr}
 8006f80:	b09d      	sub	sp, #116	@ 0x74
 8006f82:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006f84:	9002      	str	r0, [sp, #8]
 8006f86:	9006      	str	r0, [sp, #24]
 8006f88:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006f8c:	480a      	ldr	r0, [pc, #40]	@ (8006fb8 <siprintf+0x3c>)
 8006f8e:	9107      	str	r1, [sp, #28]
 8006f90:	9104      	str	r1, [sp, #16]
 8006f92:	490a      	ldr	r1, [pc, #40]	@ (8006fbc <siprintf+0x40>)
 8006f94:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f98:	9105      	str	r1, [sp, #20]
 8006f9a:	2400      	movs	r4, #0
 8006f9c:	a902      	add	r1, sp, #8
 8006f9e:	6800      	ldr	r0, [r0, #0]
 8006fa0:	9301      	str	r3, [sp, #4]
 8006fa2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006fa4:	f001 fad0 	bl	8008548 <_svfiprintf_r>
 8006fa8:	9b02      	ldr	r3, [sp, #8]
 8006faa:	701c      	strb	r4, [r3, #0]
 8006fac:	b01d      	add	sp, #116	@ 0x74
 8006fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fb2:	b003      	add	sp, #12
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	200001dc 	.word	0x200001dc
 8006fbc:	ffff0208 	.word	0xffff0208

08006fc0 <std>:
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	b510      	push	{r4, lr}
 8006fc4:	4604      	mov	r4, r0
 8006fc6:	e9c0 3300 	strd	r3, r3, [r0]
 8006fca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006fce:	6083      	str	r3, [r0, #8]
 8006fd0:	8181      	strh	r1, [r0, #12]
 8006fd2:	6643      	str	r3, [r0, #100]	@ 0x64
 8006fd4:	81c2      	strh	r2, [r0, #14]
 8006fd6:	6183      	str	r3, [r0, #24]
 8006fd8:	4619      	mov	r1, r3
 8006fda:	2208      	movs	r2, #8
 8006fdc:	305c      	adds	r0, #92	@ 0x5c
 8006fde:	f000 fec1 	bl	8007d64 <memset>
 8006fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8007018 <std+0x58>)
 8006fe4:	6263      	str	r3, [r4, #36]	@ 0x24
 8006fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800701c <std+0x5c>)
 8006fe8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006fea:	4b0d      	ldr	r3, [pc, #52]	@ (8007020 <std+0x60>)
 8006fec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006fee:	4b0d      	ldr	r3, [pc, #52]	@ (8007024 <std+0x64>)
 8006ff0:	6323      	str	r3, [r4, #48]	@ 0x30
 8006ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8007028 <std+0x68>)
 8006ff4:	6224      	str	r4, [r4, #32]
 8006ff6:	429c      	cmp	r4, r3
 8006ff8:	d006      	beq.n	8007008 <std+0x48>
 8006ffa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006ffe:	4294      	cmp	r4, r2
 8007000:	d002      	beq.n	8007008 <std+0x48>
 8007002:	33d0      	adds	r3, #208	@ 0xd0
 8007004:	429c      	cmp	r4, r3
 8007006:	d105      	bne.n	8007014 <std+0x54>
 8007008:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800700c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007010:	f000 beec 	b.w	8007dec <__retarget_lock_init_recursive>
 8007014:	bd10      	pop	{r4, pc}
 8007016:	bf00      	nop
 8007018:	08009685 	.word	0x08009685
 800701c:	080096a7 	.word	0x080096a7
 8007020:	080096df 	.word	0x080096df
 8007024:	08009703 	.word	0x08009703
 8007028:	2000055c 	.word	0x2000055c

0800702c <stdio_exit_handler>:
 800702c:	4a02      	ldr	r2, [pc, #8]	@ (8007038 <stdio_exit_handler+0xc>)
 800702e:	4903      	ldr	r1, [pc, #12]	@ (800703c <stdio_exit_handler+0x10>)
 8007030:	4803      	ldr	r0, [pc, #12]	@ (8007040 <stdio_exit_handler+0x14>)
 8007032:	f000 be79 	b.w	8007d28 <_fwalk_sglue>
 8007036:	bf00      	nop
 8007038:	20000064 	.word	0x20000064
 800703c:	08008cc9 	.word	0x08008cc9
 8007040:	200001e0 	.word	0x200001e0

08007044 <cleanup_stdio>:
 8007044:	6841      	ldr	r1, [r0, #4]
 8007046:	4b0c      	ldr	r3, [pc, #48]	@ (8007078 <cleanup_stdio+0x34>)
 8007048:	4299      	cmp	r1, r3
 800704a:	b510      	push	{r4, lr}
 800704c:	4604      	mov	r4, r0
 800704e:	d001      	beq.n	8007054 <cleanup_stdio+0x10>
 8007050:	f001 fe3a 	bl	8008cc8 <_fflush_r>
 8007054:	68a1      	ldr	r1, [r4, #8]
 8007056:	4b09      	ldr	r3, [pc, #36]	@ (800707c <cleanup_stdio+0x38>)
 8007058:	4299      	cmp	r1, r3
 800705a:	d002      	beq.n	8007062 <cleanup_stdio+0x1e>
 800705c:	4620      	mov	r0, r4
 800705e:	f001 fe33 	bl	8008cc8 <_fflush_r>
 8007062:	68e1      	ldr	r1, [r4, #12]
 8007064:	4b06      	ldr	r3, [pc, #24]	@ (8007080 <cleanup_stdio+0x3c>)
 8007066:	4299      	cmp	r1, r3
 8007068:	d004      	beq.n	8007074 <cleanup_stdio+0x30>
 800706a:	4620      	mov	r0, r4
 800706c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007070:	f001 be2a 	b.w	8008cc8 <_fflush_r>
 8007074:	bd10      	pop	{r4, pc}
 8007076:	bf00      	nop
 8007078:	2000055c 	.word	0x2000055c
 800707c:	200005c4 	.word	0x200005c4
 8007080:	2000062c 	.word	0x2000062c

08007084 <global_stdio_init.part.0>:
 8007084:	b510      	push	{r4, lr}
 8007086:	4b0b      	ldr	r3, [pc, #44]	@ (80070b4 <global_stdio_init.part.0+0x30>)
 8007088:	4c0b      	ldr	r4, [pc, #44]	@ (80070b8 <global_stdio_init.part.0+0x34>)
 800708a:	4a0c      	ldr	r2, [pc, #48]	@ (80070bc <global_stdio_init.part.0+0x38>)
 800708c:	601a      	str	r2, [r3, #0]
 800708e:	4620      	mov	r0, r4
 8007090:	2200      	movs	r2, #0
 8007092:	2104      	movs	r1, #4
 8007094:	f7ff ff94 	bl	8006fc0 <std>
 8007098:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800709c:	2201      	movs	r2, #1
 800709e:	2109      	movs	r1, #9
 80070a0:	f7ff ff8e 	bl	8006fc0 <std>
 80070a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80070a8:	2202      	movs	r2, #2
 80070aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070ae:	2112      	movs	r1, #18
 80070b0:	f7ff bf86 	b.w	8006fc0 <std>
 80070b4:	20000694 	.word	0x20000694
 80070b8:	2000055c 	.word	0x2000055c
 80070bc:	0800702d 	.word	0x0800702d

080070c0 <__sfp_lock_acquire>:
 80070c0:	4801      	ldr	r0, [pc, #4]	@ (80070c8 <__sfp_lock_acquire+0x8>)
 80070c2:	f000 be94 	b.w	8007dee <__retarget_lock_acquire_recursive>
 80070c6:	bf00      	nop
 80070c8:	20000699 	.word	0x20000699

080070cc <__sfp_lock_release>:
 80070cc:	4801      	ldr	r0, [pc, #4]	@ (80070d4 <__sfp_lock_release+0x8>)
 80070ce:	f000 be8f 	b.w	8007df0 <__retarget_lock_release_recursive>
 80070d2:	bf00      	nop
 80070d4:	20000699 	.word	0x20000699

080070d8 <__sinit>:
 80070d8:	b510      	push	{r4, lr}
 80070da:	4604      	mov	r4, r0
 80070dc:	f7ff fff0 	bl	80070c0 <__sfp_lock_acquire>
 80070e0:	6a23      	ldr	r3, [r4, #32]
 80070e2:	b11b      	cbz	r3, 80070ec <__sinit+0x14>
 80070e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070e8:	f7ff bff0 	b.w	80070cc <__sfp_lock_release>
 80070ec:	4b04      	ldr	r3, [pc, #16]	@ (8007100 <__sinit+0x28>)
 80070ee:	6223      	str	r3, [r4, #32]
 80070f0:	4b04      	ldr	r3, [pc, #16]	@ (8007104 <__sinit+0x2c>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d1f5      	bne.n	80070e4 <__sinit+0xc>
 80070f8:	f7ff ffc4 	bl	8007084 <global_stdio_init.part.0>
 80070fc:	e7f2      	b.n	80070e4 <__sinit+0xc>
 80070fe:	bf00      	nop
 8007100:	08007045 	.word	0x08007045
 8007104:	20000694 	.word	0x20000694

08007108 <sulp>:
 8007108:	b570      	push	{r4, r5, r6, lr}
 800710a:	4604      	mov	r4, r0
 800710c:	460d      	mov	r5, r1
 800710e:	ec45 4b10 	vmov	d0, r4, r5
 8007112:	4616      	mov	r6, r2
 8007114:	f002 f978 	bl	8009408 <__ulp>
 8007118:	ec51 0b10 	vmov	r0, r1, d0
 800711c:	b17e      	cbz	r6, 800713e <sulp+0x36>
 800711e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007122:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007126:	2b00      	cmp	r3, #0
 8007128:	dd09      	ble.n	800713e <sulp+0x36>
 800712a:	051b      	lsls	r3, r3, #20
 800712c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007130:	2400      	movs	r4, #0
 8007132:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007136:	4622      	mov	r2, r4
 8007138:	462b      	mov	r3, r5
 800713a:	f7f9 fa75 	bl	8000628 <__aeabi_dmul>
 800713e:	ec41 0b10 	vmov	d0, r0, r1
 8007142:	bd70      	pop	{r4, r5, r6, pc}
 8007144:	0000      	movs	r0, r0
	...

08007148 <_strtod_l>:
 8007148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800714c:	b09f      	sub	sp, #124	@ 0x7c
 800714e:	460c      	mov	r4, r1
 8007150:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007152:	2200      	movs	r2, #0
 8007154:	921a      	str	r2, [sp, #104]	@ 0x68
 8007156:	9005      	str	r0, [sp, #20]
 8007158:	f04f 0a00 	mov.w	sl, #0
 800715c:	f04f 0b00 	mov.w	fp, #0
 8007160:	460a      	mov	r2, r1
 8007162:	9219      	str	r2, [sp, #100]	@ 0x64
 8007164:	7811      	ldrb	r1, [r2, #0]
 8007166:	292b      	cmp	r1, #43	@ 0x2b
 8007168:	d04a      	beq.n	8007200 <_strtod_l+0xb8>
 800716a:	d838      	bhi.n	80071de <_strtod_l+0x96>
 800716c:	290d      	cmp	r1, #13
 800716e:	d832      	bhi.n	80071d6 <_strtod_l+0x8e>
 8007170:	2908      	cmp	r1, #8
 8007172:	d832      	bhi.n	80071da <_strtod_l+0x92>
 8007174:	2900      	cmp	r1, #0
 8007176:	d03b      	beq.n	80071f0 <_strtod_l+0xa8>
 8007178:	2200      	movs	r2, #0
 800717a:	920e      	str	r2, [sp, #56]	@ 0x38
 800717c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800717e:	782a      	ldrb	r2, [r5, #0]
 8007180:	2a30      	cmp	r2, #48	@ 0x30
 8007182:	f040 80b2 	bne.w	80072ea <_strtod_l+0x1a2>
 8007186:	786a      	ldrb	r2, [r5, #1]
 8007188:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800718c:	2a58      	cmp	r2, #88	@ 0x58
 800718e:	d16e      	bne.n	800726e <_strtod_l+0x126>
 8007190:	9302      	str	r3, [sp, #8]
 8007192:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007194:	9301      	str	r3, [sp, #4]
 8007196:	ab1a      	add	r3, sp, #104	@ 0x68
 8007198:	9300      	str	r3, [sp, #0]
 800719a:	4a8f      	ldr	r2, [pc, #572]	@ (80073d8 <_strtod_l+0x290>)
 800719c:	9805      	ldr	r0, [sp, #20]
 800719e:	ab1b      	add	r3, sp, #108	@ 0x6c
 80071a0:	a919      	add	r1, sp, #100	@ 0x64
 80071a2:	f000 fea5 	bl	8007ef0 <__gethex>
 80071a6:	f010 060f 	ands.w	r6, r0, #15
 80071aa:	4604      	mov	r4, r0
 80071ac:	d005      	beq.n	80071ba <_strtod_l+0x72>
 80071ae:	2e06      	cmp	r6, #6
 80071b0:	d128      	bne.n	8007204 <_strtod_l+0xbc>
 80071b2:	3501      	adds	r5, #1
 80071b4:	2300      	movs	r3, #0
 80071b6:	9519      	str	r5, [sp, #100]	@ 0x64
 80071b8:	930e      	str	r3, [sp, #56]	@ 0x38
 80071ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f040 858e 	bne.w	8007cde <_strtod_l+0xb96>
 80071c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071c4:	b1cb      	cbz	r3, 80071fa <_strtod_l+0xb2>
 80071c6:	4652      	mov	r2, sl
 80071c8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80071cc:	ec43 2b10 	vmov	d0, r2, r3
 80071d0:	b01f      	add	sp, #124	@ 0x7c
 80071d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d6:	2920      	cmp	r1, #32
 80071d8:	d1ce      	bne.n	8007178 <_strtod_l+0x30>
 80071da:	3201      	adds	r2, #1
 80071dc:	e7c1      	b.n	8007162 <_strtod_l+0x1a>
 80071de:	292d      	cmp	r1, #45	@ 0x2d
 80071e0:	d1ca      	bne.n	8007178 <_strtod_l+0x30>
 80071e2:	2101      	movs	r1, #1
 80071e4:	910e      	str	r1, [sp, #56]	@ 0x38
 80071e6:	1c51      	adds	r1, r2, #1
 80071e8:	9119      	str	r1, [sp, #100]	@ 0x64
 80071ea:	7852      	ldrb	r2, [r2, #1]
 80071ec:	2a00      	cmp	r2, #0
 80071ee:	d1c5      	bne.n	800717c <_strtod_l+0x34>
 80071f0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80071f2:	9419      	str	r4, [sp, #100]	@ 0x64
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f040 8570 	bne.w	8007cda <_strtod_l+0xb92>
 80071fa:	4652      	mov	r2, sl
 80071fc:	465b      	mov	r3, fp
 80071fe:	e7e5      	b.n	80071cc <_strtod_l+0x84>
 8007200:	2100      	movs	r1, #0
 8007202:	e7ef      	b.n	80071e4 <_strtod_l+0x9c>
 8007204:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007206:	b13a      	cbz	r2, 8007218 <_strtod_l+0xd0>
 8007208:	2135      	movs	r1, #53	@ 0x35
 800720a:	a81c      	add	r0, sp, #112	@ 0x70
 800720c:	f002 f9f6 	bl	80095fc <__copybits>
 8007210:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007212:	9805      	ldr	r0, [sp, #20]
 8007214:	f001 fdcc 	bl	8008db0 <_Bfree>
 8007218:	3e01      	subs	r6, #1
 800721a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800721c:	2e04      	cmp	r6, #4
 800721e:	d806      	bhi.n	800722e <_strtod_l+0xe6>
 8007220:	e8df f006 	tbb	[pc, r6]
 8007224:	201d0314 	.word	0x201d0314
 8007228:	14          	.byte	0x14
 8007229:	00          	.byte	0x00
 800722a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800722e:	05e1      	lsls	r1, r4, #23
 8007230:	bf48      	it	mi
 8007232:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007236:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800723a:	0d1b      	lsrs	r3, r3, #20
 800723c:	051b      	lsls	r3, r3, #20
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1bb      	bne.n	80071ba <_strtod_l+0x72>
 8007242:	f000 fda9 	bl	8007d98 <__errno>
 8007246:	2322      	movs	r3, #34	@ 0x22
 8007248:	6003      	str	r3, [r0, #0]
 800724a:	e7b6      	b.n	80071ba <_strtod_l+0x72>
 800724c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007250:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007254:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007258:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800725c:	e7e7      	b.n	800722e <_strtod_l+0xe6>
 800725e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80073e0 <_strtod_l+0x298>
 8007262:	e7e4      	b.n	800722e <_strtod_l+0xe6>
 8007264:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007268:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800726c:	e7df      	b.n	800722e <_strtod_l+0xe6>
 800726e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007270:	1c5a      	adds	r2, r3, #1
 8007272:	9219      	str	r2, [sp, #100]	@ 0x64
 8007274:	785b      	ldrb	r3, [r3, #1]
 8007276:	2b30      	cmp	r3, #48	@ 0x30
 8007278:	d0f9      	beq.n	800726e <_strtod_l+0x126>
 800727a:	2b00      	cmp	r3, #0
 800727c:	d09d      	beq.n	80071ba <_strtod_l+0x72>
 800727e:	2301      	movs	r3, #1
 8007280:	2700      	movs	r7, #0
 8007282:	9308      	str	r3, [sp, #32]
 8007284:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007286:	930c      	str	r3, [sp, #48]	@ 0x30
 8007288:	970b      	str	r7, [sp, #44]	@ 0x2c
 800728a:	46b9      	mov	r9, r7
 800728c:	220a      	movs	r2, #10
 800728e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007290:	7805      	ldrb	r5, [r0, #0]
 8007292:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007296:	b2d9      	uxtb	r1, r3
 8007298:	2909      	cmp	r1, #9
 800729a:	d928      	bls.n	80072ee <_strtod_l+0x1a6>
 800729c:	494f      	ldr	r1, [pc, #316]	@ (80073dc <_strtod_l+0x294>)
 800729e:	2201      	movs	r2, #1
 80072a0:	f000 fd68 	bl	8007d74 <strncmp>
 80072a4:	2800      	cmp	r0, #0
 80072a6:	d032      	beq.n	800730e <_strtod_l+0x1c6>
 80072a8:	2000      	movs	r0, #0
 80072aa:	462a      	mov	r2, r5
 80072ac:	900a      	str	r0, [sp, #40]	@ 0x28
 80072ae:	464d      	mov	r5, r9
 80072b0:	4603      	mov	r3, r0
 80072b2:	2a65      	cmp	r2, #101	@ 0x65
 80072b4:	d001      	beq.n	80072ba <_strtod_l+0x172>
 80072b6:	2a45      	cmp	r2, #69	@ 0x45
 80072b8:	d114      	bne.n	80072e4 <_strtod_l+0x19c>
 80072ba:	b91d      	cbnz	r5, 80072c4 <_strtod_l+0x17c>
 80072bc:	9a08      	ldr	r2, [sp, #32]
 80072be:	4302      	orrs	r2, r0
 80072c0:	d096      	beq.n	80071f0 <_strtod_l+0xa8>
 80072c2:	2500      	movs	r5, #0
 80072c4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80072c6:	1c62      	adds	r2, r4, #1
 80072c8:	9219      	str	r2, [sp, #100]	@ 0x64
 80072ca:	7862      	ldrb	r2, [r4, #1]
 80072cc:	2a2b      	cmp	r2, #43	@ 0x2b
 80072ce:	d07a      	beq.n	80073c6 <_strtod_l+0x27e>
 80072d0:	2a2d      	cmp	r2, #45	@ 0x2d
 80072d2:	d07e      	beq.n	80073d2 <_strtod_l+0x28a>
 80072d4:	f04f 0c00 	mov.w	ip, #0
 80072d8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80072dc:	2909      	cmp	r1, #9
 80072de:	f240 8085 	bls.w	80073ec <_strtod_l+0x2a4>
 80072e2:	9419      	str	r4, [sp, #100]	@ 0x64
 80072e4:	f04f 0800 	mov.w	r8, #0
 80072e8:	e0a5      	b.n	8007436 <_strtod_l+0x2ee>
 80072ea:	2300      	movs	r3, #0
 80072ec:	e7c8      	b.n	8007280 <_strtod_l+0x138>
 80072ee:	f1b9 0f08 	cmp.w	r9, #8
 80072f2:	bfd8      	it	le
 80072f4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80072f6:	f100 0001 	add.w	r0, r0, #1
 80072fa:	bfda      	itte	le
 80072fc:	fb02 3301 	mlale	r3, r2, r1, r3
 8007300:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8007302:	fb02 3707 	mlagt	r7, r2, r7, r3
 8007306:	f109 0901 	add.w	r9, r9, #1
 800730a:	9019      	str	r0, [sp, #100]	@ 0x64
 800730c:	e7bf      	b.n	800728e <_strtod_l+0x146>
 800730e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007310:	1c5a      	adds	r2, r3, #1
 8007312:	9219      	str	r2, [sp, #100]	@ 0x64
 8007314:	785a      	ldrb	r2, [r3, #1]
 8007316:	f1b9 0f00 	cmp.w	r9, #0
 800731a:	d03b      	beq.n	8007394 <_strtod_l+0x24c>
 800731c:	900a      	str	r0, [sp, #40]	@ 0x28
 800731e:	464d      	mov	r5, r9
 8007320:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007324:	2b09      	cmp	r3, #9
 8007326:	d912      	bls.n	800734e <_strtod_l+0x206>
 8007328:	2301      	movs	r3, #1
 800732a:	e7c2      	b.n	80072b2 <_strtod_l+0x16a>
 800732c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800732e:	1c5a      	adds	r2, r3, #1
 8007330:	9219      	str	r2, [sp, #100]	@ 0x64
 8007332:	785a      	ldrb	r2, [r3, #1]
 8007334:	3001      	adds	r0, #1
 8007336:	2a30      	cmp	r2, #48	@ 0x30
 8007338:	d0f8      	beq.n	800732c <_strtod_l+0x1e4>
 800733a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800733e:	2b08      	cmp	r3, #8
 8007340:	f200 84d2 	bhi.w	8007ce8 <_strtod_l+0xba0>
 8007344:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007346:	900a      	str	r0, [sp, #40]	@ 0x28
 8007348:	2000      	movs	r0, #0
 800734a:	930c      	str	r3, [sp, #48]	@ 0x30
 800734c:	4605      	mov	r5, r0
 800734e:	3a30      	subs	r2, #48	@ 0x30
 8007350:	f100 0301 	add.w	r3, r0, #1
 8007354:	d018      	beq.n	8007388 <_strtod_l+0x240>
 8007356:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007358:	4419      	add	r1, r3
 800735a:	910a      	str	r1, [sp, #40]	@ 0x28
 800735c:	462e      	mov	r6, r5
 800735e:	f04f 0e0a 	mov.w	lr, #10
 8007362:	1c71      	adds	r1, r6, #1
 8007364:	eba1 0c05 	sub.w	ip, r1, r5
 8007368:	4563      	cmp	r3, ip
 800736a:	dc15      	bgt.n	8007398 <_strtod_l+0x250>
 800736c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007370:	182b      	adds	r3, r5, r0
 8007372:	2b08      	cmp	r3, #8
 8007374:	f105 0501 	add.w	r5, r5, #1
 8007378:	4405      	add	r5, r0
 800737a:	dc1a      	bgt.n	80073b2 <_strtod_l+0x26a>
 800737c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800737e:	230a      	movs	r3, #10
 8007380:	fb03 2301 	mla	r3, r3, r1, r2
 8007384:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007386:	2300      	movs	r3, #0
 8007388:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800738a:	1c51      	adds	r1, r2, #1
 800738c:	9119      	str	r1, [sp, #100]	@ 0x64
 800738e:	7852      	ldrb	r2, [r2, #1]
 8007390:	4618      	mov	r0, r3
 8007392:	e7c5      	b.n	8007320 <_strtod_l+0x1d8>
 8007394:	4648      	mov	r0, r9
 8007396:	e7ce      	b.n	8007336 <_strtod_l+0x1ee>
 8007398:	2e08      	cmp	r6, #8
 800739a:	dc05      	bgt.n	80073a8 <_strtod_l+0x260>
 800739c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800739e:	fb0e f606 	mul.w	r6, lr, r6
 80073a2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80073a4:	460e      	mov	r6, r1
 80073a6:	e7dc      	b.n	8007362 <_strtod_l+0x21a>
 80073a8:	2910      	cmp	r1, #16
 80073aa:	bfd8      	it	le
 80073ac:	fb0e f707 	mulle.w	r7, lr, r7
 80073b0:	e7f8      	b.n	80073a4 <_strtod_l+0x25c>
 80073b2:	2b0f      	cmp	r3, #15
 80073b4:	bfdc      	itt	le
 80073b6:	230a      	movle	r3, #10
 80073b8:	fb03 2707 	mlale	r7, r3, r7, r2
 80073bc:	e7e3      	b.n	8007386 <_strtod_l+0x23e>
 80073be:	2300      	movs	r3, #0
 80073c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80073c2:	2301      	movs	r3, #1
 80073c4:	e77a      	b.n	80072bc <_strtod_l+0x174>
 80073c6:	f04f 0c00 	mov.w	ip, #0
 80073ca:	1ca2      	adds	r2, r4, #2
 80073cc:	9219      	str	r2, [sp, #100]	@ 0x64
 80073ce:	78a2      	ldrb	r2, [r4, #2]
 80073d0:	e782      	b.n	80072d8 <_strtod_l+0x190>
 80073d2:	f04f 0c01 	mov.w	ip, #1
 80073d6:	e7f8      	b.n	80073ca <_strtod_l+0x282>
 80073d8:	0800a108 	.word	0x0800a108
 80073dc:	08009f8c 	.word	0x08009f8c
 80073e0:	7ff00000 	.word	0x7ff00000
 80073e4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80073e6:	1c51      	adds	r1, r2, #1
 80073e8:	9119      	str	r1, [sp, #100]	@ 0x64
 80073ea:	7852      	ldrb	r2, [r2, #1]
 80073ec:	2a30      	cmp	r2, #48	@ 0x30
 80073ee:	d0f9      	beq.n	80073e4 <_strtod_l+0x29c>
 80073f0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80073f4:	2908      	cmp	r1, #8
 80073f6:	f63f af75 	bhi.w	80072e4 <_strtod_l+0x19c>
 80073fa:	3a30      	subs	r2, #48	@ 0x30
 80073fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80073fe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007400:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007402:	f04f 080a 	mov.w	r8, #10
 8007406:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007408:	1c56      	adds	r6, r2, #1
 800740a:	9619      	str	r6, [sp, #100]	@ 0x64
 800740c:	7852      	ldrb	r2, [r2, #1]
 800740e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007412:	f1be 0f09 	cmp.w	lr, #9
 8007416:	d939      	bls.n	800748c <_strtod_l+0x344>
 8007418:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800741a:	1a76      	subs	r6, r6, r1
 800741c:	2e08      	cmp	r6, #8
 800741e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007422:	dc03      	bgt.n	800742c <_strtod_l+0x2e4>
 8007424:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007426:	4588      	cmp	r8, r1
 8007428:	bfa8      	it	ge
 800742a:	4688      	movge	r8, r1
 800742c:	f1bc 0f00 	cmp.w	ip, #0
 8007430:	d001      	beq.n	8007436 <_strtod_l+0x2ee>
 8007432:	f1c8 0800 	rsb	r8, r8, #0
 8007436:	2d00      	cmp	r5, #0
 8007438:	d14e      	bne.n	80074d8 <_strtod_l+0x390>
 800743a:	9908      	ldr	r1, [sp, #32]
 800743c:	4308      	orrs	r0, r1
 800743e:	f47f aebc 	bne.w	80071ba <_strtod_l+0x72>
 8007442:	2b00      	cmp	r3, #0
 8007444:	f47f aed4 	bne.w	80071f0 <_strtod_l+0xa8>
 8007448:	2a69      	cmp	r2, #105	@ 0x69
 800744a:	d028      	beq.n	800749e <_strtod_l+0x356>
 800744c:	dc25      	bgt.n	800749a <_strtod_l+0x352>
 800744e:	2a49      	cmp	r2, #73	@ 0x49
 8007450:	d025      	beq.n	800749e <_strtod_l+0x356>
 8007452:	2a4e      	cmp	r2, #78	@ 0x4e
 8007454:	f47f aecc 	bne.w	80071f0 <_strtod_l+0xa8>
 8007458:	499a      	ldr	r1, [pc, #616]	@ (80076c4 <_strtod_l+0x57c>)
 800745a:	a819      	add	r0, sp, #100	@ 0x64
 800745c:	f000 ff6a 	bl	8008334 <__match>
 8007460:	2800      	cmp	r0, #0
 8007462:	f43f aec5 	beq.w	80071f0 <_strtod_l+0xa8>
 8007466:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	2b28      	cmp	r3, #40	@ 0x28
 800746c:	d12e      	bne.n	80074cc <_strtod_l+0x384>
 800746e:	4996      	ldr	r1, [pc, #600]	@ (80076c8 <_strtod_l+0x580>)
 8007470:	aa1c      	add	r2, sp, #112	@ 0x70
 8007472:	a819      	add	r0, sp, #100	@ 0x64
 8007474:	f000 ff72 	bl	800835c <__hexnan>
 8007478:	2805      	cmp	r0, #5
 800747a:	d127      	bne.n	80074cc <_strtod_l+0x384>
 800747c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800747e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007482:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007486:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800748a:	e696      	b.n	80071ba <_strtod_l+0x72>
 800748c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800748e:	fb08 2101 	mla	r1, r8, r1, r2
 8007492:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007496:	9209      	str	r2, [sp, #36]	@ 0x24
 8007498:	e7b5      	b.n	8007406 <_strtod_l+0x2be>
 800749a:	2a6e      	cmp	r2, #110	@ 0x6e
 800749c:	e7da      	b.n	8007454 <_strtod_l+0x30c>
 800749e:	498b      	ldr	r1, [pc, #556]	@ (80076cc <_strtod_l+0x584>)
 80074a0:	a819      	add	r0, sp, #100	@ 0x64
 80074a2:	f000 ff47 	bl	8008334 <__match>
 80074a6:	2800      	cmp	r0, #0
 80074a8:	f43f aea2 	beq.w	80071f0 <_strtod_l+0xa8>
 80074ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80074ae:	4988      	ldr	r1, [pc, #544]	@ (80076d0 <_strtod_l+0x588>)
 80074b0:	3b01      	subs	r3, #1
 80074b2:	a819      	add	r0, sp, #100	@ 0x64
 80074b4:	9319      	str	r3, [sp, #100]	@ 0x64
 80074b6:	f000 ff3d 	bl	8008334 <__match>
 80074ba:	b910      	cbnz	r0, 80074c2 <_strtod_l+0x37a>
 80074bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80074be:	3301      	adds	r3, #1
 80074c0:	9319      	str	r3, [sp, #100]	@ 0x64
 80074c2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80076e0 <_strtod_l+0x598>
 80074c6:	f04f 0a00 	mov.w	sl, #0
 80074ca:	e676      	b.n	80071ba <_strtod_l+0x72>
 80074cc:	4881      	ldr	r0, [pc, #516]	@ (80076d4 <_strtod_l+0x58c>)
 80074ce:	f000 fc9f 	bl	8007e10 <nan>
 80074d2:	ec5b ab10 	vmov	sl, fp, d0
 80074d6:	e670      	b.n	80071ba <_strtod_l+0x72>
 80074d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074da:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80074dc:	eba8 0303 	sub.w	r3, r8, r3
 80074e0:	f1b9 0f00 	cmp.w	r9, #0
 80074e4:	bf08      	it	eq
 80074e6:	46a9      	moveq	r9, r5
 80074e8:	2d10      	cmp	r5, #16
 80074ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80074ec:	462c      	mov	r4, r5
 80074ee:	bfa8      	it	ge
 80074f0:	2410      	movge	r4, #16
 80074f2:	f7f9 f81f 	bl	8000534 <__aeabi_ui2d>
 80074f6:	2d09      	cmp	r5, #9
 80074f8:	4682      	mov	sl, r0
 80074fa:	468b      	mov	fp, r1
 80074fc:	dc13      	bgt.n	8007526 <_strtod_l+0x3de>
 80074fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007500:	2b00      	cmp	r3, #0
 8007502:	f43f ae5a 	beq.w	80071ba <_strtod_l+0x72>
 8007506:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007508:	dd78      	ble.n	80075fc <_strtod_l+0x4b4>
 800750a:	2b16      	cmp	r3, #22
 800750c:	dc5f      	bgt.n	80075ce <_strtod_l+0x486>
 800750e:	4972      	ldr	r1, [pc, #456]	@ (80076d8 <_strtod_l+0x590>)
 8007510:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007514:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007518:	4652      	mov	r2, sl
 800751a:	465b      	mov	r3, fp
 800751c:	f7f9 f884 	bl	8000628 <__aeabi_dmul>
 8007520:	4682      	mov	sl, r0
 8007522:	468b      	mov	fp, r1
 8007524:	e649      	b.n	80071ba <_strtod_l+0x72>
 8007526:	4b6c      	ldr	r3, [pc, #432]	@ (80076d8 <_strtod_l+0x590>)
 8007528:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800752c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007530:	f7f9 f87a 	bl	8000628 <__aeabi_dmul>
 8007534:	4682      	mov	sl, r0
 8007536:	4638      	mov	r0, r7
 8007538:	468b      	mov	fp, r1
 800753a:	f7f8 fffb 	bl	8000534 <__aeabi_ui2d>
 800753e:	4602      	mov	r2, r0
 8007540:	460b      	mov	r3, r1
 8007542:	4650      	mov	r0, sl
 8007544:	4659      	mov	r1, fp
 8007546:	f7f8 feb9 	bl	80002bc <__adddf3>
 800754a:	2d0f      	cmp	r5, #15
 800754c:	4682      	mov	sl, r0
 800754e:	468b      	mov	fp, r1
 8007550:	ddd5      	ble.n	80074fe <_strtod_l+0x3b6>
 8007552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007554:	1b2c      	subs	r4, r5, r4
 8007556:	441c      	add	r4, r3
 8007558:	2c00      	cmp	r4, #0
 800755a:	f340 8093 	ble.w	8007684 <_strtod_l+0x53c>
 800755e:	f014 030f 	ands.w	r3, r4, #15
 8007562:	d00a      	beq.n	800757a <_strtod_l+0x432>
 8007564:	495c      	ldr	r1, [pc, #368]	@ (80076d8 <_strtod_l+0x590>)
 8007566:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800756a:	4652      	mov	r2, sl
 800756c:	465b      	mov	r3, fp
 800756e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007572:	f7f9 f859 	bl	8000628 <__aeabi_dmul>
 8007576:	4682      	mov	sl, r0
 8007578:	468b      	mov	fp, r1
 800757a:	f034 040f 	bics.w	r4, r4, #15
 800757e:	d073      	beq.n	8007668 <_strtod_l+0x520>
 8007580:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007584:	dd49      	ble.n	800761a <_strtod_l+0x4d2>
 8007586:	2400      	movs	r4, #0
 8007588:	46a0      	mov	r8, r4
 800758a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800758c:	46a1      	mov	r9, r4
 800758e:	9a05      	ldr	r2, [sp, #20]
 8007590:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80076e0 <_strtod_l+0x598>
 8007594:	2322      	movs	r3, #34	@ 0x22
 8007596:	6013      	str	r3, [r2, #0]
 8007598:	f04f 0a00 	mov.w	sl, #0
 800759c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800759e:	2b00      	cmp	r3, #0
 80075a0:	f43f ae0b 	beq.w	80071ba <_strtod_l+0x72>
 80075a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80075a6:	9805      	ldr	r0, [sp, #20]
 80075a8:	f001 fc02 	bl	8008db0 <_Bfree>
 80075ac:	9805      	ldr	r0, [sp, #20]
 80075ae:	4649      	mov	r1, r9
 80075b0:	f001 fbfe 	bl	8008db0 <_Bfree>
 80075b4:	9805      	ldr	r0, [sp, #20]
 80075b6:	4641      	mov	r1, r8
 80075b8:	f001 fbfa 	bl	8008db0 <_Bfree>
 80075bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80075be:	9805      	ldr	r0, [sp, #20]
 80075c0:	f001 fbf6 	bl	8008db0 <_Bfree>
 80075c4:	9805      	ldr	r0, [sp, #20]
 80075c6:	4621      	mov	r1, r4
 80075c8:	f001 fbf2 	bl	8008db0 <_Bfree>
 80075cc:	e5f5      	b.n	80071ba <_strtod_l+0x72>
 80075ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075d0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80075d4:	4293      	cmp	r3, r2
 80075d6:	dbbc      	blt.n	8007552 <_strtod_l+0x40a>
 80075d8:	4c3f      	ldr	r4, [pc, #252]	@ (80076d8 <_strtod_l+0x590>)
 80075da:	f1c5 050f 	rsb	r5, r5, #15
 80075de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80075e2:	4652      	mov	r2, sl
 80075e4:	465b      	mov	r3, fp
 80075e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075ea:	f7f9 f81d 	bl	8000628 <__aeabi_dmul>
 80075ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075f0:	1b5d      	subs	r5, r3, r5
 80075f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80075f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80075fa:	e78f      	b.n	800751c <_strtod_l+0x3d4>
 80075fc:	3316      	adds	r3, #22
 80075fe:	dba8      	blt.n	8007552 <_strtod_l+0x40a>
 8007600:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007602:	eba3 0808 	sub.w	r8, r3, r8
 8007606:	4b34      	ldr	r3, [pc, #208]	@ (80076d8 <_strtod_l+0x590>)
 8007608:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800760c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007610:	4650      	mov	r0, sl
 8007612:	4659      	mov	r1, fp
 8007614:	f7f9 f932 	bl	800087c <__aeabi_ddiv>
 8007618:	e782      	b.n	8007520 <_strtod_l+0x3d8>
 800761a:	2300      	movs	r3, #0
 800761c:	4f2f      	ldr	r7, [pc, #188]	@ (80076dc <_strtod_l+0x594>)
 800761e:	1124      	asrs	r4, r4, #4
 8007620:	4650      	mov	r0, sl
 8007622:	4659      	mov	r1, fp
 8007624:	461e      	mov	r6, r3
 8007626:	2c01      	cmp	r4, #1
 8007628:	dc21      	bgt.n	800766e <_strtod_l+0x526>
 800762a:	b10b      	cbz	r3, 8007630 <_strtod_l+0x4e8>
 800762c:	4682      	mov	sl, r0
 800762e:	468b      	mov	fp, r1
 8007630:	492a      	ldr	r1, [pc, #168]	@ (80076dc <_strtod_l+0x594>)
 8007632:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007636:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800763a:	4652      	mov	r2, sl
 800763c:	465b      	mov	r3, fp
 800763e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007642:	f7f8 fff1 	bl	8000628 <__aeabi_dmul>
 8007646:	4b26      	ldr	r3, [pc, #152]	@ (80076e0 <_strtod_l+0x598>)
 8007648:	460a      	mov	r2, r1
 800764a:	400b      	ands	r3, r1
 800764c:	4925      	ldr	r1, [pc, #148]	@ (80076e4 <_strtod_l+0x59c>)
 800764e:	428b      	cmp	r3, r1
 8007650:	4682      	mov	sl, r0
 8007652:	d898      	bhi.n	8007586 <_strtod_l+0x43e>
 8007654:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007658:	428b      	cmp	r3, r1
 800765a:	bf86      	itte	hi
 800765c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80076e8 <_strtod_l+0x5a0>
 8007660:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8007664:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007668:	2300      	movs	r3, #0
 800766a:	9308      	str	r3, [sp, #32]
 800766c:	e076      	b.n	800775c <_strtod_l+0x614>
 800766e:	07e2      	lsls	r2, r4, #31
 8007670:	d504      	bpl.n	800767c <_strtod_l+0x534>
 8007672:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007676:	f7f8 ffd7 	bl	8000628 <__aeabi_dmul>
 800767a:	2301      	movs	r3, #1
 800767c:	3601      	adds	r6, #1
 800767e:	1064      	asrs	r4, r4, #1
 8007680:	3708      	adds	r7, #8
 8007682:	e7d0      	b.n	8007626 <_strtod_l+0x4de>
 8007684:	d0f0      	beq.n	8007668 <_strtod_l+0x520>
 8007686:	4264      	negs	r4, r4
 8007688:	f014 020f 	ands.w	r2, r4, #15
 800768c:	d00a      	beq.n	80076a4 <_strtod_l+0x55c>
 800768e:	4b12      	ldr	r3, [pc, #72]	@ (80076d8 <_strtod_l+0x590>)
 8007690:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007694:	4650      	mov	r0, sl
 8007696:	4659      	mov	r1, fp
 8007698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769c:	f7f9 f8ee 	bl	800087c <__aeabi_ddiv>
 80076a0:	4682      	mov	sl, r0
 80076a2:	468b      	mov	fp, r1
 80076a4:	1124      	asrs	r4, r4, #4
 80076a6:	d0df      	beq.n	8007668 <_strtod_l+0x520>
 80076a8:	2c1f      	cmp	r4, #31
 80076aa:	dd1f      	ble.n	80076ec <_strtod_l+0x5a4>
 80076ac:	2400      	movs	r4, #0
 80076ae:	46a0      	mov	r8, r4
 80076b0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80076b2:	46a1      	mov	r9, r4
 80076b4:	9a05      	ldr	r2, [sp, #20]
 80076b6:	2322      	movs	r3, #34	@ 0x22
 80076b8:	f04f 0a00 	mov.w	sl, #0
 80076bc:	f04f 0b00 	mov.w	fp, #0
 80076c0:	6013      	str	r3, [r2, #0]
 80076c2:	e76b      	b.n	800759c <_strtod_l+0x454>
 80076c4:	08009f97 	.word	0x08009f97
 80076c8:	0800a0f4 	.word	0x0800a0f4
 80076cc:	08009f8e 	.word	0x08009f8e
 80076d0:	08009f91 	.word	0x08009f91
 80076d4:	0800a0f1 	.word	0x0800a0f1
 80076d8:	0800a280 	.word	0x0800a280
 80076dc:	0800a258 	.word	0x0800a258
 80076e0:	7ff00000 	.word	0x7ff00000
 80076e4:	7ca00000 	.word	0x7ca00000
 80076e8:	7fefffff 	.word	0x7fefffff
 80076ec:	f014 0310 	ands.w	r3, r4, #16
 80076f0:	bf18      	it	ne
 80076f2:	236a      	movne	r3, #106	@ 0x6a
 80076f4:	4ea9      	ldr	r6, [pc, #676]	@ (800799c <_strtod_l+0x854>)
 80076f6:	9308      	str	r3, [sp, #32]
 80076f8:	4650      	mov	r0, sl
 80076fa:	4659      	mov	r1, fp
 80076fc:	2300      	movs	r3, #0
 80076fe:	07e7      	lsls	r7, r4, #31
 8007700:	d504      	bpl.n	800770c <_strtod_l+0x5c4>
 8007702:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007706:	f7f8 ff8f 	bl	8000628 <__aeabi_dmul>
 800770a:	2301      	movs	r3, #1
 800770c:	1064      	asrs	r4, r4, #1
 800770e:	f106 0608 	add.w	r6, r6, #8
 8007712:	d1f4      	bne.n	80076fe <_strtod_l+0x5b6>
 8007714:	b10b      	cbz	r3, 800771a <_strtod_l+0x5d2>
 8007716:	4682      	mov	sl, r0
 8007718:	468b      	mov	fp, r1
 800771a:	9b08      	ldr	r3, [sp, #32]
 800771c:	b1b3      	cbz	r3, 800774c <_strtod_l+0x604>
 800771e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007722:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007726:	2b00      	cmp	r3, #0
 8007728:	4659      	mov	r1, fp
 800772a:	dd0f      	ble.n	800774c <_strtod_l+0x604>
 800772c:	2b1f      	cmp	r3, #31
 800772e:	dd56      	ble.n	80077de <_strtod_l+0x696>
 8007730:	2b34      	cmp	r3, #52	@ 0x34
 8007732:	bfde      	ittt	le
 8007734:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8007738:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800773c:	4093      	lslle	r3, r2
 800773e:	f04f 0a00 	mov.w	sl, #0
 8007742:	bfcc      	ite	gt
 8007744:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007748:	ea03 0b01 	andle.w	fp, r3, r1
 800774c:	2200      	movs	r2, #0
 800774e:	2300      	movs	r3, #0
 8007750:	4650      	mov	r0, sl
 8007752:	4659      	mov	r1, fp
 8007754:	f7f9 f9d0 	bl	8000af8 <__aeabi_dcmpeq>
 8007758:	2800      	cmp	r0, #0
 800775a:	d1a7      	bne.n	80076ac <_strtod_l+0x564>
 800775c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800775e:	9300      	str	r3, [sp, #0]
 8007760:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007762:	9805      	ldr	r0, [sp, #20]
 8007764:	462b      	mov	r3, r5
 8007766:	464a      	mov	r2, r9
 8007768:	f001 fb8a 	bl	8008e80 <__s2b>
 800776c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800776e:	2800      	cmp	r0, #0
 8007770:	f43f af09 	beq.w	8007586 <_strtod_l+0x43e>
 8007774:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007776:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007778:	2a00      	cmp	r2, #0
 800777a:	eba3 0308 	sub.w	r3, r3, r8
 800777e:	bfa8      	it	ge
 8007780:	2300      	movge	r3, #0
 8007782:	9312      	str	r3, [sp, #72]	@ 0x48
 8007784:	2400      	movs	r4, #0
 8007786:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800778a:	9316      	str	r3, [sp, #88]	@ 0x58
 800778c:	46a0      	mov	r8, r4
 800778e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007790:	9805      	ldr	r0, [sp, #20]
 8007792:	6859      	ldr	r1, [r3, #4]
 8007794:	f001 facc 	bl	8008d30 <_Balloc>
 8007798:	4681      	mov	r9, r0
 800779a:	2800      	cmp	r0, #0
 800779c:	f43f aef7 	beq.w	800758e <_strtod_l+0x446>
 80077a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077a2:	691a      	ldr	r2, [r3, #16]
 80077a4:	3202      	adds	r2, #2
 80077a6:	f103 010c 	add.w	r1, r3, #12
 80077aa:	0092      	lsls	r2, r2, #2
 80077ac:	300c      	adds	r0, #12
 80077ae:	f000 fb20 	bl	8007df2 <memcpy>
 80077b2:	ec4b ab10 	vmov	d0, sl, fp
 80077b6:	9805      	ldr	r0, [sp, #20]
 80077b8:	aa1c      	add	r2, sp, #112	@ 0x70
 80077ba:	a91b      	add	r1, sp, #108	@ 0x6c
 80077bc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80077c0:	f001 fe92 	bl	80094e8 <__d2b>
 80077c4:	901a      	str	r0, [sp, #104]	@ 0x68
 80077c6:	2800      	cmp	r0, #0
 80077c8:	f43f aee1 	beq.w	800758e <_strtod_l+0x446>
 80077cc:	9805      	ldr	r0, [sp, #20]
 80077ce:	2101      	movs	r1, #1
 80077d0:	f001 fbec 	bl	8008fac <__i2b>
 80077d4:	4680      	mov	r8, r0
 80077d6:	b948      	cbnz	r0, 80077ec <_strtod_l+0x6a4>
 80077d8:	f04f 0800 	mov.w	r8, #0
 80077dc:	e6d7      	b.n	800758e <_strtod_l+0x446>
 80077de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80077e2:	fa02 f303 	lsl.w	r3, r2, r3
 80077e6:	ea03 0a0a 	and.w	sl, r3, sl
 80077ea:	e7af      	b.n	800774c <_strtod_l+0x604>
 80077ec:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80077ee:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80077f0:	2d00      	cmp	r5, #0
 80077f2:	bfab      	itete	ge
 80077f4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80077f6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80077f8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80077fa:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80077fc:	bfac      	ite	ge
 80077fe:	18ef      	addge	r7, r5, r3
 8007800:	1b5e      	sublt	r6, r3, r5
 8007802:	9b08      	ldr	r3, [sp, #32]
 8007804:	1aed      	subs	r5, r5, r3
 8007806:	4415      	add	r5, r2
 8007808:	4b65      	ldr	r3, [pc, #404]	@ (80079a0 <_strtod_l+0x858>)
 800780a:	3d01      	subs	r5, #1
 800780c:	429d      	cmp	r5, r3
 800780e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007812:	da50      	bge.n	80078b6 <_strtod_l+0x76e>
 8007814:	1b5b      	subs	r3, r3, r5
 8007816:	2b1f      	cmp	r3, #31
 8007818:	eba2 0203 	sub.w	r2, r2, r3
 800781c:	f04f 0101 	mov.w	r1, #1
 8007820:	dc3d      	bgt.n	800789e <_strtod_l+0x756>
 8007822:	fa01 f303 	lsl.w	r3, r1, r3
 8007826:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007828:	2300      	movs	r3, #0
 800782a:	9310      	str	r3, [sp, #64]	@ 0x40
 800782c:	18bd      	adds	r5, r7, r2
 800782e:	9b08      	ldr	r3, [sp, #32]
 8007830:	42af      	cmp	r7, r5
 8007832:	4416      	add	r6, r2
 8007834:	441e      	add	r6, r3
 8007836:	463b      	mov	r3, r7
 8007838:	bfa8      	it	ge
 800783a:	462b      	movge	r3, r5
 800783c:	42b3      	cmp	r3, r6
 800783e:	bfa8      	it	ge
 8007840:	4633      	movge	r3, r6
 8007842:	2b00      	cmp	r3, #0
 8007844:	bfc2      	ittt	gt
 8007846:	1aed      	subgt	r5, r5, r3
 8007848:	1af6      	subgt	r6, r6, r3
 800784a:	1aff      	subgt	r7, r7, r3
 800784c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800784e:	2b00      	cmp	r3, #0
 8007850:	dd16      	ble.n	8007880 <_strtod_l+0x738>
 8007852:	4641      	mov	r1, r8
 8007854:	9805      	ldr	r0, [sp, #20]
 8007856:	461a      	mov	r2, r3
 8007858:	f001 fc60 	bl	800911c <__pow5mult>
 800785c:	4680      	mov	r8, r0
 800785e:	2800      	cmp	r0, #0
 8007860:	d0ba      	beq.n	80077d8 <_strtod_l+0x690>
 8007862:	4601      	mov	r1, r0
 8007864:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007866:	9805      	ldr	r0, [sp, #20]
 8007868:	f001 fbb6 	bl	8008fd8 <__multiply>
 800786c:	900a      	str	r0, [sp, #40]	@ 0x28
 800786e:	2800      	cmp	r0, #0
 8007870:	f43f ae8d 	beq.w	800758e <_strtod_l+0x446>
 8007874:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007876:	9805      	ldr	r0, [sp, #20]
 8007878:	f001 fa9a 	bl	8008db0 <_Bfree>
 800787c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800787e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007880:	2d00      	cmp	r5, #0
 8007882:	dc1d      	bgt.n	80078c0 <_strtod_l+0x778>
 8007884:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007886:	2b00      	cmp	r3, #0
 8007888:	dd23      	ble.n	80078d2 <_strtod_l+0x78a>
 800788a:	4649      	mov	r1, r9
 800788c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800788e:	9805      	ldr	r0, [sp, #20]
 8007890:	f001 fc44 	bl	800911c <__pow5mult>
 8007894:	4681      	mov	r9, r0
 8007896:	b9e0      	cbnz	r0, 80078d2 <_strtod_l+0x78a>
 8007898:	f04f 0900 	mov.w	r9, #0
 800789c:	e677      	b.n	800758e <_strtod_l+0x446>
 800789e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80078a2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80078a6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80078aa:	35e2      	adds	r5, #226	@ 0xe2
 80078ac:	fa01 f305 	lsl.w	r3, r1, r5
 80078b0:	9310      	str	r3, [sp, #64]	@ 0x40
 80078b2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80078b4:	e7ba      	b.n	800782c <_strtod_l+0x6e4>
 80078b6:	2300      	movs	r3, #0
 80078b8:	9310      	str	r3, [sp, #64]	@ 0x40
 80078ba:	2301      	movs	r3, #1
 80078bc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80078be:	e7b5      	b.n	800782c <_strtod_l+0x6e4>
 80078c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80078c2:	9805      	ldr	r0, [sp, #20]
 80078c4:	462a      	mov	r2, r5
 80078c6:	f001 fc83 	bl	80091d0 <__lshift>
 80078ca:	901a      	str	r0, [sp, #104]	@ 0x68
 80078cc:	2800      	cmp	r0, #0
 80078ce:	d1d9      	bne.n	8007884 <_strtod_l+0x73c>
 80078d0:	e65d      	b.n	800758e <_strtod_l+0x446>
 80078d2:	2e00      	cmp	r6, #0
 80078d4:	dd07      	ble.n	80078e6 <_strtod_l+0x79e>
 80078d6:	4649      	mov	r1, r9
 80078d8:	9805      	ldr	r0, [sp, #20]
 80078da:	4632      	mov	r2, r6
 80078dc:	f001 fc78 	bl	80091d0 <__lshift>
 80078e0:	4681      	mov	r9, r0
 80078e2:	2800      	cmp	r0, #0
 80078e4:	d0d8      	beq.n	8007898 <_strtod_l+0x750>
 80078e6:	2f00      	cmp	r7, #0
 80078e8:	dd08      	ble.n	80078fc <_strtod_l+0x7b4>
 80078ea:	4641      	mov	r1, r8
 80078ec:	9805      	ldr	r0, [sp, #20]
 80078ee:	463a      	mov	r2, r7
 80078f0:	f001 fc6e 	bl	80091d0 <__lshift>
 80078f4:	4680      	mov	r8, r0
 80078f6:	2800      	cmp	r0, #0
 80078f8:	f43f ae49 	beq.w	800758e <_strtod_l+0x446>
 80078fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80078fe:	9805      	ldr	r0, [sp, #20]
 8007900:	464a      	mov	r2, r9
 8007902:	f001 fced 	bl	80092e0 <__mdiff>
 8007906:	4604      	mov	r4, r0
 8007908:	2800      	cmp	r0, #0
 800790a:	f43f ae40 	beq.w	800758e <_strtod_l+0x446>
 800790e:	68c3      	ldr	r3, [r0, #12]
 8007910:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007912:	2300      	movs	r3, #0
 8007914:	60c3      	str	r3, [r0, #12]
 8007916:	4641      	mov	r1, r8
 8007918:	f001 fcc6 	bl	80092a8 <__mcmp>
 800791c:	2800      	cmp	r0, #0
 800791e:	da45      	bge.n	80079ac <_strtod_l+0x864>
 8007920:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007922:	ea53 030a 	orrs.w	r3, r3, sl
 8007926:	d16b      	bne.n	8007a00 <_strtod_l+0x8b8>
 8007928:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800792c:	2b00      	cmp	r3, #0
 800792e:	d167      	bne.n	8007a00 <_strtod_l+0x8b8>
 8007930:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007934:	0d1b      	lsrs	r3, r3, #20
 8007936:	051b      	lsls	r3, r3, #20
 8007938:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800793c:	d960      	bls.n	8007a00 <_strtod_l+0x8b8>
 800793e:	6963      	ldr	r3, [r4, #20]
 8007940:	b913      	cbnz	r3, 8007948 <_strtod_l+0x800>
 8007942:	6923      	ldr	r3, [r4, #16]
 8007944:	2b01      	cmp	r3, #1
 8007946:	dd5b      	ble.n	8007a00 <_strtod_l+0x8b8>
 8007948:	4621      	mov	r1, r4
 800794a:	2201      	movs	r2, #1
 800794c:	9805      	ldr	r0, [sp, #20]
 800794e:	f001 fc3f 	bl	80091d0 <__lshift>
 8007952:	4641      	mov	r1, r8
 8007954:	4604      	mov	r4, r0
 8007956:	f001 fca7 	bl	80092a8 <__mcmp>
 800795a:	2800      	cmp	r0, #0
 800795c:	dd50      	ble.n	8007a00 <_strtod_l+0x8b8>
 800795e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007962:	9a08      	ldr	r2, [sp, #32]
 8007964:	0d1b      	lsrs	r3, r3, #20
 8007966:	051b      	lsls	r3, r3, #20
 8007968:	2a00      	cmp	r2, #0
 800796a:	d06a      	beq.n	8007a42 <_strtod_l+0x8fa>
 800796c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007970:	d867      	bhi.n	8007a42 <_strtod_l+0x8fa>
 8007972:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007976:	f67f ae9d 	bls.w	80076b4 <_strtod_l+0x56c>
 800797a:	4b0a      	ldr	r3, [pc, #40]	@ (80079a4 <_strtod_l+0x85c>)
 800797c:	4650      	mov	r0, sl
 800797e:	4659      	mov	r1, fp
 8007980:	2200      	movs	r2, #0
 8007982:	f7f8 fe51 	bl	8000628 <__aeabi_dmul>
 8007986:	4b08      	ldr	r3, [pc, #32]	@ (80079a8 <_strtod_l+0x860>)
 8007988:	400b      	ands	r3, r1
 800798a:	4682      	mov	sl, r0
 800798c:	468b      	mov	fp, r1
 800798e:	2b00      	cmp	r3, #0
 8007990:	f47f ae08 	bne.w	80075a4 <_strtod_l+0x45c>
 8007994:	9a05      	ldr	r2, [sp, #20]
 8007996:	2322      	movs	r3, #34	@ 0x22
 8007998:	6013      	str	r3, [r2, #0]
 800799a:	e603      	b.n	80075a4 <_strtod_l+0x45c>
 800799c:	0800a120 	.word	0x0800a120
 80079a0:	fffffc02 	.word	0xfffffc02
 80079a4:	39500000 	.word	0x39500000
 80079a8:	7ff00000 	.word	0x7ff00000
 80079ac:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80079b0:	d165      	bne.n	8007a7e <_strtod_l+0x936>
 80079b2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80079b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80079b8:	b35a      	cbz	r2, 8007a12 <_strtod_l+0x8ca>
 80079ba:	4a9f      	ldr	r2, [pc, #636]	@ (8007c38 <_strtod_l+0xaf0>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d12b      	bne.n	8007a18 <_strtod_l+0x8d0>
 80079c0:	9b08      	ldr	r3, [sp, #32]
 80079c2:	4651      	mov	r1, sl
 80079c4:	b303      	cbz	r3, 8007a08 <_strtod_l+0x8c0>
 80079c6:	4b9d      	ldr	r3, [pc, #628]	@ (8007c3c <_strtod_l+0xaf4>)
 80079c8:	465a      	mov	r2, fp
 80079ca:	4013      	ands	r3, r2
 80079cc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80079d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80079d4:	d81b      	bhi.n	8007a0e <_strtod_l+0x8c6>
 80079d6:	0d1b      	lsrs	r3, r3, #20
 80079d8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80079dc:	fa02 f303 	lsl.w	r3, r2, r3
 80079e0:	4299      	cmp	r1, r3
 80079e2:	d119      	bne.n	8007a18 <_strtod_l+0x8d0>
 80079e4:	4b96      	ldr	r3, [pc, #600]	@ (8007c40 <_strtod_l+0xaf8>)
 80079e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d102      	bne.n	80079f2 <_strtod_l+0x8aa>
 80079ec:	3101      	adds	r1, #1
 80079ee:	f43f adce 	beq.w	800758e <_strtod_l+0x446>
 80079f2:	4b92      	ldr	r3, [pc, #584]	@ (8007c3c <_strtod_l+0xaf4>)
 80079f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80079f6:	401a      	ands	r2, r3
 80079f8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80079fc:	f04f 0a00 	mov.w	sl, #0
 8007a00:	9b08      	ldr	r3, [sp, #32]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d1b9      	bne.n	800797a <_strtod_l+0x832>
 8007a06:	e5cd      	b.n	80075a4 <_strtod_l+0x45c>
 8007a08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007a0c:	e7e8      	b.n	80079e0 <_strtod_l+0x898>
 8007a0e:	4613      	mov	r3, r2
 8007a10:	e7e6      	b.n	80079e0 <_strtod_l+0x898>
 8007a12:	ea53 030a 	orrs.w	r3, r3, sl
 8007a16:	d0a2      	beq.n	800795e <_strtod_l+0x816>
 8007a18:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007a1a:	b1db      	cbz	r3, 8007a54 <_strtod_l+0x90c>
 8007a1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a1e:	4213      	tst	r3, r2
 8007a20:	d0ee      	beq.n	8007a00 <_strtod_l+0x8b8>
 8007a22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a24:	9a08      	ldr	r2, [sp, #32]
 8007a26:	4650      	mov	r0, sl
 8007a28:	4659      	mov	r1, fp
 8007a2a:	b1bb      	cbz	r3, 8007a5c <_strtod_l+0x914>
 8007a2c:	f7ff fb6c 	bl	8007108 <sulp>
 8007a30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a34:	ec53 2b10 	vmov	r2, r3, d0
 8007a38:	f7f8 fc40 	bl	80002bc <__adddf3>
 8007a3c:	4682      	mov	sl, r0
 8007a3e:	468b      	mov	fp, r1
 8007a40:	e7de      	b.n	8007a00 <_strtod_l+0x8b8>
 8007a42:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007a46:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007a4a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007a4e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007a52:	e7d5      	b.n	8007a00 <_strtod_l+0x8b8>
 8007a54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007a56:	ea13 0f0a 	tst.w	r3, sl
 8007a5a:	e7e1      	b.n	8007a20 <_strtod_l+0x8d8>
 8007a5c:	f7ff fb54 	bl	8007108 <sulp>
 8007a60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a64:	ec53 2b10 	vmov	r2, r3, d0
 8007a68:	f7f8 fc26 	bl	80002b8 <__aeabi_dsub>
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	2300      	movs	r3, #0
 8007a70:	4682      	mov	sl, r0
 8007a72:	468b      	mov	fp, r1
 8007a74:	f7f9 f840 	bl	8000af8 <__aeabi_dcmpeq>
 8007a78:	2800      	cmp	r0, #0
 8007a7a:	d0c1      	beq.n	8007a00 <_strtod_l+0x8b8>
 8007a7c:	e61a      	b.n	80076b4 <_strtod_l+0x56c>
 8007a7e:	4641      	mov	r1, r8
 8007a80:	4620      	mov	r0, r4
 8007a82:	f001 fd89 	bl	8009598 <__ratio>
 8007a86:	ec57 6b10 	vmov	r6, r7, d0
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007a90:	4630      	mov	r0, r6
 8007a92:	4639      	mov	r1, r7
 8007a94:	f7f9 f844 	bl	8000b20 <__aeabi_dcmple>
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	d06f      	beq.n	8007b7c <_strtod_l+0xa34>
 8007a9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d17a      	bne.n	8007b98 <_strtod_l+0xa50>
 8007aa2:	f1ba 0f00 	cmp.w	sl, #0
 8007aa6:	d158      	bne.n	8007b5a <_strtod_l+0xa12>
 8007aa8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007aaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d15a      	bne.n	8007b68 <_strtod_l+0xa20>
 8007ab2:	4b64      	ldr	r3, [pc, #400]	@ (8007c44 <_strtod_l+0xafc>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	4630      	mov	r0, r6
 8007ab8:	4639      	mov	r1, r7
 8007aba:	f7f9 f827 	bl	8000b0c <__aeabi_dcmplt>
 8007abe:	2800      	cmp	r0, #0
 8007ac0:	d159      	bne.n	8007b76 <_strtod_l+0xa2e>
 8007ac2:	4630      	mov	r0, r6
 8007ac4:	4639      	mov	r1, r7
 8007ac6:	4b60      	ldr	r3, [pc, #384]	@ (8007c48 <_strtod_l+0xb00>)
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f7f8 fdad 	bl	8000628 <__aeabi_dmul>
 8007ace:	4606      	mov	r6, r0
 8007ad0:	460f      	mov	r7, r1
 8007ad2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007ad6:	9606      	str	r6, [sp, #24]
 8007ad8:	9307      	str	r3, [sp, #28]
 8007ada:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ade:	4d57      	ldr	r5, [pc, #348]	@ (8007c3c <_strtod_l+0xaf4>)
 8007ae0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007ae4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ae6:	401d      	ands	r5, r3
 8007ae8:	4b58      	ldr	r3, [pc, #352]	@ (8007c4c <_strtod_l+0xb04>)
 8007aea:	429d      	cmp	r5, r3
 8007aec:	f040 80b2 	bne.w	8007c54 <_strtod_l+0xb0c>
 8007af0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007af2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007af6:	ec4b ab10 	vmov	d0, sl, fp
 8007afa:	f001 fc85 	bl	8009408 <__ulp>
 8007afe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b02:	ec51 0b10 	vmov	r0, r1, d0
 8007b06:	f7f8 fd8f 	bl	8000628 <__aeabi_dmul>
 8007b0a:	4652      	mov	r2, sl
 8007b0c:	465b      	mov	r3, fp
 8007b0e:	f7f8 fbd5 	bl	80002bc <__adddf3>
 8007b12:	460b      	mov	r3, r1
 8007b14:	4949      	ldr	r1, [pc, #292]	@ (8007c3c <_strtod_l+0xaf4>)
 8007b16:	4a4e      	ldr	r2, [pc, #312]	@ (8007c50 <_strtod_l+0xb08>)
 8007b18:	4019      	ands	r1, r3
 8007b1a:	4291      	cmp	r1, r2
 8007b1c:	4682      	mov	sl, r0
 8007b1e:	d942      	bls.n	8007ba6 <_strtod_l+0xa5e>
 8007b20:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007b22:	4b47      	ldr	r3, [pc, #284]	@ (8007c40 <_strtod_l+0xaf8>)
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d103      	bne.n	8007b30 <_strtod_l+0x9e8>
 8007b28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	f43f ad2f 	beq.w	800758e <_strtod_l+0x446>
 8007b30:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007c40 <_strtod_l+0xaf8>
 8007b34:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007b38:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007b3a:	9805      	ldr	r0, [sp, #20]
 8007b3c:	f001 f938 	bl	8008db0 <_Bfree>
 8007b40:	9805      	ldr	r0, [sp, #20]
 8007b42:	4649      	mov	r1, r9
 8007b44:	f001 f934 	bl	8008db0 <_Bfree>
 8007b48:	9805      	ldr	r0, [sp, #20]
 8007b4a:	4641      	mov	r1, r8
 8007b4c:	f001 f930 	bl	8008db0 <_Bfree>
 8007b50:	9805      	ldr	r0, [sp, #20]
 8007b52:	4621      	mov	r1, r4
 8007b54:	f001 f92c 	bl	8008db0 <_Bfree>
 8007b58:	e619      	b.n	800778e <_strtod_l+0x646>
 8007b5a:	f1ba 0f01 	cmp.w	sl, #1
 8007b5e:	d103      	bne.n	8007b68 <_strtod_l+0xa20>
 8007b60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f43f ada6 	beq.w	80076b4 <_strtod_l+0x56c>
 8007b68:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007c18 <_strtod_l+0xad0>
 8007b6c:	4f35      	ldr	r7, [pc, #212]	@ (8007c44 <_strtod_l+0xafc>)
 8007b6e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007b72:	2600      	movs	r6, #0
 8007b74:	e7b1      	b.n	8007ada <_strtod_l+0x992>
 8007b76:	4f34      	ldr	r7, [pc, #208]	@ (8007c48 <_strtod_l+0xb00>)
 8007b78:	2600      	movs	r6, #0
 8007b7a:	e7aa      	b.n	8007ad2 <_strtod_l+0x98a>
 8007b7c:	4b32      	ldr	r3, [pc, #200]	@ (8007c48 <_strtod_l+0xb00>)
 8007b7e:	4630      	mov	r0, r6
 8007b80:	4639      	mov	r1, r7
 8007b82:	2200      	movs	r2, #0
 8007b84:	f7f8 fd50 	bl	8000628 <__aeabi_dmul>
 8007b88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b8a:	4606      	mov	r6, r0
 8007b8c:	460f      	mov	r7, r1
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d09f      	beq.n	8007ad2 <_strtod_l+0x98a>
 8007b92:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007b96:	e7a0      	b.n	8007ada <_strtod_l+0x992>
 8007b98:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007c20 <_strtod_l+0xad8>
 8007b9c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007ba0:	ec57 6b17 	vmov	r6, r7, d7
 8007ba4:	e799      	b.n	8007ada <_strtod_l+0x992>
 8007ba6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007baa:	9b08      	ldr	r3, [sp, #32]
 8007bac:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d1c1      	bne.n	8007b38 <_strtod_l+0x9f0>
 8007bb4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007bb8:	0d1b      	lsrs	r3, r3, #20
 8007bba:	051b      	lsls	r3, r3, #20
 8007bbc:	429d      	cmp	r5, r3
 8007bbe:	d1bb      	bne.n	8007b38 <_strtod_l+0x9f0>
 8007bc0:	4630      	mov	r0, r6
 8007bc2:	4639      	mov	r1, r7
 8007bc4:	f7f9 f87a 	bl	8000cbc <__aeabi_d2lz>
 8007bc8:	f7f8 fd00 	bl	80005cc <__aeabi_l2d>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	460b      	mov	r3, r1
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	4639      	mov	r1, r7
 8007bd4:	f7f8 fb70 	bl	80002b8 <__aeabi_dsub>
 8007bd8:	460b      	mov	r3, r1
 8007bda:	4602      	mov	r2, r0
 8007bdc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007be0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007be4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007be6:	ea46 060a 	orr.w	r6, r6, sl
 8007bea:	431e      	orrs	r6, r3
 8007bec:	d06f      	beq.n	8007cce <_strtod_l+0xb86>
 8007bee:	a30e      	add	r3, pc, #56	@ (adr r3, 8007c28 <_strtod_l+0xae0>)
 8007bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf4:	f7f8 ff8a 	bl	8000b0c <__aeabi_dcmplt>
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	f47f acd3 	bne.w	80075a4 <_strtod_l+0x45c>
 8007bfe:	a30c      	add	r3, pc, #48	@ (adr r3, 8007c30 <_strtod_l+0xae8>)
 8007c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c08:	f7f8 ff9e 	bl	8000b48 <__aeabi_dcmpgt>
 8007c0c:	2800      	cmp	r0, #0
 8007c0e:	d093      	beq.n	8007b38 <_strtod_l+0x9f0>
 8007c10:	e4c8      	b.n	80075a4 <_strtod_l+0x45c>
 8007c12:	bf00      	nop
 8007c14:	f3af 8000 	nop.w
 8007c18:	00000000 	.word	0x00000000
 8007c1c:	bff00000 	.word	0xbff00000
 8007c20:	00000000 	.word	0x00000000
 8007c24:	3ff00000 	.word	0x3ff00000
 8007c28:	94a03595 	.word	0x94a03595
 8007c2c:	3fdfffff 	.word	0x3fdfffff
 8007c30:	35afe535 	.word	0x35afe535
 8007c34:	3fe00000 	.word	0x3fe00000
 8007c38:	000fffff 	.word	0x000fffff
 8007c3c:	7ff00000 	.word	0x7ff00000
 8007c40:	7fefffff 	.word	0x7fefffff
 8007c44:	3ff00000 	.word	0x3ff00000
 8007c48:	3fe00000 	.word	0x3fe00000
 8007c4c:	7fe00000 	.word	0x7fe00000
 8007c50:	7c9fffff 	.word	0x7c9fffff
 8007c54:	9b08      	ldr	r3, [sp, #32]
 8007c56:	b323      	cbz	r3, 8007ca2 <_strtod_l+0xb5a>
 8007c58:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007c5c:	d821      	bhi.n	8007ca2 <_strtod_l+0xb5a>
 8007c5e:	a328      	add	r3, pc, #160	@ (adr r3, 8007d00 <_strtod_l+0xbb8>)
 8007c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c64:	4630      	mov	r0, r6
 8007c66:	4639      	mov	r1, r7
 8007c68:	f7f8 ff5a 	bl	8000b20 <__aeabi_dcmple>
 8007c6c:	b1a0      	cbz	r0, 8007c98 <_strtod_l+0xb50>
 8007c6e:	4639      	mov	r1, r7
 8007c70:	4630      	mov	r0, r6
 8007c72:	f7f8 ff9b 	bl	8000bac <__aeabi_d2uiz>
 8007c76:	2801      	cmp	r0, #1
 8007c78:	bf38      	it	cc
 8007c7a:	2001      	movcc	r0, #1
 8007c7c:	f7f8 fc5a 	bl	8000534 <__aeabi_ui2d>
 8007c80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c82:	4606      	mov	r6, r0
 8007c84:	460f      	mov	r7, r1
 8007c86:	b9fb      	cbnz	r3, 8007cc8 <_strtod_l+0xb80>
 8007c88:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007c8c:	9014      	str	r0, [sp, #80]	@ 0x50
 8007c8e:	9315      	str	r3, [sp, #84]	@ 0x54
 8007c90:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007c94:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007c98:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007c9a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007c9e:	1b5b      	subs	r3, r3, r5
 8007ca0:	9311      	str	r3, [sp, #68]	@ 0x44
 8007ca2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007ca6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007caa:	f001 fbad 	bl	8009408 <__ulp>
 8007cae:	4650      	mov	r0, sl
 8007cb0:	ec53 2b10 	vmov	r2, r3, d0
 8007cb4:	4659      	mov	r1, fp
 8007cb6:	f7f8 fcb7 	bl	8000628 <__aeabi_dmul>
 8007cba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007cbe:	f7f8 fafd 	bl	80002bc <__adddf3>
 8007cc2:	4682      	mov	sl, r0
 8007cc4:	468b      	mov	fp, r1
 8007cc6:	e770      	b.n	8007baa <_strtod_l+0xa62>
 8007cc8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007ccc:	e7e0      	b.n	8007c90 <_strtod_l+0xb48>
 8007cce:	a30e      	add	r3, pc, #56	@ (adr r3, 8007d08 <_strtod_l+0xbc0>)
 8007cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd4:	f7f8 ff1a 	bl	8000b0c <__aeabi_dcmplt>
 8007cd8:	e798      	b.n	8007c0c <_strtod_l+0xac4>
 8007cda:	2300      	movs	r3, #0
 8007cdc:	930e      	str	r3, [sp, #56]	@ 0x38
 8007cde:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007ce0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ce2:	6013      	str	r3, [r2, #0]
 8007ce4:	f7ff ba6d 	b.w	80071c2 <_strtod_l+0x7a>
 8007ce8:	2a65      	cmp	r2, #101	@ 0x65
 8007cea:	f43f ab68 	beq.w	80073be <_strtod_l+0x276>
 8007cee:	2a45      	cmp	r2, #69	@ 0x45
 8007cf0:	f43f ab65 	beq.w	80073be <_strtod_l+0x276>
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	f7ff bba0 	b.w	800743a <_strtod_l+0x2f2>
 8007cfa:	bf00      	nop
 8007cfc:	f3af 8000 	nop.w
 8007d00:	ffc00000 	.word	0xffc00000
 8007d04:	41dfffff 	.word	0x41dfffff
 8007d08:	94a03595 	.word	0x94a03595
 8007d0c:	3fcfffff 	.word	0x3fcfffff

08007d10 <strtod>:
 8007d10:	460a      	mov	r2, r1
 8007d12:	4601      	mov	r1, r0
 8007d14:	4802      	ldr	r0, [pc, #8]	@ (8007d20 <strtod+0x10>)
 8007d16:	4b03      	ldr	r3, [pc, #12]	@ (8007d24 <strtod+0x14>)
 8007d18:	6800      	ldr	r0, [r0, #0]
 8007d1a:	f7ff ba15 	b.w	8007148 <_strtod_l>
 8007d1e:	bf00      	nop
 8007d20:	200001dc 	.word	0x200001dc
 8007d24:	20000070 	.word	0x20000070

08007d28 <_fwalk_sglue>:
 8007d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d2c:	4607      	mov	r7, r0
 8007d2e:	4688      	mov	r8, r1
 8007d30:	4614      	mov	r4, r2
 8007d32:	2600      	movs	r6, #0
 8007d34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d38:	f1b9 0901 	subs.w	r9, r9, #1
 8007d3c:	d505      	bpl.n	8007d4a <_fwalk_sglue+0x22>
 8007d3e:	6824      	ldr	r4, [r4, #0]
 8007d40:	2c00      	cmp	r4, #0
 8007d42:	d1f7      	bne.n	8007d34 <_fwalk_sglue+0xc>
 8007d44:	4630      	mov	r0, r6
 8007d46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d4a:	89ab      	ldrh	r3, [r5, #12]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d907      	bls.n	8007d60 <_fwalk_sglue+0x38>
 8007d50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d54:	3301      	adds	r3, #1
 8007d56:	d003      	beq.n	8007d60 <_fwalk_sglue+0x38>
 8007d58:	4629      	mov	r1, r5
 8007d5a:	4638      	mov	r0, r7
 8007d5c:	47c0      	blx	r8
 8007d5e:	4306      	orrs	r6, r0
 8007d60:	3568      	adds	r5, #104	@ 0x68
 8007d62:	e7e9      	b.n	8007d38 <_fwalk_sglue+0x10>

08007d64 <memset>:
 8007d64:	4402      	add	r2, r0
 8007d66:	4603      	mov	r3, r0
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d100      	bne.n	8007d6e <memset+0xa>
 8007d6c:	4770      	bx	lr
 8007d6e:	f803 1b01 	strb.w	r1, [r3], #1
 8007d72:	e7f9      	b.n	8007d68 <memset+0x4>

08007d74 <strncmp>:
 8007d74:	b510      	push	{r4, lr}
 8007d76:	b16a      	cbz	r2, 8007d94 <strncmp+0x20>
 8007d78:	3901      	subs	r1, #1
 8007d7a:	1884      	adds	r4, r0, r2
 8007d7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d80:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d103      	bne.n	8007d90 <strncmp+0x1c>
 8007d88:	42a0      	cmp	r0, r4
 8007d8a:	d001      	beq.n	8007d90 <strncmp+0x1c>
 8007d8c:	2a00      	cmp	r2, #0
 8007d8e:	d1f5      	bne.n	8007d7c <strncmp+0x8>
 8007d90:	1ad0      	subs	r0, r2, r3
 8007d92:	bd10      	pop	{r4, pc}
 8007d94:	4610      	mov	r0, r2
 8007d96:	e7fc      	b.n	8007d92 <strncmp+0x1e>

08007d98 <__errno>:
 8007d98:	4b01      	ldr	r3, [pc, #4]	@ (8007da0 <__errno+0x8>)
 8007d9a:	6818      	ldr	r0, [r3, #0]
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	200001dc 	.word	0x200001dc

08007da4 <__libc_init_array>:
 8007da4:	b570      	push	{r4, r5, r6, lr}
 8007da6:	4d0d      	ldr	r5, [pc, #52]	@ (8007ddc <__libc_init_array+0x38>)
 8007da8:	4c0d      	ldr	r4, [pc, #52]	@ (8007de0 <__libc_init_array+0x3c>)
 8007daa:	1b64      	subs	r4, r4, r5
 8007dac:	10a4      	asrs	r4, r4, #2
 8007dae:	2600      	movs	r6, #0
 8007db0:	42a6      	cmp	r6, r4
 8007db2:	d109      	bne.n	8007dc8 <__libc_init_array+0x24>
 8007db4:	4d0b      	ldr	r5, [pc, #44]	@ (8007de4 <__libc_init_array+0x40>)
 8007db6:	4c0c      	ldr	r4, [pc, #48]	@ (8007de8 <__libc_init_array+0x44>)
 8007db8:	f002 f894 	bl	8009ee4 <_init>
 8007dbc:	1b64      	subs	r4, r4, r5
 8007dbe:	10a4      	asrs	r4, r4, #2
 8007dc0:	2600      	movs	r6, #0
 8007dc2:	42a6      	cmp	r6, r4
 8007dc4:	d105      	bne.n	8007dd2 <__libc_init_array+0x2e>
 8007dc6:	bd70      	pop	{r4, r5, r6, pc}
 8007dc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dcc:	4798      	blx	r3
 8007dce:	3601      	adds	r6, #1
 8007dd0:	e7ee      	b.n	8007db0 <__libc_init_array+0xc>
 8007dd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dd6:	4798      	blx	r3
 8007dd8:	3601      	adds	r6, #1
 8007dda:	e7f2      	b.n	8007dc2 <__libc_init_array+0x1e>
 8007ddc:	0800a350 	.word	0x0800a350
 8007de0:	0800a350 	.word	0x0800a350
 8007de4:	0800a350 	.word	0x0800a350
 8007de8:	0800a354 	.word	0x0800a354

08007dec <__retarget_lock_init_recursive>:
 8007dec:	4770      	bx	lr

08007dee <__retarget_lock_acquire_recursive>:
 8007dee:	4770      	bx	lr

08007df0 <__retarget_lock_release_recursive>:
 8007df0:	4770      	bx	lr

08007df2 <memcpy>:
 8007df2:	440a      	add	r2, r1
 8007df4:	4291      	cmp	r1, r2
 8007df6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007dfa:	d100      	bne.n	8007dfe <memcpy+0xc>
 8007dfc:	4770      	bx	lr
 8007dfe:	b510      	push	{r4, lr}
 8007e00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e08:	4291      	cmp	r1, r2
 8007e0a:	d1f9      	bne.n	8007e00 <memcpy+0xe>
 8007e0c:	bd10      	pop	{r4, pc}
	...

08007e10 <nan>:
 8007e10:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007e18 <nan+0x8>
 8007e14:	4770      	bx	lr
 8007e16:	bf00      	nop
 8007e18:	00000000 	.word	0x00000000
 8007e1c:	7ff80000 	.word	0x7ff80000

08007e20 <rshift>:
 8007e20:	6903      	ldr	r3, [r0, #16]
 8007e22:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007e26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e2a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007e2e:	f100 0414 	add.w	r4, r0, #20
 8007e32:	dd45      	ble.n	8007ec0 <rshift+0xa0>
 8007e34:	f011 011f 	ands.w	r1, r1, #31
 8007e38:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007e3c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007e40:	d10c      	bne.n	8007e5c <rshift+0x3c>
 8007e42:	f100 0710 	add.w	r7, r0, #16
 8007e46:	4629      	mov	r1, r5
 8007e48:	42b1      	cmp	r1, r6
 8007e4a:	d334      	bcc.n	8007eb6 <rshift+0x96>
 8007e4c:	1a9b      	subs	r3, r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	1eea      	subs	r2, r5, #3
 8007e52:	4296      	cmp	r6, r2
 8007e54:	bf38      	it	cc
 8007e56:	2300      	movcc	r3, #0
 8007e58:	4423      	add	r3, r4
 8007e5a:	e015      	b.n	8007e88 <rshift+0x68>
 8007e5c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007e60:	f1c1 0820 	rsb	r8, r1, #32
 8007e64:	40cf      	lsrs	r7, r1
 8007e66:	f105 0e04 	add.w	lr, r5, #4
 8007e6a:	46a1      	mov	r9, r4
 8007e6c:	4576      	cmp	r6, lr
 8007e6e:	46f4      	mov	ip, lr
 8007e70:	d815      	bhi.n	8007e9e <rshift+0x7e>
 8007e72:	1a9a      	subs	r2, r3, r2
 8007e74:	0092      	lsls	r2, r2, #2
 8007e76:	3a04      	subs	r2, #4
 8007e78:	3501      	adds	r5, #1
 8007e7a:	42ae      	cmp	r6, r5
 8007e7c:	bf38      	it	cc
 8007e7e:	2200      	movcc	r2, #0
 8007e80:	18a3      	adds	r3, r4, r2
 8007e82:	50a7      	str	r7, [r4, r2]
 8007e84:	b107      	cbz	r7, 8007e88 <rshift+0x68>
 8007e86:	3304      	adds	r3, #4
 8007e88:	1b1a      	subs	r2, r3, r4
 8007e8a:	42a3      	cmp	r3, r4
 8007e8c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007e90:	bf08      	it	eq
 8007e92:	2300      	moveq	r3, #0
 8007e94:	6102      	str	r2, [r0, #16]
 8007e96:	bf08      	it	eq
 8007e98:	6143      	streq	r3, [r0, #20]
 8007e9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e9e:	f8dc c000 	ldr.w	ip, [ip]
 8007ea2:	fa0c fc08 	lsl.w	ip, ip, r8
 8007ea6:	ea4c 0707 	orr.w	r7, ip, r7
 8007eaa:	f849 7b04 	str.w	r7, [r9], #4
 8007eae:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007eb2:	40cf      	lsrs	r7, r1
 8007eb4:	e7da      	b.n	8007e6c <rshift+0x4c>
 8007eb6:	f851 cb04 	ldr.w	ip, [r1], #4
 8007eba:	f847 cf04 	str.w	ip, [r7, #4]!
 8007ebe:	e7c3      	b.n	8007e48 <rshift+0x28>
 8007ec0:	4623      	mov	r3, r4
 8007ec2:	e7e1      	b.n	8007e88 <rshift+0x68>

08007ec4 <__hexdig_fun>:
 8007ec4:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007ec8:	2b09      	cmp	r3, #9
 8007eca:	d802      	bhi.n	8007ed2 <__hexdig_fun+0xe>
 8007ecc:	3820      	subs	r0, #32
 8007ece:	b2c0      	uxtb	r0, r0
 8007ed0:	4770      	bx	lr
 8007ed2:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007ed6:	2b05      	cmp	r3, #5
 8007ed8:	d801      	bhi.n	8007ede <__hexdig_fun+0x1a>
 8007eda:	3847      	subs	r0, #71	@ 0x47
 8007edc:	e7f7      	b.n	8007ece <__hexdig_fun+0xa>
 8007ede:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007ee2:	2b05      	cmp	r3, #5
 8007ee4:	d801      	bhi.n	8007eea <__hexdig_fun+0x26>
 8007ee6:	3827      	subs	r0, #39	@ 0x27
 8007ee8:	e7f1      	b.n	8007ece <__hexdig_fun+0xa>
 8007eea:	2000      	movs	r0, #0
 8007eec:	4770      	bx	lr
	...

08007ef0 <__gethex>:
 8007ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef4:	b085      	sub	sp, #20
 8007ef6:	468a      	mov	sl, r1
 8007ef8:	9302      	str	r3, [sp, #8]
 8007efa:	680b      	ldr	r3, [r1, #0]
 8007efc:	9001      	str	r0, [sp, #4]
 8007efe:	4690      	mov	r8, r2
 8007f00:	1c9c      	adds	r4, r3, #2
 8007f02:	46a1      	mov	r9, r4
 8007f04:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007f08:	2830      	cmp	r0, #48	@ 0x30
 8007f0a:	d0fa      	beq.n	8007f02 <__gethex+0x12>
 8007f0c:	eba9 0303 	sub.w	r3, r9, r3
 8007f10:	f1a3 0b02 	sub.w	fp, r3, #2
 8007f14:	f7ff ffd6 	bl	8007ec4 <__hexdig_fun>
 8007f18:	4605      	mov	r5, r0
 8007f1a:	2800      	cmp	r0, #0
 8007f1c:	d168      	bne.n	8007ff0 <__gethex+0x100>
 8007f1e:	49a0      	ldr	r1, [pc, #640]	@ (80081a0 <__gethex+0x2b0>)
 8007f20:	2201      	movs	r2, #1
 8007f22:	4648      	mov	r0, r9
 8007f24:	f7ff ff26 	bl	8007d74 <strncmp>
 8007f28:	4607      	mov	r7, r0
 8007f2a:	2800      	cmp	r0, #0
 8007f2c:	d167      	bne.n	8007ffe <__gethex+0x10e>
 8007f2e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007f32:	4626      	mov	r6, r4
 8007f34:	f7ff ffc6 	bl	8007ec4 <__hexdig_fun>
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	d062      	beq.n	8008002 <__gethex+0x112>
 8007f3c:	4623      	mov	r3, r4
 8007f3e:	7818      	ldrb	r0, [r3, #0]
 8007f40:	2830      	cmp	r0, #48	@ 0x30
 8007f42:	4699      	mov	r9, r3
 8007f44:	f103 0301 	add.w	r3, r3, #1
 8007f48:	d0f9      	beq.n	8007f3e <__gethex+0x4e>
 8007f4a:	f7ff ffbb 	bl	8007ec4 <__hexdig_fun>
 8007f4e:	fab0 f580 	clz	r5, r0
 8007f52:	096d      	lsrs	r5, r5, #5
 8007f54:	f04f 0b01 	mov.w	fp, #1
 8007f58:	464a      	mov	r2, r9
 8007f5a:	4616      	mov	r6, r2
 8007f5c:	3201      	adds	r2, #1
 8007f5e:	7830      	ldrb	r0, [r6, #0]
 8007f60:	f7ff ffb0 	bl	8007ec4 <__hexdig_fun>
 8007f64:	2800      	cmp	r0, #0
 8007f66:	d1f8      	bne.n	8007f5a <__gethex+0x6a>
 8007f68:	498d      	ldr	r1, [pc, #564]	@ (80081a0 <__gethex+0x2b0>)
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	4630      	mov	r0, r6
 8007f6e:	f7ff ff01 	bl	8007d74 <strncmp>
 8007f72:	2800      	cmp	r0, #0
 8007f74:	d13f      	bne.n	8007ff6 <__gethex+0x106>
 8007f76:	b944      	cbnz	r4, 8007f8a <__gethex+0x9a>
 8007f78:	1c74      	adds	r4, r6, #1
 8007f7a:	4622      	mov	r2, r4
 8007f7c:	4616      	mov	r6, r2
 8007f7e:	3201      	adds	r2, #1
 8007f80:	7830      	ldrb	r0, [r6, #0]
 8007f82:	f7ff ff9f 	bl	8007ec4 <__hexdig_fun>
 8007f86:	2800      	cmp	r0, #0
 8007f88:	d1f8      	bne.n	8007f7c <__gethex+0x8c>
 8007f8a:	1ba4      	subs	r4, r4, r6
 8007f8c:	00a7      	lsls	r7, r4, #2
 8007f8e:	7833      	ldrb	r3, [r6, #0]
 8007f90:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007f94:	2b50      	cmp	r3, #80	@ 0x50
 8007f96:	d13e      	bne.n	8008016 <__gethex+0x126>
 8007f98:	7873      	ldrb	r3, [r6, #1]
 8007f9a:	2b2b      	cmp	r3, #43	@ 0x2b
 8007f9c:	d033      	beq.n	8008006 <__gethex+0x116>
 8007f9e:	2b2d      	cmp	r3, #45	@ 0x2d
 8007fa0:	d034      	beq.n	800800c <__gethex+0x11c>
 8007fa2:	1c71      	adds	r1, r6, #1
 8007fa4:	2400      	movs	r4, #0
 8007fa6:	7808      	ldrb	r0, [r1, #0]
 8007fa8:	f7ff ff8c 	bl	8007ec4 <__hexdig_fun>
 8007fac:	1e43      	subs	r3, r0, #1
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	2b18      	cmp	r3, #24
 8007fb2:	d830      	bhi.n	8008016 <__gethex+0x126>
 8007fb4:	f1a0 0210 	sub.w	r2, r0, #16
 8007fb8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007fbc:	f7ff ff82 	bl	8007ec4 <__hexdig_fun>
 8007fc0:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8007fc4:	fa5f fc8c 	uxtb.w	ip, ip
 8007fc8:	f1bc 0f18 	cmp.w	ip, #24
 8007fcc:	f04f 030a 	mov.w	r3, #10
 8007fd0:	d91e      	bls.n	8008010 <__gethex+0x120>
 8007fd2:	b104      	cbz	r4, 8007fd6 <__gethex+0xe6>
 8007fd4:	4252      	negs	r2, r2
 8007fd6:	4417      	add	r7, r2
 8007fd8:	f8ca 1000 	str.w	r1, [sl]
 8007fdc:	b1ed      	cbz	r5, 800801a <__gethex+0x12a>
 8007fde:	f1bb 0f00 	cmp.w	fp, #0
 8007fe2:	bf0c      	ite	eq
 8007fe4:	2506      	moveq	r5, #6
 8007fe6:	2500      	movne	r5, #0
 8007fe8:	4628      	mov	r0, r5
 8007fea:	b005      	add	sp, #20
 8007fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ff0:	2500      	movs	r5, #0
 8007ff2:	462c      	mov	r4, r5
 8007ff4:	e7b0      	b.n	8007f58 <__gethex+0x68>
 8007ff6:	2c00      	cmp	r4, #0
 8007ff8:	d1c7      	bne.n	8007f8a <__gethex+0x9a>
 8007ffa:	4627      	mov	r7, r4
 8007ffc:	e7c7      	b.n	8007f8e <__gethex+0x9e>
 8007ffe:	464e      	mov	r6, r9
 8008000:	462f      	mov	r7, r5
 8008002:	2501      	movs	r5, #1
 8008004:	e7c3      	b.n	8007f8e <__gethex+0x9e>
 8008006:	2400      	movs	r4, #0
 8008008:	1cb1      	adds	r1, r6, #2
 800800a:	e7cc      	b.n	8007fa6 <__gethex+0xb6>
 800800c:	2401      	movs	r4, #1
 800800e:	e7fb      	b.n	8008008 <__gethex+0x118>
 8008010:	fb03 0002 	mla	r0, r3, r2, r0
 8008014:	e7ce      	b.n	8007fb4 <__gethex+0xc4>
 8008016:	4631      	mov	r1, r6
 8008018:	e7de      	b.n	8007fd8 <__gethex+0xe8>
 800801a:	eba6 0309 	sub.w	r3, r6, r9
 800801e:	3b01      	subs	r3, #1
 8008020:	4629      	mov	r1, r5
 8008022:	2b07      	cmp	r3, #7
 8008024:	dc0a      	bgt.n	800803c <__gethex+0x14c>
 8008026:	9801      	ldr	r0, [sp, #4]
 8008028:	f000 fe82 	bl	8008d30 <_Balloc>
 800802c:	4604      	mov	r4, r0
 800802e:	b940      	cbnz	r0, 8008042 <__gethex+0x152>
 8008030:	4b5c      	ldr	r3, [pc, #368]	@ (80081a4 <__gethex+0x2b4>)
 8008032:	4602      	mov	r2, r0
 8008034:	21e4      	movs	r1, #228	@ 0xe4
 8008036:	485c      	ldr	r0, [pc, #368]	@ (80081a8 <__gethex+0x2b8>)
 8008038:	f001 fc12 	bl	8009860 <__assert_func>
 800803c:	3101      	adds	r1, #1
 800803e:	105b      	asrs	r3, r3, #1
 8008040:	e7ef      	b.n	8008022 <__gethex+0x132>
 8008042:	f100 0a14 	add.w	sl, r0, #20
 8008046:	2300      	movs	r3, #0
 8008048:	4655      	mov	r5, sl
 800804a:	469b      	mov	fp, r3
 800804c:	45b1      	cmp	r9, r6
 800804e:	d337      	bcc.n	80080c0 <__gethex+0x1d0>
 8008050:	f845 bb04 	str.w	fp, [r5], #4
 8008054:	eba5 050a 	sub.w	r5, r5, sl
 8008058:	10ad      	asrs	r5, r5, #2
 800805a:	6125      	str	r5, [r4, #16]
 800805c:	4658      	mov	r0, fp
 800805e:	f000 ff59 	bl	8008f14 <__hi0bits>
 8008062:	016d      	lsls	r5, r5, #5
 8008064:	f8d8 6000 	ldr.w	r6, [r8]
 8008068:	1a2d      	subs	r5, r5, r0
 800806a:	42b5      	cmp	r5, r6
 800806c:	dd54      	ble.n	8008118 <__gethex+0x228>
 800806e:	1bad      	subs	r5, r5, r6
 8008070:	4629      	mov	r1, r5
 8008072:	4620      	mov	r0, r4
 8008074:	f001 fae5 	bl	8009642 <__any_on>
 8008078:	4681      	mov	r9, r0
 800807a:	b178      	cbz	r0, 800809c <__gethex+0x1ac>
 800807c:	1e6b      	subs	r3, r5, #1
 800807e:	1159      	asrs	r1, r3, #5
 8008080:	f003 021f 	and.w	r2, r3, #31
 8008084:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008088:	f04f 0901 	mov.w	r9, #1
 800808c:	fa09 f202 	lsl.w	r2, r9, r2
 8008090:	420a      	tst	r2, r1
 8008092:	d003      	beq.n	800809c <__gethex+0x1ac>
 8008094:	454b      	cmp	r3, r9
 8008096:	dc36      	bgt.n	8008106 <__gethex+0x216>
 8008098:	f04f 0902 	mov.w	r9, #2
 800809c:	4629      	mov	r1, r5
 800809e:	4620      	mov	r0, r4
 80080a0:	f7ff febe 	bl	8007e20 <rshift>
 80080a4:	442f      	add	r7, r5
 80080a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80080aa:	42bb      	cmp	r3, r7
 80080ac:	da42      	bge.n	8008134 <__gethex+0x244>
 80080ae:	9801      	ldr	r0, [sp, #4]
 80080b0:	4621      	mov	r1, r4
 80080b2:	f000 fe7d 	bl	8008db0 <_Bfree>
 80080b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80080b8:	2300      	movs	r3, #0
 80080ba:	6013      	str	r3, [r2, #0]
 80080bc:	25a3      	movs	r5, #163	@ 0xa3
 80080be:	e793      	b.n	8007fe8 <__gethex+0xf8>
 80080c0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80080c4:	2a2e      	cmp	r2, #46	@ 0x2e
 80080c6:	d012      	beq.n	80080ee <__gethex+0x1fe>
 80080c8:	2b20      	cmp	r3, #32
 80080ca:	d104      	bne.n	80080d6 <__gethex+0x1e6>
 80080cc:	f845 bb04 	str.w	fp, [r5], #4
 80080d0:	f04f 0b00 	mov.w	fp, #0
 80080d4:	465b      	mov	r3, fp
 80080d6:	7830      	ldrb	r0, [r6, #0]
 80080d8:	9303      	str	r3, [sp, #12]
 80080da:	f7ff fef3 	bl	8007ec4 <__hexdig_fun>
 80080de:	9b03      	ldr	r3, [sp, #12]
 80080e0:	f000 000f 	and.w	r0, r0, #15
 80080e4:	4098      	lsls	r0, r3
 80080e6:	ea4b 0b00 	orr.w	fp, fp, r0
 80080ea:	3304      	adds	r3, #4
 80080ec:	e7ae      	b.n	800804c <__gethex+0x15c>
 80080ee:	45b1      	cmp	r9, r6
 80080f0:	d8ea      	bhi.n	80080c8 <__gethex+0x1d8>
 80080f2:	492b      	ldr	r1, [pc, #172]	@ (80081a0 <__gethex+0x2b0>)
 80080f4:	9303      	str	r3, [sp, #12]
 80080f6:	2201      	movs	r2, #1
 80080f8:	4630      	mov	r0, r6
 80080fa:	f7ff fe3b 	bl	8007d74 <strncmp>
 80080fe:	9b03      	ldr	r3, [sp, #12]
 8008100:	2800      	cmp	r0, #0
 8008102:	d1e1      	bne.n	80080c8 <__gethex+0x1d8>
 8008104:	e7a2      	b.n	800804c <__gethex+0x15c>
 8008106:	1ea9      	subs	r1, r5, #2
 8008108:	4620      	mov	r0, r4
 800810a:	f001 fa9a 	bl	8009642 <__any_on>
 800810e:	2800      	cmp	r0, #0
 8008110:	d0c2      	beq.n	8008098 <__gethex+0x1a8>
 8008112:	f04f 0903 	mov.w	r9, #3
 8008116:	e7c1      	b.n	800809c <__gethex+0x1ac>
 8008118:	da09      	bge.n	800812e <__gethex+0x23e>
 800811a:	1b75      	subs	r5, r6, r5
 800811c:	4621      	mov	r1, r4
 800811e:	9801      	ldr	r0, [sp, #4]
 8008120:	462a      	mov	r2, r5
 8008122:	f001 f855 	bl	80091d0 <__lshift>
 8008126:	1b7f      	subs	r7, r7, r5
 8008128:	4604      	mov	r4, r0
 800812a:	f100 0a14 	add.w	sl, r0, #20
 800812e:	f04f 0900 	mov.w	r9, #0
 8008132:	e7b8      	b.n	80080a6 <__gethex+0x1b6>
 8008134:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008138:	42bd      	cmp	r5, r7
 800813a:	dd6f      	ble.n	800821c <__gethex+0x32c>
 800813c:	1bed      	subs	r5, r5, r7
 800813e:	42ae      	cmp	r6, r5
 8008140:	dc34      	bgt.n	80081ac <__gethex+0x2bc>
 8008142:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008146:	2b02      	cmp	r3, #2
 8008148:	d022      	beq.n	8008190 <__gethex+0x2a0>
 800814a:	2b03      	cmp	r3, #3
 800814c:	d024      	beq.n	8008198 <__gethex+0x2a8>
 800814e:	2b01      	cmp	r3, #1
 8008150:	d115      	bne.n	800817e <__gethex+0x28e>
 8008152:	42ae      	cmp	r6, r5
 8008154:	d113      	bne.n	800817e <__gethex+0x28e>
 8008156:	2e01      	cmp	r6, #1
 8008158:	d10b      	bne.n	8008172 <__gethex+0x282>
 800815a:	9a02      	ldr	r2, [sp, #8]
 800815c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008160:	6013      	str	r3, [r2, #0]
 8008162:	2301      	movs	r3, #1
 8008164:	6123      	str	r3, [r4, #16]
 8008166:	f8ca 3000 	str.w	r3, [sl]
 800816a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800816c:	2562      	movs	r5, #98	@ 0x62
 800816e:	601c      	str	r4, [r3, #0]
 8008170:	e73a      	b.n	8007fe8 <__gethex+0xf8>
 8008172:	1e71      	subs	r1, r6, #1
 8008174:	4620      	mov	r0, r4
 8008176:	f001 fa64 	bl	8009642 <__any_on>
 800817a:	2800      	cmp	r0, #0
 800817c:	d1ed      	bne.n	800815a <__gethex+0x26a>
 800817e:	9801      	ldr	r0, [sp, #4]
 8008180:	4621      	mov	r1, r4
 8008182:	f000 fe15 	bl	8008db0 <_Bfree>
 8008186:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008188:	2300      	movs	r3, #0
 800818a:	6013      	str	r3, [r2, #0]
 800818c:	2550      	movs	r5, #80	@ 0x50
 800818e:	e72b      	b.n	8007fe8 <__gethex+0xf8>
 8008190:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1f3      	bne.n	800817e <__gethex+0x28e>
 8008196:	e7e0      	b.n	800815a <__gethex+0x26a>
 8008198:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1dd      	bne.n	800815a <__gethex+0x26a>
 800819e:	e7ee      	b.n	800817e <__gethex+0x28e>
 80081a0:	08009f8c 	.word	0x08009f8c
 80081a4:	08009fa2 	.word	0x08009fa2
 80081a8:	08009fb3 	.word	0x08009fb3
 80081ac:	1e6f      	subs	r7, r5, #1
 80081ae:	f1b9 0f00 	cmp.w	r9, #0
 80081b2:	d130      	bne.n	8008216 <__gethex+0x326>
 80081b4:	b127      	cbz	r7, 80081c0 <__gethex+0x2d0>
 80081b6:	4639      	mov	r1, r7
 80081b8:	4620      	mov	r0, r4
 80081ba:	f001 fa42 	bl	8009642 <__any_on>
 80081be:	4681      	mov	r9, r0
 80081c0:	117a      	asrs	r2, r7, #5
 80081c2:	2301      	movs	r3, #1
 80081c4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80081c8:	f007 071f 	and.w	r7, r7, #31
 80081cc:	40bb      	lsls	r3, r7
 80081ce:	4213      	tst	r3, r2
 80081d0:	4629      	mov	r1, r5
 80081d2:	4620      	mov	r0, r4
 80081d4:	bf18      	it	ne
 80081d6:	f049 0902 	orrne.w	r9, r9, #2
 80081da:	f7ff fe21 	bl	8007e20 <rshift>
 80081de:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80081e2:	1b76      	subs	r6, r6, r5
 80081e4:	2502      	movs	r5, #2
 80081e6:	f1b9 0f00 	cmp.w	r9, #0
 80081ea:	d047      	beq.n	800827c <__gethex+0x38c>
 80081ec:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80081f0:	2b02      	cmp	r3, #2
 80081f2:	d015      	beq.n	8008220 <__gethex+0x330>
 80081f4:	2b03      	cmp	r3, #3
 80081f6:	d017      	beq.n	8008228 <__gethex+0x338>
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d109      	bne.n	8008210 <__gethex+0x320>
 80081fc:	f019 0f02 	tst.w	r9, #2
 8008200:	d006      	beq.n	8008210 <__gethex+0x320>
 8008202:	f8da 3000 	ldr.w	r3, [sl]
 8008206:	ea49 0903 	orr.w	r9, r9, r3
 800820a:	f019 0f01 	tst.w	r9, #1
 800820e:	d10e      	bne.n	800822e <__gethex+0x33e>
 8008210:	f045 0510 	orr.w	r5, r5, #16
 8008214:	e032      	b.n	800827c <__gethex+0x38c>
 8008216:	f04f 0901 	mov.w	r9, #1
 800821a:	e7d1      	b.n	80081c0 <__gethex+0x2d0>
 800821c:	2501      	movs	r5, #1
 800821e:	e7e2      	b.n	80081e6 <__gethex+0x2f6>
 8008220:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008222:	f1c3 0301 	rsb	r3, r3, #1
 8008226:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008228:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800822a:	2b00      	cmp	r3, #0
 800822c:	d0f0      	beq.n	8008210 <__gethex+0x320>
 800822e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008232:	f104 0314 	add.w	r3, r4, #20
 8008236:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800823a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800823e:	f04f 0c00 	mov.w	ip, #0
 8008242:	4618      	mov	r0, r3
 8008244:	f853 2b04 	ldr.w	r2, [r3], #4
 8008248:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800824c:	d01b      	beq.n	8008286 <__gethex+0x396>
 800824e:	3201      	adds	r2, #1
 8008250:	6002      	str	r2, [r0, #0]
 8008252:	2d02      	cmp	r5, #2
 8008254:	f104 0314 	add.w	r3, r4, #20
 8008258:	d13c      	bne.n	80082d4 <__gethex+0x3e4>
 800825a:	f8d8 2000 	ldr.w	r2, [r8]
 800825e:	3a01      	subs	r2, #1
 8008260:	42b2      	cmp	r2, r6
 8008262:	d109      	bne.n	8008278 <__gethex+0x388>
 8008264:	1171      	asrs	r1, r6, #5
 8008266:	2201      	movs	r2, #1
 8008268:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800826c:	f006 061f 	and.w	r6, r6, #31
 8008270:	fa02 f606 	lsl.w	r6, r2, r6
 8008274:	421e      	tst	r6, r3
 8008276:	d13a      	bne.n	80082ee <__gethex+0x3fe>
 8008278:	f045 0520 	orr.w	r5, r5, #32
 800827c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800827e:	601c      	str	r4, [r3, #0]
 8008280:	9b02      	ldr	r3, [sp, #8]
 8008282:	601f      	str	r7, [r3, #0]
 8008284:	e6b0      	b.n	8007fe8 <__gethex+0xf8>
 8008286:	4299      	cmp	r1, r3
 8008288:	f843 cc04 	str.w	ip, [r3, #-4]
 800828c:	d8d9      	bhi.n	8008242 <__gethex+0x352>
 800828e:	68a3      	ldr	r3, [r4, #8]
 8008290:	459b      	cmp	fp, r3
 8008292:	db17      	blt.n	80082c4 <__gethex+0x3d4>
 8008294:	6861      	ldr	r1, [r4, #4]
 8008296:	9801      	ldr	r0, [sp, #4]
 8008298:	3101      	adds	r1, #1
 800829a:	f000 fd49 	bl	8008d30 <_Balloc>
 800829e:	4681      	mov	r9, r0
 80082a0:	b918      	cbnz	r0, 80082aa <__gethex+0x3ba>
 80082a2:	4b1a      	ldr	r3, [pc, #104]	@ (800830c <__gethex+0x41c>)
 80082a4:	4602      	mov	r2, r0
 80082a6:	2184      	movs	r1, #132	@ 0x84
 80082a8:	e6c5      	b.n	8008036 <__gethex+0x146>
 80082aa:	6922      	ldr	r2, [r4, #16]
 80082ac:	3202      	adds	r2, #2
 80082ae:	f104 010c 	add.w	r1, r4, #12
 80082b2:	0092      	lsls	r2, r2, #2
 80082b4:	300c      	adds	r0, #12
 80082b6:	f7ff fd9c 	bl	8007df2 <memcpy>
 80082ba:	4621      	mov	r1, r4
 80082bc:	9801      	ldr	r0, [sp, #4]
 80082be:	f000 fd77 	bl	8008db0 <_Bfree>
 80082c2:	464c      	mov	r4, r9
 80082c4:	6923      	ldr	r3, [r4, #16]
 80082c6:	1c5a      	adds	r2, r3, #1
 80082c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80082cc:	6122      	str	r2, [r4, #16]
 80082ce:	2201      	movs	r2, #1
 80082d0:	615a      	str	r2, [r3, #20]
 80082d2:	e7be      	b.n	8008252 <__gethex+0x362>
 80082d4:	6922      	ldr	r2, [r4, #16]
 80082d6:	455a      	cmp	r2, fp
 80082d8:	dd0b      	ble.n	80082f2 <__gethex+0x402>
 80082da:	2101      	movs	r1, #1
 80082dc:	4620      	mov	r0, r4
 80082de:	f7ff fd9f 	bl	8007e20 <rshift>
 80082e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80082e6:	3701      	adds	r7, #1
 80082e8:	42bb      	cmp	r3, r7
 80082ea:	f6ff aee0 	blt.w	80080ae <__gethex+0x1be>
 80082ee:	2501      	movs	r5, #1
 80082f0:	e7c2      	b.n	8008278 <__gethex+0x388>
 80082f2:	f016 061f 	ands.w	r6, r6, #31
 80082f6:	d0fa      	beq.n	80082ee <__gethex+0x3fe>
 80082f8:	4453      	add	r3, sl
 80082fa:	f1c6 0620 	rsb	r6, r6, #32
 80082fe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008302:	f000 fe07 	bl	8008f14 <__hi0bits>
 8008306:	42b0      	cmp	r0, r6
 8008308:	dbe7      	blt.n	80082da <__gethex+0x3ea>
 800830a:	e7f0      	b.n	80082ee <__gethex+0x3fe>
 800830c:	08009fa2 	.word	0x08009fa2

08008310 <L_shift>:
 8008310:	f1c2 0208 	rsb	r2, r2, #8
 8008314:	0092      	lsls	r2, r2, #2
 8008316:	b570      	push	{r4, r5, r6, lr}
 8008318:	f1c2 0620 	rsb	r6, r2, #32
 800831c:	6843      	ldr	r3, [r0, #4]
 800831e:	6804      	ldr	r4, [r0, #0]
 8008320:	fa03 f506 	lsl.w	r5, r3, r6
 8008324:	432c      	orrs	r4, r5
 8008326:	40d3      	lsrs	r3, r2
 8008328:	6004      	str	r4, [r0, #0]
 800832a:	f840 3f04 	str.w	r3, [r0, #4]!
 800832e:	4288      	cmp	r0, r1
 8008330:	d3f4      	bcc.n	800831c <L_shift+0xc>
 8008332:	bd70      	pop	{r4, r5, r6, pc}

08008334 <__match>:
 8008334:	b530      	push	{r4, r5, lr}
 8008336:	6803      	ldr	r3, [r0, #0]
 8008338:	3301      	adds	r3, #1
 800833a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800833e:	b914      	cbnz	r4, 8008346 <__match+0x12>
 8008340:	6003      	str	r3, [r0, #0]
 8008342:	2001      	movs	r0, #1
 8008344:	bd30      	pop	{r4, r5, pc}
 8008346:	f813 2b01 	ldrb.w	r2, [r3], #1
 800834a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800834e:	2d19      	cmp	r5, #25
 8008350:	bf98      	it	ls
 8008352:	3220      	addls	r2, #32
 8008354:	42a2      	cmp	r2, r4
 8008356:	d0f0      	beq.n	800833a <__match+0x6>
 8008358:	2000      	movs	r0, #0
 800835a:	e7f3      	b.n	8008344 <__match+0x10>

0800835c <__hexnan>:
 800835c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008360:	680b      	ldr	r3, [r1, #0]
 8008362:	6801      	ldr	r1, [r0, #0]
 8008364:	115e      	asrs	r6, r3, #5
 8008366:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800836a:	f013 031f 	ands.w	r3, r3, #31
 800836e:	b087      	sub	sp, #28
 8008370:	bf18      	it	ne
 8008372:	3604      	addne	r6, #4
 8008374:	2500      	movs	r5, #0
 8008376:	1f37      	subs	r7, r6, #4
 8008378:	4682      	mov	sl, r0
 800837a:	4690      	mov	r8, r2
 800837c:	9301      	str	r3, [sp, #4]
 800837e:	f846 5c04 	str.w	r5, [r6, #-4]
 8008382:	46b9      	mov	r9, r7
 8008384:	463c      	mov	r4, r7
 8008386:	9502      	str	r5, [sp, #8]
 8008388:	46ab      	mov	fp, r5
 800838a:	784a      	ldrb	r2, [r1, #1]
 800838c:	1c4b      	adds	r3, r1, #1
 800838e:	9303      	str	r3, [sp, #12]
 8008390:	b342      	cbz	r2, 80083e4 <__hexnan+0x88>
 8008392:	4610      	mov	r0, r2
 8008394:	9105      	str	r1, [sp, #20]
 8008396:	9204      	str	r2, [sp, #16]
 8008398:	f7ff fd94 	bl	8007ec4 <__hexdig_fun>
 800839c:	2800      	cmp	r0, #0
 800839e:	d151      	bne.n	8008444 <__hexnan+0xe8>
 80083a0:	9a04      	ldr	r2, [sp, #16]
 80083a2:	9905      	ldr	r1, [sp, #20]
 80083a4:	2a20      	cmp	r2, #32
 80083a6:	d818      	bhi.n	80083da <__hexnan+0x7e>
 80083a8:	9b02      	ldr	r3, [sp, #8]
 80083aa:	459b      	cmp	fp, r3
 80083ac:	dd13      	ble.n	80083d6 <__hexnan+0x7a>
 80083ae:	454c      	cmp	r4, r9
 80083b0:	d206      	bcs.n	80083c0 <__hexnan+0x64>
 80083b2:	2d07      	cmp	r5, #7
 80083b4:	dc04      	bgt.n	80083c0 <__hexnan+0x64>
 80083b6:	462a      	mov	r2, r5
 80083b8:	4649      	mov	r1, r9
 80083ba:	4620      	mov	r0, r4
 80083bc:	f7ff ffa8 	bl	8008310 <L_shift>
 80083c0:	4544      	cmp	r4, r8
 80083c2:	d952      	bls.n	800846a <__hexnan+0x10e>
 80083c4:	2300      	movs	r3, #0
 80083c6:	f1a4 0904 	sub.w	r9, r4, #4
 80083ca:	f844 3c04 	str.w	r3, [r4, #-4]
 80083ce:	f8cd b008 	str.w	fp, [sp, #8]
 80083d2:	464c      	mov	r4, r9
 80083d4:	461d      	mov	r5, r3
 80083d6:	9903      	ldr	r1, [sp, #12]
 80083d8:	e7d7      	b.n	800838a <__hexnan+0x2e>
 80083da:	2a29      	cmp	r2, #41	@ 0x29
 80083dc:	d157      	bne.n	800848e <__hexnan+0x132>
 80083de:	3102      	adds	r1, #2
 80083e0:	f8ca 1000 	str.w	r1, [sl]
 80083e4:	f1bb 0f00 	cmp.w	fp, #0
 80083e8:	d051      	beq.n	800848e <__hexnan+0x132>
 80083ea:	454c      	cmp	r4, r9
 80083ec:	d206      	bcs.n	80083fc <__hexnan+0xa0>
 80083ee:	2d07      	cmp	r5, #7
 80083f0:	dc04      	bgt.n	80083fc <__hexnan+0xa0>
 80083f2:	462a      	mov	r2, r5
 80083f4:	4649      	mov	r1, r9
 80083f6:	4620      	mov	r0, r4
 80083f8:	f7ff ff8a 	bl	8008310 <L_shift>
 80083fc:	4544      	cmp	r4, r8
 80083fe:	d936      	bls.n	800846e <__hexnan+0x112>
 8008400:	f1a8 0204 	sub.w	r2, r8, #4
 8008404:	4623      	mov	r3, r4
 8008406:	f853 1b04 	ldr.w	r1, [r3], #4
 800840a:	f842 1f04 	str.w	r1, [r2, #4]!
 800840e:	429f      	cmp	r7, r3
 8008410:	d2f9      	bcs.n	8008406 <__hexnan+0xaa>
 8008412:	1b3b      	subs	r3, r7, r4
 8008414:	f023 0303 	bic.w	r3, r3, #3
 8008418:	3304      	adds	r3, #4
 800841a:	3401      	adds	r4, #1
 800841c:	3e03      	subs	r6, #3
 800841e:	42b4      	cmp	r4, r6
 8008420:	bf88      	it	hi
 8008422:	2304      	movhi	r3, #4
 8008424:	4443      	add	r3, r8
 8008426:	2200      	movs	r2, #0
 8008428:	f843 2b04 	str.w	r2, [r3], #4
 800842c:	429f      	cmp	r7, r3
 800842e:	d2fb      	bcs.n	8008428 <__hexnan+0xcc>
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	b91b      	cbnz	r3, 800843c <__hexnan+0xe0>
 8008434:	4547      	cmp	r7, r8
 8008436:	d128      	bne.n	800848a <__hexnan+0x12e>
 8008438:	2301      	movs	r3, #1
 800843a:	603b      	str	r3, [r7, #0]
 800843c:	2005      	movs	r0, #5
 800843e:	b007      	add	sp, #28
 8008440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008444:	3501      	adds	r5, #1
 8008446:	2d08      	cmp	r5, #8
 8008448:	f10b 0b01 	add.w	fp, fp, #1
 800844c:	dd06      	ble.n	800845c <__hexnan+0x100>
 800844e:	4544      	cmp	r4, r8
 8008450:	d9c1      	bls.n	80083d6 <__hexnan+0x7a>
 8008452:	2300      	movs	r3, #0
 8008454:	f844 3c04 	str.w	r3, [r4, #-4]
 8008458:	2501      	movs	r5, #1
 800845a:	3c04      	subs	r4, #4
 800845c:	6822      	ldr	r2, [r4, #0]
 800845e:	f000 000f 	and.w	r0, r0, #15
 8008462:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008466:	6020      	str	r0, [r4, #0]
 8008468:	e7b5      	b.n	80083d6 <__hexnan+0x7a>
 800846a:	2508      	movs	r5, #8
 800846c:	e7b3      	b.n	80083d6 <__hexnan+0x7a>
 800846e:	9b01      	ldr	r3, [sp, #4]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d0dd      	beq.n	8008430 <__hexnan+0xd4>
 8008474:	f1c3 0320 	rsb	r3, r3, #32
 8008478:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800847c:	40da      	lsrs	r2, r3
 800847e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008482:	4013      	ands	r3, r2
 8008484:	f846 3c04 	str.w	r3, [r6, #-4]
 8008488:	e7d2      	b.n	8008430 <__hexnan+0xd4>
 800848a:	3f04      	subs	r7, #4
 800848c:	e7d0      	b.n	8008430 <__hexnan+0xd4>
 800848e:	2004      	movs	r0, #4
 8008490:	e7d5      	b.n	800843e <__hexnan+0xe2>

08008492 <__ssputs_r>:
 8008492:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008496:	688e      	ldr	r6, [r1, #8]
 8008498:	461f      	mov	r7, r3
 800849a:	42be      	cmp	r6, r7
 800849c:	680b      	ldr	r3, [r1, #0]
 800849e:	4682      	mov	sl, r0
 80084a0:	460c      	mov	r4, r1
 80084a2:	4690      	mov	r8, r2
 80084a4:	d82d      	bhi.n	8008502 <__ssputs_r+0x70>
 80084a6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80084aa:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80084ae:	d026      	beq.n	80084fe <__ssputs_r+0x6c>
 80084b0:	6965      	ldr	r5, [r4, #20]
 80084b2:	6909      	ldr	r1, [r1, #16]
 80084b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084b8:	eba3 0901 	sub.w	r9, r3, r1
 80084bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80084c0:	1c7b      	adds	r3, r7, #1
 80084c2:	444b      	add	r3, r9
 80084c4:	106d      	asrs	r5, r5, #1
 80084c6:	429d      	cmp	r5, r3
 80084c8:	bf38      	it	cc
 80084ca:	461d      	movcc	r5, r3
 80084cc:	0553      	lsls	r3, r2, #21
 80084ce:	d527      	bpl.n	8008520 <__ssputs_r+0x8e>
 80084d0:	4629      	mov	r1, r5
 80084d2:	f000 f957 	bl	8008784 <_malloc_r>
 80084d6:	4606      	mov	r6, r0
 80084d8:	b360      	cbz	r0, 8008534 <__ssputs_r+0xa2>
 80084da:	6921      	ldr	r1, [r4, #16]
 80084dc:	464a      	mov	r2, r9
 80084de:	f7ff fc88 	bl	8007df2 <memcpy>
 80084e2:	89a3      	ldrh	r3, [r4, #12]
 80084e4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80084e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084ec:	81a3      	strh	r3, [r4, #12]
 80084ee:	6126      	str	r6, [r4, #16]
 80084f0:	6165      	str	r5, [r4, #20]
 80084f2:	444e      	add	r6, r9
 80084f4:	eba5 0509 	sub.w	r5, r5, r9
 80084f8:	6026      	str	r6, [r4, #0]
 80084fa:	60a5      	str	r5, [r4, #8]
 80084fc:	463e      	mov	r6, r7
 80084fe:	42be      	cmp	r6, r7
 8008500:	d900      	bls.n	8008504 <__ssputs_r+0x72>
 8008502:	463e      	mov	r6, r7
 8008504:	6820      	ldr	r0, [r4, #0]
 8008506:	4632      	mov	r2, r6
 8008508:	4641      	mov	r1, r8
 800850a:	f001 f939 	bl	8009780 <memmove>
 800850e:	68a3      	ldr	r3, [r4, #8]
 8008510:	1b9b      	subs	r3, r3, r6
 8008512:	60a3      	str	r3, [r4, #8]
 8008514:	6823      	ldr	r3, [r4, #0]
 8008516:	4433      	add	r3, r6
 8008518:	6023      	str	r3, [r4, #0]
 800851a:	2000      	movs	r0, #0
 800851c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008520:	462a      	mov	r2, r5
 8008522:	f001 f8f2 	bl	800970a <_realloc_r>
 8008526:	4606      	mov	r6, r0
 8008528:	2800      	cmp	r0, #0
 800852a:	d1e0      	bne.n	80084ee <__ssputs_r+0x5c>
 800852c:	6921      	ldr	r1, [r4, #16]
 800852e:	4650      	mov	r0, sl
 8008530:	f001 f9c8 	bl	80098c4 <_free_r>
 8008534:	230c      	movs	r3, #12
 8008536:	f8ca 3000 	str.w	r3, [sl]
 800853a:	89a3      	ldrh	r3, [r4, #12]
 800853c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008540:	81a3      	strh	r3, [r4, #12]
 8008542:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008546:	e7e9      	b.n	800851c <__ssputs_r+0x8a>

08008548 <_svfiprintf_r>:
 8008548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800854c:	4698      	mov	r8, r3
 800854e:	898b      	ldrh	r3, [r1, #12]
 8008550:	061b      	lsls	r3, r3, #24
 8008552:	b09d      	sub	sp, #116	@ 0x74
 8008554:	4607      	mov	r7, r0
 8008556:	460d      	mov	r5, r1
 8008558:	4614      	mov	r4, r2
 800855a:	d510      	bpl.n	800857e <_svfiprintf_r+0x36>
 800855c:	690b      	ldr	r3, [r1, #16]
 800855e:	b973      	cbnz	r3, 800857e <_svfiprintf_r+0x36>
 8008560:	2140      	movs	r1, #64	@ 0x40
 8008562:	f000 f90f 	bl	8008784 <_malloc_r>
 8008566:	6028      	str	r0, [r5, #0]
 8008568:	6128      	str	r0, [r5, #16]
 800856a:	b930      	cbnz	r0, 800857a <_svfiprintf_r+0x32>
 800856c:	230c      	movs	r3, #12
 800856e:	603b      	str	r3, [r7, #0]
 8008570:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008574:	b01d      	add	sp, #116	@ 0x74
 8008576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800857a:	2340      	movs	r3, #64	@ 0x40
 800857c:	616b      	str	r3, [r5, #20]
 800857e:	2300      	movs	r3, #0
 8008580:	9309      	str	r3, [sp, #36]	@ 0x24
 8008582:	2320      	movs	r3, #32
 8008584:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008588:	f8cd 800c 	str.w	r8, [sp, #12]
 800858c:	2330      	movs	r3, #48	@ 0x30
 800858e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800872c <_svfiprintf_r+0x1e4>
 8008592:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008596:	f04f 0901 	mov.w	r9, #1
 800859a:	4623      	mov	r3, r4
 800859c:	469a      	mov	sl, r3
 800859e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085a2:	b10a      	cbz	r2, 80085a8 <_svfiprintf_r+0x60>
 80085a4:	2a25      	cmp	r2, #37	@ 0x25
 80085a6:	d1f9      	bne.n	800859c <_svfiprintf_r+0x54>
 80085a8:	ebba 0b04 	subs.w	fp, sl, r4
 80085ac:	d00b      	beq.n	80085c6 <_svfiprintf_r+0x7e>
 80085ae:	465b      	mov	r3, fp
 80085b0:	4622      	mov	r2, r4
 80085b2:	4629      	mov	r1, r5
 80085b4:	4638      	mov	r0, r7
 80085b6:	f7ff ff6c 	bl	8008492 <__ssputs_r>
 80085ba:	3001      	adds	r0, #1
 80085bc:	f000 80a7 	beq.w	800870e <_svfiprintf_r+0x1c6>
 80085c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085c2:	445a      	add	r2, fp
 80085c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80085c6:	f89a 3000 	ldrb.w	r3, [sl]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f000 809f 	beq.w	800870e <_svfiprintf_r+0x1c6>
 80085d0:	2300      	movs	r3, #0
 80085d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80085d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085da:	f10a 0a01 	add.w	sl, sl, #1
 80085de:	9304      	str	r3, [sp, #16]
 80085e0:	9307      	str	r3, [sp, #28]
 80085e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80085e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80085e8:	4654      	mov	r4, sl
 80085ea:	2205      	movs	r2, #5
 80085ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085f0:	484e      	ldr	r0, [pc, #312]	@ (800872c <_svfiprintf_r+0x1e4>)
 80085f2:	f7f7 fe0d 	bl	8000210 <memchr>
 80085f6:	9a04      	ldr	r2, [sp, #16]
 80085f8:	b9d8      	cbnz	r0, 8008632 <_svfiprintf_r+0xea>
 80085fa:	06d0      	lsls	r0, r2, #27
 80085fc:	bf44      	itt	mi
 80085fe:	2320      	movmi	r3, #32
 8008600:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008604:	0711      	lsls	r1, r2, #28
 8008606:	bf44      	itt	mi
 8008608:	232b      	movmi	r3, #43	@ 0x2b
 800860a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800860e:	f89a 3000 	ldrb.w	r3, [sl]
 8008612:	2b2a      	cmp	r3, #42	@ 0x2a
 8008614:	d015      	beq.n	8008642 <_svfiprintf_r+0xfa>
 8008616:	9a07      	ldr	r2, [sp, #28]
 8008618:	4654      	mov	r4, sl
 800861a:	2000      	movs	r0, #0
 800861c:	f04f 0c0a 	mov.w	ip, #10
 8008620:	4621      	mov	r1, r4
 8008622:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008626:	3b30      	subs	r3, #48	@ 0x30
 8008628:	2b09      	cmp	r3, #9
 800862a:	d94b      	bls.n	80086c4 <_svfiprintf_r+0x17c>
 800862c:	b1b0      	cbz	r0, 800865c <_svfiprintf_r+0x114>
 800862e:	9207      	str	r2, [sp, #28]
 8008630:	e014      	b.n	800865c <_svfiprintf_r+0x114>
 8008632:	eba0 0308 	sub.w	r3, r0, r8
 8008636:	fa09 f303 	lsl.w	r3, r9, r3
 800863a:	4313      	orrs	r3, r2
 800863c:	9304      	str	r3, [sp, #16]
 800863e:	46a2      	mov	sl, r4
 8008640:	e7d2      	b.n	80085e8 <_svfiprintf_r+0xa0>
 8008642:	9b03      	ldr	r3, [sp, #12]
 8008644:	1d19      	adds	r1, r3, #4
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	9103      	str	r1, [sp, #12]
 800864a:	2b00      	cmp	r3, #0
 800864c:	bfbb      	ittet	lt
 800864e:	425b      	neglt	r3, r3
 8008650:	f042 0202 	orrlt.w	r2, r2, #2
 8008654:	9307      	strge	r3, [sp, #28]
 8008656:	9307      	strlt	r3, [sp, #28]
 8008658:	bfb8      	it	lt
 800865a:	9204      	strlt	r2, [sp, #16]
 800865c:	7823      	ldrb	r3, [r4, #0]
 800865e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008660:	d10a      	bne.n	8008678 <_svfiprintf_r+0x130>
 8008662:	7863      	ldrb	r3, [r4, #1]
 8008664:	2b2a      	cmp	r3, #42	@ 0x2a
 8008666:	d132      	bne.n	80086ce <_svfiprintf_r+0x186>
 8008668:	9b03      	ldr	r3, [sp, #12]
 800866a:	1d1a      	adds	r2, r3, #4
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	9203      	str	r2, [sp, #12]
 8008670:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008674:	3402      	adds	r4, #2
 8008676:	9305      	str	r3, [sp, #20]
 8008678:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800873c <_svfiprintf_r+0x1f4>
 800867c:	7821      	ldrb	r1, [r4, #0]
 800867e:	2203      	movs	r2, #3
 8008680:	4650      	mov	r0, sl
 8008682:	f7f7 fdc5 	bl	8000210 <memchr>
 8008686:	b138      	cbz	r0, 8008698 <_svfiprintf_r+0x150>
 8008688:	9b04      	ldr	r3, [sp, #16]
 800868a:	eba0 000a 	sub.w	r0, r0, sl
 800868e:	2240      	movs	r2, #64	@ 0x40
 8008690:	4082      	lsls	r2, r0
 8008692:	4313      	orrs	r3, r2
 8008694:	3401      	adds	r4, #1
 8008696:	9304      	str	r3, [sp, #16]
 8008698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800869c:	4824      	ldr	r0, [pc, #144]	@ (8008730 <_svfiprintf_r+0x1e8>)
 800869e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086a2:	2206      	movs	r2, #6
 80086a4:	f7f7 fdb4 	bl	8000210 <memchr>
 80086a8:	2800      	cmp	r0, #0
 80086aa:	d036      	beq.n	800871a <_svfiprintf_r+0x1d2>
 80086ac:	4b21      	ldr	r3, [pc, #132]	@ (8008734 <_svfiprintf_r+0x1ec>)
 80086ae:	bb1b      	cbnz	r3, 80086f8 <_svfiprintf_r+0x1b0>
 80086b0:	9b03      	ldr	r3, [sp, #12]
 80086b2:	3307      	adds	r3, #7
 80086b4:	f023 0307 	bic.w	r3, r3, #7
 80086b8:	3308      	adds	r3, #8
 80086ba:	9303      	str	r3, [sp, #12]
 80086bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086be:	4433      	add	r3, r6
 80086c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80086c2:	e76a      	b.n	800859a <_svfiprintf_r+0x52>
 80086c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80086c8:	460c      	mov	r4, r1
 80086ca:	2001      	movs	r0, #1
 80086cc:	e7a8      	b.n	8008620 <_svfiprintf_r+0xd8>
 80086ce:	2300      	movs	r3, #0
 80086d0:	3401      	adds	r4, #1
 80086d2:	9305      	str	r3, [sp, #20]
 80086d4:	4619      	mov	r1, r3
 80086d6:	f04f 0c0a 	mov.w	ip, #10
 80086da:	4620      	mov	r0, r4
 80086dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086e0:	3a30      	subs	r2, #48	@ 0x30
 80086e2:	2a09      	cmp	r2, #9
 80086e4:	d903      	bls.n	80086ee <_svfiprintf_r+0x1a6>
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d0c6      	beq.n	8008678 <_svfiprintf_r+0x130>
 80086ea:	9105      	str	r1, [sp, #20]
 80086ec:	e7c4      	b.n	8008678 <_svfiprintf_r+0x130>
 80086ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80086f2:	4604      	mov	r4, r0
 80086f4:	2301      	movs	r3, #1
 80086f6:	e7f0      	b.n	80086da <_svfiprintf_r+0x192>
 80086f8:	ab03      	add	r3, sp, #12
 80086fa:	9300      	str	r3, [sp, #0]
 80086fc:	462a      	mov	r2, r5
 80086fe:	4b0e      	ldr	r3, [pc, #56]	@ (8008738 <_svfiprintf_r+0x1f0>)
 8008700:	a904      	add	r1, sp, #16
 8008702:	4638      	mov	r0, r7
 8008704:	f3af 8000 	nop.w
 8008708:	1c42      	adds	r2, r0, #1
 800870a:	4606      	mov	r6, r0
 800870c:	d1d6      	bne.n	80086bc <_svfiprintf_r+0x174>
 800870e:	89ab      	ldrh	r3, [r5, #12]
 8008710:	065b      	lsls	r3, r3, #25
 8008712:	f53f af2d 	bmi.w	8008570 <_svfiprintf_r+0x28>
 8008716:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008718:	e72c      	b.n	8008574 <_svfiprintf_r+0x2c>
 800871a:	ab03      	add	r3, sp, #12
 800871c:	9300      	str	r3, [sp, #0]
 800871e:	462a      	mov	r2, r5
 8008720:	4b05      	ldr	r3, [pc, #20]	@ (8008738 <_svfiprintf_r+0x1f0>)
 8008722:	a904      	add	r1, sp, #16
 8008724:	4638      	mov	r0, r7
 8008726:	f000 f92d 	bl	8008984 <_printf_i>
 800872a:	e7ed      	b.n	8008708 <_svfiprintf_r+0x1c0>
 800872c:	0800a013 	.word	0x0800a013
 8008730:	0800a01d 	.word	0x0800a01d
 8008734:	00000000 	.word	0x00000000
 8008738:	08008493 	.word	0x08008493
 800873c:	0800a019 	.word	0x0800a019

08008740 <sbrk_aligned>:
 8008740:	b570      	push	{r4, r5, r6, lr}
 8008742:	4e0f      	ldr	r6, [pc, #60]	@ (8008780 <sbrk_aligned+0x40>)
 8008744:	460c      	mov	r4, r1
 8008746:	6831      	ldr	r1, [r6, #0]
 8008748:	4605      	mov	r5, r0
 800874a:	b911      	cbnz	r1, 8008752 <sbrk_aligned+0x12>
 800874c:	f001 f856 	bl	80097fc <_sbrk_r>
 8008750:	6030      	str	r0, [r6, #0]
 8008752:	4621      	mov	r1, r4
 8008754:	4628      	mov	r0, r5
 8008756:	f001 f851 	bl	80097fc <_sbrk_r>
 800875a:	1c43      	adds	r3, r0, #1
 800875c:	d103      	bne.n	8008766 <sbrk_aligned+0x26>
 800875e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008762:	4620      	mov	r0, r4
 8008764:	bd70      	pop	{r4, r5, r6, pc}
 8008766:	1cc4      	adds	r4, r0, #3
 8008768:	f024 0403 	bic.w	r4, r4, #3
 800876c:	42a0      	cmp	r0, r4
 800876e:	d0f8      	beq.n	8008762 <sbrk_aligned+0x22>
 8008770:	1a21      	subs	r1, r4, r0
 8008772:	4628      	mov	r0, r5
 8008774:	f001 f842 	bl	80097fc <_sbrk_r>
 8008778:	3001      	adds	r0, #1
 800877a:	d1f2      	bne.n	8008762 <sbrk_aligned+0x22>
 800877c:	e7ef      	b.n	800875e <sbrk_aligned+0x1e>
 800877e:	bf00      	nop
 8008780:	2000069c 	.word	0x2000069c

08008784 <_malloc_r>:
 8008784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008788:	1ccd      	adds	r5, r1, #3
 800878a:	f025 0503 	bic.w	r5, r5, #3
 800878e:	3508      	adds	r5, #8
 8008790:	2d0c      	cmp	r5, #12
 8008792:	bf38      	it	cc
 8008794:	250c      	movcc	r5, #12
 8008796:	2d00      	cmp	r5, #0
 8008798:	4606      	mov	r6, r0
 800879a:	db01      	blt.n	80087a0 <_malloc_r+0x1c>
 800879c:	42a9      	cmp	r1, r5
 800879e:	d904      	bls.n	80087aa <_malloc_r+0x26>
 80087a0:	230c      	movs	r3, #12
 80087a2:	6033      	str	r3, [r6, #0]
 80087a4:	2000      	movs	r0, #0
 80087a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008880 <_malloc_r+0xfc>
 80087ae:	f000 fab3 	bl	8008d18 <__malloc_lock>
 80087b2:	f8d8 3000 	ldr.w	r3, [r8]
 80087b6:	461c      	mov	r4, r3
 80087b8:	bb44      	cbnz	r4, 800880c <_malloc_r+0x88>
 80087ba:	4629      	mov	r1, r5
 80087bc:	4630      	mov	r0, r6
 80087be:	f7ff ffbf 	bl	8008740 <sbrk_aligned>
 80087c2:	1c43      	adds	r3, r0, #1
 80087c4:	4604      	mov	r4, r0
 80087c6:	d158      	bne.n	800887a <_malloc_r+0xf6>
 80087c8:	f8d8 4000 	ldr.w	r4, [r8]
 80087cc:	4627      	mov	r7, r4
 80087ce:	2f00      	cmp	r7, #0
 80087d0:	d143      	bne.n	800885a <_malloc_r+0xd6>
 80087d2:	2c00      	cmp	r4, #0
 80087d4:	d04b      	beq.n	800886e <_malloc_r+0xea>
 80087d6:	6823      	ldr	r3, [r4, #0]
 80087d8:	4639      	mov	r1, r7
 80087da:	4630      	mov	r0, r6
 80087dc:	eb04 0903 	add.w	r9, r4, r3
 80087e0:	f001 f80c 	bl	80097fc <_sbrk_r>
 80087e4:	4581      	cmp	r9, r0
 80087e6:	d142      	bne.n	800886e <_malloc_r+0xea>
 80087e8:	6821      	ldr	r1, [r4, #0]
 80087ea:	1a6d      	subs	r5, r5, r1
 80087ec:	4629      	mov	r1, r5
 80087ee:	4630      	mov	r0, r6
 80087f0:	f7ff ffa6 	bl	8008740 <sbrk_aligned>
 80087f4:	3001      	adds	r0, #1
 80087f6:	d03a      	beq.n	800886e <_malloc_r+0xea>
 80087f8:	6823      	ldr	r3, [r4, #0]
 80087fa:	442b      	add	r3, r5
 80087fc:	6023      	str	r3, [r4, #0]
 80087fe:	f8d8 3000 	ldr.w	r3, [r8]
 8008802:	685a      	ldr	r2, [r3, #4]
 8008804:	bb62      	cbnz	r2, 8008860 <_malloc_r+0xdc>
 8008806:	f8c8 7000 	str.w	r7, [r8]
 800880a:	e00f      	b.n	800882c <_malloc_r+0xa8>
 800880c:	6822      	ldr	r2, [r4, #0]
 800880e:	1b52      	subs	r2, r2, r5
 8008810:	d420      	bmi.n	8008854 <_malloc_r+0xd0>
 8008812:	2a0b      	cmp	r2, #11
 8008814:	d917      	bls.n	8008846 <_malloc_r+0xc2>
 8008816:	1961      	adds	r1, r4, r5
 8008818:	42a3      	cmp	r3, r4
 800881a:	6025      	str	r5, [r4, #0]
 800881c:	bf18      	it	ne
 800881e:	6059      	strne	r1, [r3, #4]
 8008820:	6863      	ldr	r3, [r4, #4]
 8008822:	bf08      	it	eq
 8008824:	f8c8 1000 	streq.w	r1, [r8]
 8008828:	5162      	str	r2, [r4, r5]
 800882a:	604b      	str	r3, [r1, #4]
 800882c:	4630      	mov	r0, r6
 800882e:	f000 fa79 	bl	8008d24 <__malloc_unlock>
 8008832:	f104 000b 	add.w	r0, r4, #11
 8008836:	1d23      	adds	r3, r4, #4
 8008838:	f020 0007 	bic.w	r0, r0, #7
 800883c:	1ac2      	subs	r2, r0, r3
 800883e:	bf1c      	itt	ne
 8008840:	1a1b      	subne	r3, r3, r0
 8008842:	50a3      	strne	r3, [r4, r2]
 8008844:	e7af      	b.n	80087a6 <_malloc_r+0x22>
 8008846:	6862      	ldr	r2, [r4, #4]
 8008848:	42a3      	cmp	r3, r4
 800884a:	bf0c      	ite	eq
 800884c:	f8c8 2000 	streq.w	r2, [r8]
 8008850:	605a      	strne	r2, [r3, #4]
 8008852:	e7eb      	b.n	800882c <_malloc_r+0xa8>
 8008854:	4623      	mov	r3, r4
 8008856:	6864      	ldr	r4, [r4, #4]
 8008858:	e7ae      	b.n	80087b8 <_malloc_r+0x34>
 800885a:	463c      	mov	r4, r7
 800885c:	687f      	ldr	r7, [r7, #4]
 800885e:	e7b6      	b.n	80087ce <_malloc_r+0x4a>
 8008860:	461a      	mov	r2, r3
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	42a3      	cmp	r3, r4
 8008866:	d1fb      	bne.n	8008860 <_malloc_r+0xdc>
 8008868:	2300      	movs	r3, #0
 800886a:	6053      	str	r3, [r2, #4]
 800886c:	e7de      	b.n	800882c <_malloc_r+0xa8>
 800886e:	230c      	movs	r3, #12
 8008870:	6033      	str	r3, [r6, #0]
 8008872:	4630      	mov	r0, r6
 8008874:	f000 fa56 	bl	8008d24 <__malloc_unlock>
 8008878:	e794      	b.n	80087a4 <_malloc_r+0x20>
 800887a:	6005      	str	r5, [r0, #0]
 800887c:	e7d6      	b.n	800882c <_malloc_r+0xa8>
 800887e:	bf00      	nop
 8008880:	200006a0 	.word	0x200006a0

08008884 <__ascii_mbtowc>:
 8008884:	b082      	sub	sp, #8
 8008886:	b901      	cbnz	r1, 800888a <__ascii_mbtowc+0x6>
 8008888:	a901      	add	r1, sp, #4
 800888a:	b142      	cbz	r2, 800889e <__ascii_mbtowc+0x1a>
 800888c:	b14b      	cbz	r3, 80088a2 <__ascii_mbtowc+0x1e>
 800888e:	7813      	ldrb	r3, [r2, #0]
 8008890:	600b      	str	r3, [r1, #0]
 8008892:	7812      	ldrb	r2, [r2, #0]
 8008894:	1e10      	subs	r0, r2, #0
 8008896:	bf18      	it	ne
 8008898:	2001      	movne	r0, #1
 800889a:	b002      	add	sp, #8
 800889c:	4770      	bx	lr
 800889e:	4610      	mov	r0, r2
 80088a0:	e7fb      	b.n	800889a <__ascii_mbtowc+0x16>
 80088a2:	f06f 0001 	mvn.w	r0, #1
 80088a6:	e7f8      	b.n	800889a <__ascii_mbtowc+0x16>

080088a8 <_printf_common>:
 80088a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088ac:	4616      	mov	r6, r2
 80088ae:	4698      	mov	r8, r3
 80088b0:	688a      	ldr	r2, [r1, #8]
 80088b2:	690b      	ldr	r3, [r1, #16]
 80088b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80088b8:	4293      	cmp	r3, r2
 80088ba:	bfb8      	it	lt
 80088bc:	4613      	movlt	r3, r2
 80088be:	6033      	str	r3, [r6, #0]
 80088c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80088c4:	4607      	mov	r7, r0
 80088c6:	460c      	mov	r4, r1
 80088c8:	b10a      	cbz	r2, 80088ce <_printf_common+0x26>
 80088ca:	3301      	adds	r3, #1
 80088cc:	6033      	str	r3, [r6, #0]
 80088ce:	6823      	ldr	r3, [r4, #0]
 80088d0:	0699      	lsls	r1, r3, #26
 80088d2:	bf42      	ittt	mi
 80088d4:	6833      	ldrmi	r3, [r6, #0]
 80088d6:	3302      	addmi	r3, #2
 80088d8:	6033      	strmi	r3, [r6, #0]
 80088da:	6825      	ldr	r5, [r4, #0]
 80088dc:	f015 0506 	ands.w	r5, r5, #6
 80088e0:	d106      	bne.n	80088f0 <_printf_common+0x48>
 80088e2:	f104 0a19 	add.w	sl, r4, #25
 80088e6:	68e3      	ldr	r3, [r4, #12]
 80088e8:	6832      	ldr	r2, [r6, #0]
 80088ea:	1a9b      	subs	r3, r3, r2
 80088ec:	42ab      	cmp	r3, r5
 80088ee:	dc26      	bgt.n	800893e <_printf_common+0x96>
 80088f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80088f4:	6822      	ldr	r2, [r4, #0]
 80088f6:	3b00      	subs	r3, #0
 80088f8:	bf18      	it	ne
 80088fa:	2301      	movne	r3, #1
 80088fc:	0692      	lsls	r2, r2, #26
 80088fe:	d42b      	bmi.n	8008958 <_printf_common+0xb0>
 8008900:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008904:	4641      	mov	r1, r8
 8008906:	4638      	mov	r0, r7
 8008908:	47c8      	blx	r9
 800890a:	3001      	adds	r0, #1
 800890c:	d01e      	beq.n	800894c <_printf_common+0xa4>
 800890e:	6823      	ldr	r3, [r4, #0]
 8008910:	6922      	ldr	r2, [r4, #16]
 8008912:	f003 0306 	and.w	r3, r3, #6
 8008916:	2b04      	cmp	r3, #4
 8008918:	bf02      	ittt	eq
 800891a:	68e5      	ldreq	r5, [r4, #12]
 800891c:	6833      	ldreq	r3, [r6, #0]
 800891e:	1aed      	subeq	r5, r5, r3
 8008920:	68a3      	ldr	r3, [r4, #8]
 8008922:	bf0c      	ite	eq
 8008924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008928:	2500      	movne	r5, #0
 800892a:	4293      	cmp	r3, r2
 800892c:	bfc4      	itt	gt
 800892e:	1a9b      	subgt	r3, r3, r2
 8008930:	18ed      	addgt	r5, r5, r3
 8008932:	2600      	movs	r6, #0
 8008934:	341a      	adds	r4, #26
 8008936:	42b5      	cmp	r5, r6
 8008938:	d11a      	bne.n	8008970 <_printf_common+0xc8>
 800893a:	2000      	movs	r0, #0
 800893c:	e008      	b.n	8008950 <_printf_common+0xa8>
 800893e:	2301      	movs	r3, #1
 8008940:	4652      	mov	r2, sl
 8008942:	4641      	mov	r1, r8
 8008944:	4638      	mov	r0, r7
 8008946:	47c8      	blx	r9
 8008948:	3001      	adds	r0, #1
 800894a:	d103      	bne.n	8008954 <_printf_common+0xac>
 800894c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008954:	3501      	adds	r5, #1
 8008956:	e7c6      	b.n	80088e6 <_printf_common+0x3e>
 8008958:	18e1      	adds	r1, r4, r3
 800895a:	1c5a      	adds	r2, r3, #1
 800895c:	2030      	movs	r0, #48	@ 0x30
 800895e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008962:	4422      	add	r2, r4
 8008964:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008968:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800896c:	3302      	adds	r3, #2
 800896e:	e7c7      	b.n	8008900 <_printf_common+0x58>
 8008970:	2301      	movs	r3, #1
 8008972:	4622      	mov	r2, r4
 8008974:	4641      	mov	r1, r8
 8008976:	4638      	mov	r0, r7
 8008978:	47c8      	blx	r9
 800897a:	3001      	adds	r0, #1
 800897c:	d0e6      	beq.n	800894c <_printf_common+0xa4>
 800897e:	3601      	adds	r6, #1
 8008980:	e7d9      	b.n	8008936 <_printf_common+0x8e>
	...

08008984 <_printf_i>:
 8008984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008988:	7e0f      	ldrb	r7, [r1, #24]
 800898a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800898c:	2f78      	cmp	r7, #120	@ 0x78
 800898e:	4691      	mov	r9, r2
 8008990:	4680      	mov	r8, r0
 8008992:	460c      	mov	r4, r1
 8008994:	469a      	mov	sl, r3
 8008996:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800899a:	d807      	bhi.n	80089ac <_printf_i+0x28>
 800899c:	2f62      	cmp	r7, #98	@ 0x62
 800899e:	d80a      	bhi.n	80089b6 <_printf_i+0x32>
 80089a0:	2f00      	cmp	r7, #0
 80089a2:	f000 80d1 	beq.w	8008b48 <_printf_i+0x1c4>
 80089a6:	2f58      	cmp	r7, #88	@ 0x58
 80089a8:	f000 80b8 	beq.w	8008b1c <_printf_i+0x198>
 80089ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80089b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80089b4:	e03a      	b.n	8008a2c <_printf_i+0xa8>
 80089b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80089ba:	2b15      	cmp	r3, #21
 80089bc:	d8f6      	bhi.n	80089ac <_printf_i+0x28>
 80089be:	a101      	add	r1, pc, #4	@ (adr r1, 80089c4 <_printf_i+0x40>)
 80089c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80089c4:	08008a1d 	.word	0x08008a1d
 80089c8:	08008a31 	.word	0x08008a31
 80089cc:	080089ad 	.word	0x080089ad
 80089d0:	080089ad 	.word	0x080089ad
 80089d4:	080089ad 	.word	0x080089ad
 80089d8:	080089ad 	.word	0x080089ad
 80089dc:	08008a31 	.word	0x08008a31
 80089e0:	080089ad 	.word	0x080089ad
 80089e4:	080089ad 	.word	0x080089ad
 80089e8:	080089ad 	.word	0x080089ad
 80089ec:	080089ad 	.word	0x080089ad
 80089f0:	08008b2f 	.word	0x08008b2f
 80089f4:	08008a5b 	.word	0x08008a5b
 80089f8:	08008ae9 	.word	0x08008ae9
 80089fc:	080089ad 	.word	0x080089ad
 8008a00:	080089ad 	.word	0x080089ad
 8008a04:	08008b51 	.word	0x08008b51
 8008a08:	080089ad 	.word	0x080089ad
 8008a0c:	08008a5b 	.word	0x08008a5b
 8008a10:	080089ad 	.word	0x080089ad
 8008a14:	080089ad 	.word	0x080089ad
 8008a18:	08008af1 	.word	0x08008af1
 8008a1c:	6833      	ldr	r3, [r6, #0]
 8008a1e:	1d1a      	adds	r2, r3, #4
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	6032      	str	r2, [r6, #0]
 8008a24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	e09c      	b.n	8008b6a <_printf_i+0x1e6>
 8008a30:	6833      	ldr	r3, [r6, #0]
 8008a32:	6820      	ldr	r0, [r4, #0]
 8008a34:	1d19      	adds	r1, r3, #4
 8008a36:	6031      	str	r1, [r6, #0]
 8008a38:	0606      	lsls	r6, r0, #24
 8008a3a:	d501      	bpl.n	8008a40 <_printf_i+0xbc>
 8008a3c:	681d      	ldr	r5, [r3, #0]
 8008a3e:	e003      	b.n	8008a48 <_printf_i+0xc4>
 8008a40:	0645      	lsls	r5, r0, #25
 8008a42:	d5fb      	bpl.n	8008a3c <_printf_i+0xb8>
 8008a44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008a48:	2d00      	cmp	r5, #0
 8008a4a:	da03      	bge.n	8008a54 <_printf_i+0xd0>
 8008a4c:	232d      	movs	r3, #45	@ 0x2d
 8008a4e:	426d      	negs	r5, r5
 8008a50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a54:	4858      	ldr	r0, [pc, #352]	@ (8008bb8 <_printf_i+0x234>)
 8008a56:	230a      	movs	r3, #10
 8008a58:	e011      	b.n	8008a7e <_printf_i+0xfa>
 8008a5a:	6821      	ldr	r1, [r4, #0]
 8008a5c:	6833      	ldr	r3, [r6, #0]
 8008a5e:	0608      	lsls	r0, r1, #24
 8008a60:	f853 5b04 	ldr.w	r5, [r3], #4
 8008a64:	d402      	bmi.n	8008a6c <_printf_i+0xe8>
 8008a66:	0649      	lsls	r1, r1, #25
 8008a68:	bf48      	it	mi
 8008a6a:	b2ad      	uxthmi	r5, r5
 8008a6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008a6e:	4852      	ldr	r0, [pc, #328]	@ (8008bb8 <_printf_i+0x234>)
 8008a70:	6033      	str	r3, [r6, #0]
 8008a72:	bf14      	ite	ne
 8008a74:	230a      	movne	r3, #10
 8008a76:	2308      	moveq	r3, #8
 8008a78:	2100      	movs	r1, #0
 8008a7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008a7e:	6866      	ldr	r6, [r4, #4]
 8008a80:	60a6      	str	r6, [r4, #8]
 8008a82:	2e00      	cmp	r6, #0
 8008a84:	db05      	blt.n	8008a92 <_printf_i+0x10e>
 8008a86:	6821      	ldr	r1, [r4, #0]
 8008a88:	432e      	orrs	r6, r5
 8008a8a:	f021 0104 	bic.w	r1, r1, #4
 8008a8e:	6021      	str	r1, [r4, #0]
 8008a90:	d04b      	beq.n	8008b2a <_printf_i+0x1a6>
 8008a92:	4616      	mov	r6, r2
 8008a94:	fbb5 f1f3 	udiv	r1, r5, r3
 8008a98:	fb03 5711 	mls	r7, r3, r1, r5
 8008a9c:	5dc7      	ldrb	r7, [r0, r7]
 8008a9e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008aa2:	462f      	mov	r7, r5
 8008aa4:	42bb      	cmp	r3, r7
 8008aa6:	460d      	mov	r5, r1
 8008aa8:	d9f4      	bls.n	8008a94 <_printf_i+0x110>
 8008aaa:	2b08      	cmp	r3, #8
 8008aac:	d10b      	bne.n	8008ac6 <_printf_i+0x142>
 8008aae:	6823      	ldr	r3, [r4, #0]
 8008ab0:	07df      	lsls	r7, r3, #31
 8008ab2:	d508      	bpl.n	8008ac6 <_printf_i+0x142>
 8008ab4:	6923      	ldr	r3, [r4, #16]
 8008ab6:	6861      	ldr	r1, [r4, #4]
 8008ab8:	4299      	cmp	r1, r3
 8008aba:	bfde      	ittt	le
 8008abc:	2330      	movle	r3, #48	@ 0x30
 8008abe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ac2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008ac6:	1b92      	subs	r2, r2, r6
 8008ac8:	6122      	str	r2, [r4, #16]
 8008aca:	f8cd a000 	str.w	sl, [sp]
 8008ace:	464b      	mov	r3, r9
 8008ad0:	aa03      	add	r2, sp, #12
 8008ad2:	4621      	mov	r1, r4
 8008ad4:	4640      	mov	r0, r8
 8008ad6:	f7ff fee7 	bl	80088a8 <_printf_common>
 8008ada:	3001      	adds	r0, #1
 8008adc:	d14a      	bne.n	8008b74 <_printf_i+0x1f0>
 8008ade:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ae2:	b004      	add	sp, #16
 8008ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ae8:	6823      	ldr	r3, [r4, #0]
 8008aea:	f043 0320 	orr.w	r3, r3, #32
 8008aee:	6023      	str	r3, [r4, #0]
 8008af0:	4832      	ldr	r0, [pc, #200]	@ (8008bbc <_printf_i+0x238>)
 8008af2:	2778      	movs	r7, #120	@ 0x78
 8008af4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008af8:	6823      	ldr	r3, [r4, #0]
 8008afa:	6831      	ldr	r1, [r6, #0]
 8008afc:	061f      	lsls	r7, r3, #24
 8008afe:	f851 5b04 	ldr.w	r5, [r1], #4
 8008b02:	d402      	bmi.n	8008b0a <_printf_i+0x186>
 8008b04:	065f      	lsls	r7, r3, #25
 8008b06:	bf48      	it	mi
 8008b08:	b2ad      	uxthmi	r5, r5
 8008b0a:	6031      	str	r1, [r6, #0]
 8008b0c:	07d9      	lsls	r1, r3, #31
 8008b0e:	bf44      	itt	mi
 8008b10:	f043 0320 	orrmi.w	r3, r3, #32
 8008b14:	6023      	strmi	r3, [r4, #0]
 8008b16:	b11d      	cbz	r5, 8008b20 <_printf_i+0x19c>
 8008b18:	2310      	movs	r3, #16
 8008b1a:	e7ad      	b.n	8008a78 <_printf_i+0xf4>
 8008b1c:	4826      	ldr	r0, [pc, #152]	@ (8008bb8 <_printf_i+0x234>)
 8008b1e:	e7e9      	b.n	8008af4 <_printf_i+0x170>
 8008b20:	6823      	ldr	r3, [r4, #0]
 8008b22:	f023 0320 	bic.w	r3, r3, #32
 8008b26:	6023      	str	r3, [r4, #0]
 8008b28:	e7f6      	b.n	8008b18 <_printf_i+0x194>
 8008b2a:	4616      	mov	r6, r2
 8008b2c:	e7bd      	b.n	8008aaa <_printf_i+0x126>
 8008b2e:	6833      	ldr	r3, [r6, #0]
 8008b30:	6825      	ldr	r5, [r4, #0]
 8008b32:	6961      	ldr	r1, [r4, #20]
 8008b34:	1d18      	adds	r0, r3, #4
 8008b36:	6030      	str	r0, [r6, #0]
 8008b38:	062e      	lsls	r6, r5, #24
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	d501      	bpl.n	8008b42 <_printf_i+0x1be>
 8008b3e:	6019      	str	r1, [r3, #0]
 8008b40:	e002      	b.n	8008b48 <_printf_i+0x1c4>
 8008b42:	0668      	lsls	r0, r5, #25
 8008b44:	d5fb      	bpl.n	8008b3e <_printf_i+0x1ba>
 8008b46:	8019      	strh	r1, [r3, #0]
 8008b48:	2300      	movs	r3, #0
 8008b4a:	6123      	str	r3, [r4, #16]
 8008b4c:	4616      	mov	r6, r2
 8008b4e:	e7bc      	b.n	8008aca <_printf_i+0x146>
 8008b50:	6833      	ldr	r3, [r6, #0]
 8008b52:	1d1a      	adds	r2, r3, #4
 8008b54:	6032      	str	r2, [r6, #0]
 8008b56:	681e      	ldr	r6, [r3, #0]
 8008b58:	6862      	ldr	r2, [r4, #4]
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	4630      	mov	r0, r6
 8008b5e:	f7f7 fb57 	bl	8000210 <memchr>
 8008b62:	b108      	cbz	r0, 8008b68 <_printf_i+0x1e4>
 8008b64:	1b80      	subs	r0, r0, r6
 8008b66:	6060      	str	r0, [r4, #4]
 8008b68:	6863      	ldr	r3, [r4, #4]
 8008b6a:	6123      	str	r3, [r4, #16]
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b72:	e7aa      	b.n	8008aca <_printf_i+0x146>
 8008b74:	6923      	ldr	r3, [r4, #16]
 8008b76:	4632      	mov	r2, r6
 8008b78:	4649      	mov	r1, r9
 8008b7a:	4640      	mov	r0, r8
 8008b7c:	47d0      	blx	sl
 8008b7e:	3001      	adds	r0, #1
 8008b80:	d0ad      	beq.n	8008ade <_printf_i+0x15a>
 8008b82:	6823      	ldr	r3, [r4, #0]
 8008b84:	079b      	lsls	r3, r3, #30
 8008b86:	d413      	bmi.n	8008bb0 <_printf_i+0x22c>
 8008b88:	68e0      	ldr	r0, [r4, #12]
 8008b8a:	9b03      	ldr	r3, [sp, #12]
 8008b8c:	4298      	cmp	r0, r3
 8008b8e:	bfb8      	it	lt
 8008b90:	4618      	movlt	r0, r3
 8008b92:	e7a6      	b.n	8008ae2 <_printf_i+0x15e>
 8008b94:	2301      	movs	r3, #1
 8008b96:	4632      	mov	r2, r6
 8008b98:	4649      	mov	r1, r9
 8008b9a:	4640      	mov	r0, r8
 8008b9c:	47d0      	blx	sl
 8008b9e:	3001      	adds	r0, #1
 8008ba0:	d09d      	beq.n	8008ade <_printf_i+0x15a>
 8008ba2:	3501      	adds	r5, #1
 8008ba4:	68e3      	ldr	r3, [r4, #12]
 8008ba6:	9903      	ldr	r1, [sp, #12]
 8008ba8:	1a5b      	subs	r3, r3, r1
 8008baa:	42ab      	cmp	r3, r5
 8008bac:	dcf2      	bgt.n	8008b94 <_printf_i+0x210>
 8008bae:	e7eb      	b.n	8008b88 <_printf_i+0x204>
 8008bb0:	2500      	movs	r5, #0
 8008bb2:	f104 0619 	add.w	r6, r4, #25
 8008bb6:	e7f5      	b.n	8008ba4 <_printf_i+0x220>
 8008bb8:	0800a024 	.word	0x0800a024
 8008bbc:	0800a035 	.word	0x0800a035

08008bc0 <__sflush_r>:
 8008bc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bc8:	0716      	lsls	r6, r2, #28
 8008bca:	4605      	mov	r5, r0
 8008bcc:	460c      	mov	r4, r1
 8008bce:	d454      	bmi.n	8008c7a <__sflush_r+0xba>
 8008bd0:	684b      	ldr	r3, [r1, #4]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	dc02      	bgt.n	8008bdc <__sflush_r+0x1c>
 8008bd6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	dd48      	ble.n	8008c6e <__sflush_r+0xae>
 8008bdc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008bde:	2e00      	cmp	r6, #0
 8008be0:	d045      	beq.n	8008c6e <__sflush_r+0xae>
 8008be2:	2300      	movs	r3, #0
 8008be4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008be8:	682f      	ldr	r7, [r5, #0]
 8008bea:	6a21      	ldr	r1, [r4, #32]
 8008bec:	602b      	str	r3, [r5, #0]
 8008bee:	d030      	beq.n	8008c52 <__sflush_r+0x92>
 8008bf0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008bf2:	89a3      	ldrh	r3, [r4, #12]
 8008bf4:	0759      	lsls	r1, r3, #29
 8008bf6:	d505      	bpl.n	8008c04 <__sflush_r+0x44>
 8008bf8:	6863      	ldr	r3, [r4, #4]
 8008bfa:	1ad2      	subs	r2, r2, r3
 8008bfc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008bfe:	b10b      	cbz	r3, 8008c04 <__sflush_r+0x44>
 8008c00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008c02:	1ad2      	subs	r2, r2, r3
 8008c04:	2300      	movs	r3, #0
 8008c06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c08:	6a21      	ldr	r1, [r4, #32]
 8008c0a:	4628      	mov	r0, r5
 8008c0c:	47b0      	blx	r6
 8008c0e:	1c43      	adds	r3, r0, #1
 8008c10:	89a3      	ldrh	r3, [r4, #12]
 8008c12:	d106      	bne.n	8008c22 <__sflush_r+0x62>
 8008c14:	6829      	ldr	r1, [r5, #0]
 8008c16:	291d      	cmp	r1, #29
 8008c18:	d82b      	bhi.n	8008c72 <__sflush_r+0xb2>
 8008c1a:	4a2a      	ldr	r2, [pc, #168]	@ (8008cc4 <__sflush_r+0x104>)
 8008c1c:	40ca      	lsrs	r2, r1
 8008c1e:	07d6      	lsls	r6, r2, #31
 8008c20:	d527      	bpl.n	8008c72 <__sflush_r+0xb2>
 8008c22:	2200      	movs	r2, #0
 8008c24:	6062      	str	r2, [r4, #4]
 8008c26:	04d9      	lsls	r1, r3, #19
 8008c28:	6922      	ldr	r2, [r4, #16]
 8008c2a:	6022      	str	r2, [r4, #0]
 8008c2c:	d504      	bpl.n	8008c38 <__sflush_r+0x78>
 8008c2e:	1c42      	adds	r2, r0, #1
 8008c30:	d101      	bne.n	8008c36 <__sflush_r+0x76>
 8008c32:	682b      	ldr	r3, [r5, #0]
 8008c34:	b903      	cbnz	r3, 8008c38 <__sflush_r+0x78>
 8008c36:	6560      	str	r0, [r4, #84]	@ 0x54
 8008c38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c3a:	602f      	str	r7, [r5, #0]
 8008c3c:	b1b9      	cbz	r1, 8008c6e <__sflush_r+0xae>
 8008c3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c42:	4299      	cmp	r1, r3
 8008c44:	d002      	beq.n	8008c4c <__sflush_r+0x8c>
 8008c46:	4628      	mov	r0, r5
 8008c48:	f000 fe3c 	bl	80098c4 <_free_r>
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c50:	e00d      	b.n	8008c6e <__sflush_r+0xae>
 8008c52:	2301      	movs	r3, #1
 8008c54:	4628      	mov	r0, r5
 8008c56:	47b0      	blx	r6
 8008c58:	4602      	mov	r2, r0
 8008c5a:	1c50      	adds	r0, r2, #1
 8008c5c:	d1c9      	bne.n	8008bf2 <__sflush_r+0x32>
 8008c5e:	682b      	ldr	r3, [r5, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d0c6      	beq.n	8008bf2 <__sflush_r+0x32>
 8008c64:	2b1d      	cmp	r3, #29
 8008c66:	d001      	beq.n	8008c6c <__sflush_r+0xac>
 8008c68:	2b16      	cmp	r3, #22
 8008c6a:	d11e      	bne.n	8008caa <__sflush_r+0xea>
 8008c6c:	602f      	str	r7, [r5, #0]
 8008c6e:	2000      	movs	r0, #0
 8008c70:	e022      	b.n	8008cb8 <__sflush_r+0xf8>
 8008c72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c76:	b21b      	sxth	r3, r3
 8008c78:	e01b      	b.n	8008cb2 <__sflush_r+0xf2>
 8008c7a:	690f      	ldr	r7, [r1, #16]
 8008c7c:	2f00      	cmp	r7, #0
 8008c7e:	d0f6      	beq.n	8008c6e <__sflush_r+0xae>
 8008c80:	0793      	lsls	r3, r2, #30
 8008c82:	680e      	ldr	r6, [r1, #0]
 8008c84:	bf08      	it	eq
 8008c86:	694b      	ldreq	r3, [r1, #20]
 8008c88:	600f      	str	r7, [r1, #0]
 8008c8a:	bf18      	it	ne
 8008c8c:	2300      	movne	r3, #0
 8008c8e:	eba6 0807 	sub.w	r8, r6, r7
 8008c92:	608b      	str	r3, [r1, #8]
 8008c94:	f1b8 0f00 	cmp.w	r8, #0
 8008c98:	dde9      	ble.n	8008c6e <__sflush_r+0xae>
 8008c9a:	6a21      	ldr	r1, [r4, #32]
 8008c9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008c9e:	4643      	mov	r3, r8
 8008ca0:	463a      	mov	r2, r7
 8008ca2:	4628      	mov	r0, r5
 8008ca4:	47b0      	blx	r6
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	dc08      	bgt.n	8008cbc <__sflush_r+0xfc>
 8008caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cb2:	81a3      	strh	r3, [r4, #12]
 8008cb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cbc:	4407      	add	r7, r0
 8008cbe:	eba8 0800 	sub.w	r8, r8, r0
 8008cc2:	e7e7      	b.n	8008c94 <__sflush_r+0xd4>
 8008cc4:	20400001 	.word	0x20400001

08008cc8 <_fflush_r>:
 8008cc8:	b538      	push	{r3, r4, r5, lr}
 8008cca:	690b      	ldr	r3, [r1, #16]
 8008ccc:	4605      	mov	r5, r0
 8008cce:	460c      	mov	r4, r1
 8008cd0:	b913      	cbnz	r3, 8008cd8 <_fflush_r+0x10>
 8008cd2:	2500      	movs	r5, #0
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	bd38      	pop	{r3, r4, r5, pc}
 8008cd8:	b118      	cbz	r0, 8008ce2 <_fflush_r+0x1a>
 8008cda:	6a03      	ldr	r3, [r0, #32]
 8008cdc:	b90b      	cbnz	r3, 8008ce2 <_fflush_r+0x1a>
 8008cde:	f7fe f9fb 	bl	80070d8 <__sinit>
 8008ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d0f3      	beq.n	8008cd2 <_fflush_r+0xa>
 8008cea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008cec:	07d0      	lsls	r0, r2, #31
 8008cee:	d404      	bmi.n	8008cfa <_fflush_r+0x32>
 8008cf0:	0599      	lsls	r1, r3, #22
 8008cf2:	d402      	bmi.n	8008cfa <_fflush_r+0x32>
 8008cf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008cf6:	f7ff f87a 	bl	8007dee <__retarget_lock_acquire_recursive>
 8008cfa:	4628      	mov	r0, r5
 8008cfc:	4621      	mov	r1, r4
 8008cfe:	f7ff ff5f 	bl	8008bc0 <__sflush_r>
 8008d02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d04:	07da      	lsls	r2, r3, #31
 8008d06:	4605      	mov	r5, r0
 8008d08:	d4e4      	bmi.n	8008cd4 <_fflush_r+0xc>
 8008d0a:	89a3      	ldrh	r3, [r4, #12]
 8008d0c:	059b      	lsls	r3, r3, #22
 8008d0e:	d4e1      	bmi.n	8008cd4 <_fflush_r+0xc>
 8008d10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d12:	f7ff f86d 	bl	8007df0 <__retarget_lock_release_recursive>
 8008d16:	e7dd      	b.n	8008cd4 <_fflush_r+0xc>

08008d18 <__malloc_lock>:
 8008d18:	4801      	ldr	r0, [pc, #4]	@ (8008d20 <__malloc_lock+0x8>)
 8008d1a:	f7ff b868 	b.w	8007dee <__retarget_lock_acquire_recursive>
 8008d1e:	bf00      	nop
 8008d20:	20000698 	.word	0x20000698

08008d24 <__malloc_unlock>:
 8008d24:	4801      	ldr	r0, [pc, #4]	@ (8008d2c <__malloc_unlock+0x8>)
 8008d26:	f7ff b863 	b.w	8007df0 <__retarget_lock_release_recursive>
 8008d2a:	bf00      	nop
 8008d2c:	20000698 	.word	0x20000698

08008d30 <_Balloc>:
 8008d30:	b570      	push	{r4, r5, r6, lr}
 8008d32:	69c6      	ldr	r6, [r0, #28]
 8008d34:	4604      	mov	r4, r0
 8008d36:	460d      	mov	r5, r1
 8008d38:	b976      	cbnz	r6, 8008d58 <_Balloc+0x28>
 8008d3a:	2010      	movs	r0, #16
 8008d3c:	f000 fe0c 	bl	8009958 <malloc>
 8008d40:	4602      	mov	r2, r0
 8008d42:	61e0      	str	r0, [r4, #28]
 8008d44:	b920      	cbnz	r0, 8008d50 <_Balloc+0x20>
 8008d46:	4b18      	ldr	r3, [pc, #96]	@ (8008da8 <_Balloc+0x78>)
 8008d48:	4818      	ldr	r0, [pc, #96]	@ (8008dac <_Balloc+0x7c>)
 8008d4a:	216b      	movs	r1, #107	@ 0x6b
 8008d4c:	f000 fd88 	bl	8009860 <__assert_func>
 8008d50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d54:	6006      	str	r6, [r0, #0]
 8008d56:	60c6      	str	r6, [r0, #12]
 8008d58:	69e6      	ldr	r6, [r4, #28]
 8008d5a:	68f3      	ldr	r3, [r6, #12]
 8008d5c:	b183      	cbz	r3, 8008d80 <_Balloc+0x50>
 8008d5e:	69e3      	ldr	r3, [r4, #28]
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d66:	b9b8      	cbnz	r0, 8008d98 <_Balloc+0x68>
 8008d68:	2101      	movs	r1, #1
 8008d6a:	fa01 f605 	lsl.w	r6, r1, r5
 8008d6e:	1d72      	adds	r2, r6, #5
 8008d70:	0092      	lsls	r2, r2, #2
 8008d72:	4620      	mov	r0, r4
 8008d74:	f000 fd92 	bl	800989c <_calloc_r>
 8008d78:	b160      	cbz	r0, 8008d94 <_Balloc+0x64>
 8008d7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d7e:	e00e      	b.n	8008d9e <_Balloc+0x6e>
 8008d80:	2221      	movs	r2, #33	@ 0x21
 8008d82:	2104      	movs	r1, #4
 8008d84:	4620      	mov	r0, r4
 8008d86:	f000 fd89 	bl	800989c <_calloc_r>
 8008d8a:	69e3      	ldr	r3, [r4, #28]
 8008d8c:	60f0      	str	r0, [r6, #12]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d1e4      	bne.n	8008d5e <_Balloc+0x2e>
 8008d94:	2000      	movs	r0, #0
 8008d96:	bd70      	pop	{r4, r5, r6, pc}
 8008d98:	6802      	ldr	r2, [r0, #0]
 8008d9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d9e:	2300      	movs	r3, #0
 8008da0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008da4:	e7f7      	b.n	8008d96 <_Balloc+0x66>
 8008da6:	bf00      	nop
 8008da8:	0800a046 	.word	0x0800a046
 8008dac:	0800a05d 	.word	0x0800a05d

08008db0 <_Bfree>:
 8008db0:	b570      	push	{r4, r5, r6, lr}
 8008db2:	69c6      	ldr	r6, [r0, #28]
 8008db4:	4605      	mov	r5, r0
 8008db6:	460c      	mov	r4, r1
 8008db8:	b976      	cbnz	r6, 8008dd8 <_Bfree+0x28>
 8008dba:	2010      	movs	r0, #16
 8008dbc:	f000 fdcc 	bl	8009958 <malloc>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	61e8      	str	r0, [r5, #28]
 8008dc4:	b920      	cbnz	r0, 8008dd0 <_Bfree+0x20>
 8008dc6:	4b09      	ldr	r3, [pc, #36]	@ (8008dec <_Bfree+0x3c>)
 8008dc8:	4809      	ldr	r0, [pc, #36]	@ (8008df0 <_Bfree+0x40>)
 8008dca:	218f      	movs	r1, #143	@ 0x8f
 8008dcc:	f000 fd48 	bl	8009860 <__assert_func>
 8008dd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008dd4:	6006      	str	r6, [r0, #0]
 8008dd6:	60c6      	str	r6, [r0, #12]
 8008dd8:	b13c      	cbz	r4, 8008dea <_Bfree+0x3a>
 8008dda:	69eb      	ldr	r3, [r5, #28]
 8008ddc:	6862      	ldr	r2, [r4, #4]
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008de4:	6021      	str	r1, [r4, #0]
 8008de6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008dea:	bd70      	pop	{r4, r5, r6, pc}
 8008dec:	0800a046 	.word	0x0800a046
 8008df0:	0800a05d 	.word	0x0800a05d

08008df4 <__multadd>:
 8008df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008df8:	690d      	ldr	r5, [r1, #16]
 8008dfa:	4607      	mov	r7, r0
 8008dfc:	460c      	mov	r4, r1
 8008dfe:	461e      	mov	r6, r3
 8008e00:	f101 0c14 	add.w	ip, r1, #20
 8008e04:	2000      	movs	r0, #0
 8008e06:	f8dc 3000 	ldr.w	r3, [ip]
 8008e0a:	b299      	uxth	r1, r3
 8008e0c:	fb02 6101 	mla	r1, r2, r1, r6
 8008e10:	0c1e      	lsrs	r6, r3, #16
 8008e12:	0c0b      	lsrs	r3, r1, #16
 8008e14:	fb02 3306 	mla	r3, r2, r6, r3
 8008e18:	b289      	uxth	r1, r1
 8008e1a:	3001      	adds	r0, #1
 8008e1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008e20:	4285      	cmp	r5, r0
 8008e22:	f84c 1b04 	str.w	r1, [ip], #4
 8008e26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008e2a:	dcec      	bgt.n	8008e06 <__multadd+0x12>
 8008e2c:	b30e      	cbz	r6, 8008e72 <__multadd+0x7e>
 8008e2e:	68a3      	ldr	r3, [r4, #8]
 8008e30:	42ab      	cmp	r3, r5
 8008e32:	dc19      	bgt.n	8008e68 <__multadd+0x74>
 8008e34:	6861      	ldr	r1, [r4, #4]
 8008e36:	4638      	mov	r0, r7
 8008e38:	3101      	adds	r1, #1
 8008e3a:	f7ff ff79 	bl	8008d30 <_Balloc>
 8008e3e:	4680      	mov	r8, r0
 8008e40:	b928      	cbnz	r0, 8008e4e <__multadd+0x5a>
 8008e42:	4602      	mov	r2, r0
 8008e44:	4b0c      	ldr	r3, [pc, #48]	@ (8008e78 <__multadd+0x84>)
 8008e46:	480d      	ldr	r0, [pc, #52]	@ (8008e7c <__multadd+0x88>)
 8008e48:	21ba      	movs	r1, #186	@ 0xba
 8008e4a:	f000 fd09 	bl	8009860 <__assert_func>
 8008e4e:	6922      	ldr	r2, [r4, #16]
 8008e50:	3202      	adds	r2, #2
 8008e52:	f104 010c 	add.w	r1, r4, #12
 8008e56:	0092      	lsls	r2, r2, #2
 8008e58:	300c      	adds	r0, #12
 8008e5a:	f7fe ffca 	bl	8007df2 <memcpy>
 8008e5e:	4621      	mov	r1, r4
 8008e60:	4638      	mov	r0, r7
 8008e62:	f7ff ffa5 	bl	8008db0 <_Bfree>
 8008e66:	4644      	mov	r4, r8
 8008e68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e6c:	3501      	adds	r5, #1
 8008e6e:	615e      	str	r6, [r3, #20]
 8008e70:	6125      	str	r5, [r4, #16]
 8008e72:	4620      	mov	r0, r4
 8008e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e78:	08009fa2 	.word	0x08009fa2
 8008e7c:	0800a05d 	.word	0x0800a05d

08008e80 <__s2b>:
 8008e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e84:	460c      	mov	r4, r1
 8008e86:	4615      	mov	r5, r2
 8008e88:	461f      	mov	r7, r3
 8008e8a:	2209      	movs	r2, #9
 8008e8c:	3308      	adds	r3, #8
 8008e8e:	4606      	mov	r6, r0
 8008e90:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e94:	2100      	movs	r1, #0
 8008e96:	2201      	movs	r2, #1
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	db09      	blt.n	8008eb0 <__s2b+0x30>
 8008e9c:	4630      	mov	r0, r6
 8008e9e:	f7ff ff47 	bl	8008d30 <_Balloc>
 8008ea2:	b940      	cbnz	r0, 8008eb6 <__s2b+0x36>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	4b19      	ldr	r3, [pc, #100]	@ (8008f0c <__s2b+0x8c>)
 8008ea8:	4819      	ldr	r0, [pc, #100]	@ (8008f10 <__s2b+0x90>)
 8008eaa:	21d3      	movs	r1, #211	@ 0xd3
 8008eac:	f000 fcd8 	bl	8009860 <__assert_func>
 8008eb0:	0052      	lsls	r2, r2, #1
 8008eb2:	3101      	adds	r1, #1
 8008eb4:	e7f0      	b.n	8008e98 <__s2b+0x18>
 8008eb6:	9b08      	ldr	r3, [sp, #32]
 8008eb8:	6143      	str	r3, [r0, #20]
 8008eba:	2d09      	cmp	r5, #9
 8008ebc:	f04f 0301 	mov.w	r3, #1
 8008ec0:	6103      	str	r3, [r0, #16]
 8008ec2:	dd16      	ble.n	8008ef2 <__s2b+0x72>
 8008ec4:	f104 0909 	add.w	r9, r4, #9
 8008ec8:	46c8      	mov	r8, r9
 8008eca:	442c      	add	r4, r5
 8008ecc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008ed0:	4601      	mov	r1, r0
 8008ed2:	3b30      	subs	r3, #48	@ 0x30
 8008ed4:	220a      	movs	r2, #10
 8008ed6:	4630      	mov	r0, r6
 8008ed8:	f7ff ff8c 	bl	8008df4 <__multadd>
 8008edc:	45a0      	cmp	r8, r4
 8008ede:	d1f5      	bne.n	8008ecc <__s2b+0x4c>
 8008ee0:	f1a5 0408 	sub.w	r4, r5, #8
 8008ee4:	444c      	add	r4, r9
 8008ee6:	1b2d      	subs	r5, r5, r4
 8008ee8:	1963      	adds	r3, r4, r5
 8008eea:	42bb      	cmp	r3, r7
 8008eec:	db04      	blt.n	8008ef8 <__s2b+0x78>
 8008eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ef2:	340a      	adds	r4, #10
 8008ef4:	2509      	movs	r5, #9
 8008ef6:	e7f6      	b.n	8008ee6 <__s2b+0x66>
 8008ef8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008efc:	4601      	mov	r1, r0
 8008efe:	3b30      	subs	r3, #48	@ 0x30
 8008f00:	220a      	movs	r2, #10
 8008f02:	4630      	mov	r0, r6
 8008f04:	f7ff ff76 	bl	8008df4 <__multadd>
 8008f08:	e7ee      	b.n	8008ee8 <__s2b+0x68>
 8008f0a:	bf00      	nop
 8008f0c:	08009fa2 	.word	0x08009fa2
 8008f10:	0800a05d 	.word	0x0800a05d

08008f14 <__hi0bits>:
 8008f14:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008f18:	4603      	mov	r3, r0
 8008f1a:	bf36      	itet	cc
 8008f1c:	0403      	lslcc	r3, r0, #16
 8008f1e:	2000      	movcs	r0, #0
 8008f20:	2010      	movcc	r0, #16
 8008f22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f26:	bf3c      	itt	cc
 8008f28:	021b      	lslcc	r3, r3, #8
 8008f2a:	3008      	addcc	r0, #8
 8008f2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f30:	bf3c      	itt	cc
 8008f32:	011b      	lslcc	r3, r3, #4
 8008f34:	3004      	addcc	r0, #4
 8008f36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f3a:	bf3c      	itt	cc
 8008f3c:	009b      	lslcc	r3, r3, #2
 8008f3e:	3002      	addcc	r0, #2
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	db05      	blt.n	8008f50 <__hi0bits+0x3c>
 8008f44:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008f48:	f100 0001 	add.w	r0, r0, #1
 8008f4c:	bf08      	it	eq
 8008f4e:	2020      	moveq	r0, #32
 8008f50:	4770      	bx	lr

08008f52 <__lo0bits>:
 8008f52:	6803      	ldr	r3, [r0, #0]
 8008f54:	4602      	mov	r2, r0
 8008f56:	f013 0007 	ands.w	r0, r3, #7
 8008f5a:	d00b      	beq.n	8008f74 <__lo0bits+0x22>
 8008f5c:	07d9      	lsls	r1, r3, #31
 8008f5e:	d421      	bmi.n	8008fa4 <__lo0bits+0x52>
 8008f60:	0798      	lsls	r0, r3, #30
 8008f62:	bf49      	itett	mi
 8008f64:	085b      	lsrmi	r3, r3, #1
 8008f66:	089b      	lsrpl	r3, r3, #2
 8008f68:	2001      	movmi	r0, #1
 8008f6a:	6013      	strmi	r3, [r2, #0]
 8008f6c:	bf5c      	itt	pl
 8008f6e:	6013      	strpl	r3, [r2, #0]
 8008f70:	2002      	movpl	r0, #2
 8008f72:	4770      	bx	lr
 8008f74:	b299      	uxth	r1, r3
 8008f76:	b909      	cbnz	r1, 8008f7c <__lo0bits+0x2a>
 8008f78:	0c1b      	lsrs	r3, r3, #16
 8008f7a:	2010      	movs	r0, #16
 8008f7c:	b2d9      	uxtb	r1, r3
 8008f7e:	b909      	cbnz	r1, 8008f84 <__lo0bits+0x32>
 8008f80:	3008      	adds	r0, #8
 8008f82:	0a1b      	lsrs	r3, r3, #8
 8008f84:	0719      	lsls	r1, r3, #28
 8008f86:	bf04      	itt	eq
 8008f88:	091b      	lsreq	r3, r3, #4
 8008f8a:	3004      	addeq	r0, #4
 8008f8c:	0799      	lsls	r1, r3, #30
 8008f8e:	bf04      	itt	eq
 8008f90:	089b      	lsreq	r3, r3, #2
 8008f92:	3002      	addeq	r0, #2
 8008f94:	07d9      	lsls	r1, r3, #31
 8008f96:	d403      	bmi.n	8008fa0 <__lo0bits+0x4e>
 8008f98:	085b      	lsrs	r3, r3, #1
 8008f9a:	f100 0001 	add.w	r0, r0, #1
 8008f9e:	d003      	beq.n	8008fa8 <__lo0bits+0x56>
 8008fa0:	6013      	str	r3, [r2, #0]
 8008fa2:	4770      	bx	lr
 8008fa4:	2000      	movs	r0, #0
 8008fa6:	4770      	bx	lr
 8008fa8:	2020      	movs	r0, #32
 8008faa:	4770      	bx	lr

08008fac <__i2b>:
 8008fac:	b510      	push	{r4, lr}
 8008fae:	460c      	mov	r4, r1
 8008fb0:	2101      	movs	r1, #1
 8008fb2:	f7ff febd 	bl	8008d30 <_Balloc>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	b928      	cbnz	r0, 8008fc6 <__i2b+0x1a>
 8008fba:	4b05      	ldr	r3, [pc, #20]	@ (8008fd0 <__i2b+0x24>)
 8008fbc:	4805      	ldr	r0, [pc, #20]	@ (8008fd4 <__i2b+0x28>)
 8008fbe:	f240 1145 	movw	r1, #325	@ 0x145
 8008fc2:	f000 fc4d 	bl	8009860 <__assert_func>
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	6144      	str	r4, [r0, #20]
 8008fca:	6103      	str	r3, [r0, #16]
 8008fcc:	bd10      	pop	{r4, pc}
 8008fce:	bf00      	nop
 8008fd0:	08009fa2 	.word	0x08009fa2
 8008fd4:	0800a05d 	.word	0x0800a05d

08008fd8 <__multiply>:
 8008fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fdc:	4617      	mov	r7, r2
 8008fde:	690a      	ldr	r2, [r1, #16]
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	bfa8      	it	ge
 8008fe6:	463b      	movge	r3, r7
 8008fe8:	4689      	mov	r9, r1
 8008fea:	bfa4      	itt	ge
 8008fec:	460f      	movge	r7, r1
 8008fee:	4699      	movge	r9, r3
 8008ff0:	693d      	ldr	r5, [r7, #16]
 8008ff2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	6879      	ldr	r1, [r7, #4]
 8008ffa:	eb05 060a 	add.w	r6, r5, sl
 8008ffe:	42b3      	cmp	r3, r6
 8009000:	b085      	sub	sp, #20
 8009002:	bfb8      	it	lt
 8009004:	3101      	addlt	r1, #1
 8009006:	f7ff fe93 	bl	8008d30 <_Balloc>
 800900a:	b930      	cbnz	r0, 800901a <__multiply+0x42>
 800900c:	4602      	mov	r2, r0
 800900e:	4b41      	ldr	r3, [pc, #260]	@ (8009114 <__multiply+0x13c>)
 8009010:	4841      	ldr	r0, [pc, #260]	@ (8009118 <__multiply+0x140>)
 8009012:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009016:	f000 fc23 	bl	8009860 <__assert_func>
 800901a:	f100 0414 	add.w	r4, r0, #20
 800901e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009022:	4623      	mov	r3, r4
 8009024:	2200      	movs	r2, #0
 8009026:	4573      	cmp	r3, lr
 8009028:	d320      	bcc.n	800906c <__multiply+0x94>
 800902a:	f107 0814 	add.w	r8, r7, #20
 800902e:	f109 0114 	add.w	r1, r9, #20
 8009032:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009036:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800903a:	9302      	str	r3, [sp, #8]
 800903c:	1beb      	subs	r3, r5, r7
 800903e:	3b15      	subs	r3, #21
 8009040:	f023 0303 	bic.w	r3, r3, #3
 8009044:	3304      	adds	r3, #4
 8009046:	3715      	adds	r7, #21
 8009048:	42bd      	cmp	r5, r7
 800904a:	bf38      	it	cc
 800904c:	2304      	movcc	r3, #4
 800904e:	9301      	str	r3, [sp, #4]
 8009050:	9b02      	ldr	r3, [sp, #8]
 8009052:	9103      	str	r1, [sp, #12]
 8009054:	428b      	cmp	r3, r1
 8009056:	d80c      	bhi.n	8009072 <__multiply+0x9a>
 8009058:	2e00      	cmp	r6, #0
 800905a:	dd03      	ble.n	8009064 <__multiply+0x8c>
 800905c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009060:	2b00      	cmp	r3, #0
 8009062:	d055      	beq.n	8009110 <__multiply+0x138>
 8009064:	6106      	str	r6, [r0, #16]
 8009066:	b005      	add	sp, #20
 8009068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800906c:	f843 2b04 	str.w	r2, [r3], #4
 8009070:	e7d9      	b.n	8009026 <__multiply+0x4e>
 8009072:	f8b1 a000 	ldrh.w	sl, [r1]
 8009076:	f1ba 0f00 	cmp.w	sl, #0
 800907a:	d01f      	beq.n	80090bc <__multiply+0xe4>
 800907c:	46c4      	mov	ip, r8
 800907e:	46a1      	mov	r9, r4
 8009080:	2700      	movs	r7, #0
 8009082:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009086:	f8d9 3000 	ldr.w	r3, [r9]
 800908a:	fa1f fb82 	uxth.w	fp, r2
 800908e:	b29b      	uxth	r3, r3
 8009090:	fb0a 330b 	mla	r3, sl, fp, r3
 8009094:	443b      	add	r3, r7
 8009096:	f8d9 7000 	ldr.w	r7, [r9]
 800909a:	0c12      	lsrs	r2, r2, #16
 800909c:	0c3f      	lsrs	r7, r7, #16
 800909e:	fb0a 7202 	mla	r2, sl, r2, r7
 80090a2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090ac:	4565      	cmp	r5, ip
 80090ae:	f849 3b04 	str.w	r3, [r9], #4
 80090b2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80090b6:	d8e4      	bhi.n	8009082 <__multiply+0xaa>
 80090b8:	9b01      	ldr	r3, [sp, #4]
 80090ba:	50e7      	str	r7, [r4, r3]
 80090bc:	9b03      	ldr	r3, [sp, #12]
 80090be:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80090c2:	3104      	adds	r1, #4
 80090c4:	f1b9 0f00 	cmp.w	r9, #0
 80090c8:	d020      	beq.n	800910c <__multiply+0x134>
 80090ca:	6823      	ldr	r3, [r4, #0]
 80090cc:	4647      	mov	r7, r8
 80090ce:	46a4      	mov	ip, r4
 80090d0:	f04f 0a00 	mov.w	sl, #0
 80090d4:	f8b7 b000 	ldrh.w	fp, [r7]
 80090d8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80090dc:	fb09 220b 	mla	r2, r9, fp, r2
 80090e0:	4452      	add	r2, sl
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090e8:	f84c 3b04 	str.w	r3, [ip], #4
 80090ec:	f857 3b04 	ldr.w	r3, [r7], #4
 80090f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80090f4:	f8bc 3000 	ldrh.w	r3, [ip]
 80090f8:	fb09 330a 	mla	r3, r9, sl, r3
 80090fc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009100:	42bd      	cmp	r5, r7
 8009102:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009106:	d8e5      	bhi.n	80090d4 <__multiply+0xfc>
 8009108:	9a01      	ldr	r2, [sp, #4]
 800910a:	50a3      	str	r3, [r4, r2]
 800910c:	3404      	adds	r4, #4
 800910e:	e79f      	b.n	8009050 <__multiply+0x78>
 8009110:	3e01      	subs	r6, #1
 8009112:	e7a1      	b.n	8009058 <__multiply+0x80>
 8009114:	08009fa2 	.word	0x08009fa2
 8009118:	0800a05d 	.word	0x0800a05d

0800911c <__pow5mult>:
 800911c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009120:	4615      	mov	r5, r2
 8009122:	f012 0203 	ands.w	r2, r2, #3
 8009126:	4607      	mov	r7, r0
 8009128:	460e      	mov	r6, r1
 800912a:	d007      	beq.n	800913c <__pow5mult+0x20>
 800912c:	4c25      	ldr	r4, [pc, #148]	@ (80091c4 <__pow5mult+0xa8>)
 800912e:	3a01      	subs	r2, #1
 8009130:	2300      	movs	r3, #0
 8009132:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009136:	f7ff fe5d 	bl	8008df4 <__multadd>
 800913a:	4606      	mov	r6, r0
 800913c:	10ad      	asrs	r5, r5, #2
 800913e:	d03d      	beq.n	80091bc <__pow5mult+0xa0>
 8009140:	69fc      	ldr	r4, [r7, #28]
 8009142:	b97c      	cbnz	r4, 8009164 <__pow5mult+0x48>
 8009144:	2010      	movs	r0, #16
 8009146:	f000 fc07 	bl	8009958 <malloc>
 800914a:	4602      	mov	r2, r0
 800914c:	61f8      	str	r0, [r7, #28]
 800914e:	b928      	cbnz	r0, 800915c <__pow5mult+0x40>
 8009150:	4b1d      	ldr	r3, [pc, #116]	@ (80091c8 <__pow5mult+0xac>)
 8009152:	481e      	ldr	r0, [pc, #120]	@ (80091cc <__pow5mult+0xb0>)
 8009154:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009158:	f000 fb82 	bl	8009860 <__assert_func>
 800915c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009160:	6004      	str	r4, [r0, #0]
 8009162:	60c4      	str	r4, [r0, #12]
 8009164:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009168:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800916c:	b94c      	cbnz	r4, 8009182 <__pow5mult+0x66>
 800916e:	f240 2171 	movw	r1, #625	@ 0x271
 8009172:	4638      	mov	r0, r7
 8009174:	f7ff ff1a 	bl	8008fac <__i2b>
 8009178:	2300      	movs	r3, #0
 800917a:	f8c8 0008 	str.w	r0, [r8, #8]
 800917e:	4604      	mov	r4, r0
 8009180:	6003      	str	r3, [r0, #0]
 8009182:	f04f 0900 	mov.w	r9, #0
 8009186:	07eb      	lsls	r3, r5, #31
 8009188:	d50a      	bpl.n	80091a0 <__pow5mult+0x84>
 800918a:	4631      	mov	r1, r6
 800918c:	4622      	mov	r2, r4
 800918e:	4638      	mov	r0, r7
 8009190:	f7ff ff22 	bl	8008fd8 <__multiply>
 8009194:	4631      	mov	r1, r6
 8009196:	4680      	mov	r8, r0
 8009198:	4638      	mov	r0, r7
 800919a:	f7ff fe09 	bl	8008db0 <_Bfree>
 800919e:	4646      	mov	r6, r8
 80091a0:	106d      	asrs	r5, r5, #1
 80091a2:	d00b      	beq.n	80091bc <__pow5mult+0xa0>
 80091a4:	6820      	ldr	r0, [r4, #0]
 80091a6:	b938      	cbnz	r0, 80091b8 <__pow5mult+0x9c>
 80091a8:	4622      	mov	r2, r4
 80091aa:	4621      	mov	r1, r4
 80091ac:	4638      	mov	r0, r7
 80091ae:	f7ff ff13 	bl	8008fd8 <__multiply>
 80091b2:	6020      	str	r0, [r4, #0]
 80091b4:	f8c0 9000 	str.w	r9, [r0]
 80091b8:	4604      	mov	r4, r0
 80091ba:	e7e4      	b.n	8009186 <__pow5mult+0x6a>
 80091bc:	4630      	mov	r0, r6
 80091be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091c2:	bf00      	nop
 80091c4:	0800a24c 	.word	0x0800a24c
 80091c8:	0800a046 	.word	0x0800a046
 80091cc:	0800a05d 	.word	0x0800a05d

080091d0 <__lshift>:
 80091d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091d4:	460c      	mov	r4, r1
 80091d6:	6849      	ldr	r1, [r1, #4]
 80091d8:	6923      	ldr	r3, [r4, #16]
 80091da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80091de:	68a3      	ldr	r3, [r4, #8]
 80091e0:	4607      	mov	r7, r0
 80091e2:	4691      	mov	r9, r2
 80091e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80091e8:	f108 0601 	add.w	r6, r8, #1
 80091ec:	42b3      	cmp	r3, r6
 80091ee:	db0b      	blt.n	8009208 <__lshift+0x38>
 80091f0:	4638      	mov	r0, r7
 80091f2:	f7ff fd9d 	bl	8008d30 <_Balloc>
 80091f6:	4605      	mov	r5, r0
 80091f8:	b948      	cbnz	r0, 800920e <__lshift+0x3e>
 80091fa:	4602      	mov	r2, r0
 80091fc:	4b28      	ldr	r3, [pc, #160]	@ (80092a0 <__lshift+0xd0>)
 80091fe:	4829      	ldr	r0, [pc, #164]	@ (80092a4 <__lshift+0xd4>)
 8009200:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009204:	f000 fb2c 	bl	8009860 <__assert_func>
 8009208:	3101      	adds	r1, #1
 800920a:	005b      	lsls	r3, r3, #1
 800920c:	e7ee      	b.n	80091ec <__lshift+0x1c>
 800920e:	2300      	movs	r3, #0
 8009210:	f100 0114 	add.w	r1, r0, #20
 8009214:	f100 0210 	add.w	r2, r0, #16
 8009218:	4618      	mov	r0, r3
 800921a:	4553      	cmp	r3, sl
 800921c:	db33      	blt.n	8009286 <__lshift+0xb6>
 800921e:	6920      	ldr	r0, [r4, #16]
 8009220:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009224:	f104 0314 	add.w	r3, r4, #20
 8009228:	f019 091f 	ands.w	r9, r9, #31
 800922c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009230:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009234:	d02b      	beq.n	800928e <__lshift+0xbe>
 8009236:	f1c9 0e20 	rsb	lr, r9, #32
 800923a:	468a      	mov	sl, r1
 800923c:	2200      	movs	r2, #0
 800923e:	6818      	ldr	r0, [r3, #0]
 8009240:	fa00 f009 	lsl.w	r0, r0, r9
 8009244:	4310      	orrs	r0, r2
 8009246:	f84a 0b04 	str.w	r0, [sl], #4
 800924a:	f853 2b04 	ldr.w	r2, [r3], #4
 800924e:	459c      	cmp	ip, r3
 8009250:	fa22 f20e 	lsr.w	r2, r2, lr
 8009254:	d8f3      	bhi.n	800923e <__lshift+0x6e>
 8009256:	ebac 0304 	sub.w	r3, ip, r4
 800925a:	3b15      	subs	r3, #21
 800925c:	f023 0303 	bic.w	r3, r3, #3
 8009260:	3304      	adds	r3, #4
 8009262:	f104 0015 	add.w	r0, r4, #21
 8009266:	4560      	cmp	r0, ip
 8009268:	bf88      	it	hi
 800926a:	2304      	movhi	r3, #4
 800926c:	50ca      	str	r2, [r1, r3]
 800926e:	b10a      	cbz	r2, 8009274 <__lshift+0xa4>
 8009270:	f108 0602 	add.w	r6, r8, #2
 8009274:	3e01      	subs	r6, #1
 8009276:	4638      	mov	r0, r7
 8009278:	612e      	str	r6, [r5, #16]
 800927a:	4621      	mov	r1, r4
 800927c:	f7ff fd98 	bl	8008db0 <_Bfree>
 8009280:	4628      	mov	r0, r5
 8009282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009286:	f842 0f04 	str.w	r0, [r2, #4]!
 800928a:	3301      	adds	r3, #1
 800928c:	e7c5      	b.n	800921a <__lshift+0x4a>
 800928e:	3904      	subs	r1, #4
 8009290:	f853 2b04 	ldr.w	r2, [r3], #4
 8009294:	f841 2f04 	str.w	r2, [r1, #4]!
 8009298:	459c      	cmp	ip, r3
 800929a:	d8f9      	bhi.n	8009290 <__lshift+0xc0>
 800929c:	e7ea      	b.n	8009274 <__lshift+0xa4>
 800929e:	bf00      	nop
 80092a0:	08009fa2 	.word	0x08009fa2
 80092a4:	0800a05d 	.word	0x0800a05d

080092a8 <__mcmp>:
 80092a8:	690a      	ldr	r2, [r1, #16]
 80092aa:	4603      	mov	r3, r0
 80092ac:	6900      	ldr	r0, [r0, #16]
 80092ae:	1a80      	subs	r0, r0, r2
 80092b0:	b530      	push	{r4, r5, lr}
 80092b2:	d10e      	bne.n	80092d2 <__mcmp+0x2a>
 80092b4:	3314      	adds	r3, #20
 80092b6:	3114      	adds	r1, #20
 80092b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80092bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80092c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80092c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80092c8:	4295      	cmp	r5, r2
 80092ca:	d003      	beq.n	80092d4 <__mcmp+0x2c>
 80092cc:	d205      	bcs.n	80092da <__mcmp+0x32>
 80092ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80092d2:	bd30      	pop	{r4, r5, pc}
 80092d4:	42a3      	cmp	r3, r4
 80092d6:	d3f3      	bcc.n	80092c0 <__mcmp+0x18>
 80092d8:	e7fb      	b.n	80092d2 <__mcmp+0x2a>
 80092da:	2001      	movs	r0, #1
 80092dc:	e7f9      	b.n	80092d2 <__mcmp+0x2a>
	...

080092e0 <__mdiff>:
 80092e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e4:	4689      	mov	r9, r1
 80092e6:	4606      	mov	r6, r0
 80092e8:	4611      	mov	r1, r2
 80092ea:	4648      	mov	r0, r9
 80092ec:	4614      	mov	r4, r2
 80092ee:	f7ff ffdb 	bl	80092a8 <__mcmp>
 80092f2:	1e05      	subs	r5, r0, #0
 80092f4:	d112      	bne.n	800931c <__mdiff+0x3c>
 80092f6:	4629      	mov	r1, r5
 80092f8:	4630      	mov	r0, r6
 80092fa:	f7ff fd19 	bl	8008d30 <_Balloc>
 80092fe:	4602      	mov	r2, r0
 8009300:	b928      	cbnz	r0, 800930e <__mdiff+0x2e>
 8009302:	4b3f      	ldr	r3, [pc, #252]	@ (8009400 <__mdiff+0x120>)
 8009304:	f240 2137 	movw	r1, #567	@ 0x237
 8009308:	483e      	ldr	r0, [pc, #248]	@ (8009404 <__mdiff+0x124>)
 800930a:	f000 faa9 	bl	8009860 <__assert_func>
 800930e:	2301      	movs	r3, #1
 8009310:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009314:	4610      	mov	r0, r2
 8009316:	b003      	add	sp, #12
 8009318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800931c:	bfbc      	itt	lt
 800931e:	464b      	movlt	r3, r9
 8009320:	46a1      	movlt	r9, r4
 8009322:	4630      	mov	r0, r6
 8009324:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009328:	bfba      	itte	lt
 800932a:	461c      	movlt	r4, r3
 800932c:	2501      	movlt	r5, #1
 800932e:	2500      	movge	r5, #0
 8009330:	f7ff fcfe 	bl	8008d30 <_Balloc>
 8009334:	4602      	mov	r2, r0
 8009336:	b918      	cbnz	r0, 8009340 <__mdiff+0x60>
 8009338:	4b31      	ldr	r3, [pc, #196]	@ (8009400 <__mdiff+0x120>)
 800933a:	f240 2145 	movw	r1, #581	@ 0x245
 800933e:	e7e3      	b.n	8009308 <__mdiff+0x28>
 8009340:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009344:	6926      	ldr	r6, [r4, #16]
 8009346:	60c5      	str	r5, [r0, #12]
 8009348:	f109 0310 	add.w	r3, r9, #16
 800934c:	f109 0514 	add.w	r5, r9, #20
 8009350:	f104 0e14 	add.w	lr, r4, #20
 8009354:	f100 0b14 	add.w	fp, r0, #20
 8009358:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800935c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009360:	9301      	str	r3, [sp, #4]
 8009362:	46d9      	mov	r9, fp
 8009364:	f04f 0c00 	mov.w	ip, #0
 8009368:	9b01      	ldr	r3, [sp, #4]
 800936a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800936e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009372:	9301      	str	r3, [sp, #4]
 8009374:	fa1f f38a 	uxth.w	r3, sl
 8009378:	4619      	mov	r1, r3
 800937a:	b283      	uxth	r3, r0
 800937c:	1acb      	subs	r3, r1, r3
 800937e:	0c00      	lsrs	r0, r0, #16
 8009380:	4463      	add	r3, ip
 8009382:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009386:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800938a:	b29b      	uxth	r3, r3
 800938c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009390:	4576      	cmp	r6, lr
 8009392:	f849 3b04 	str.w	r3, [r9], #4
 8009396:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800939a:	d8e5      	bhi.n	8009368 <__mdiff+0x88>
 800939c:	1b33      	subs	r3, r6, r4
 800939e:	3b15      	subs	r3, #21
 80093a0:	f023 0303 	bic.w	r3, r3, #3
 80093a4:	3415      	adds	r4, #21
 80093a6:	3304      	adds	r3, #4
 80093a8:	42a6      	cmp	r6, r4
 80093aa:	bf38      	it	cc
 80093ac:	2304      	movcc	r3, #4
 80093ae:	441d      	add	r5, r3
 80093b0:	445b      	add	r3, fp
 80093b2:	461e      	mov	r6, r3
 80093b4:	462c      	mov	r4, r5
 80093b6:	4544      	cmp	r4, r8
 80093b8:	d30e      	bcc.n	80093d8 <__mdiff+0xf8>
 80093ba:	f108 0103 	add.w	r1, r8, #3
 80093be:	1b49      	subs	r1, r1, r5
 80093c0:	f021 0103 	bic.w	r1, r1, #3
 80093c4:	3d03      	subs	r5, #3
 80093c6:	45a8      	cmp	r8, r5
 80093c8:	bf38      	it	cc
 80093ca:	2100      	movcc	r1, #0
 80093cc:	440b      	add	r3, r1
 80093ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80093d2:	b191      	cbz	r1, 80093fa <__mdiff+0x11a>
 80093d4:	6117      	str	r7, [r2, #16]
 80093d6:	e79d      	b.n	8009314 <__mdiff+0x34>
 80093d8:	f854 1b04 	ldr.w	r1, [r4], #4
 80093dc:	46e6      	mov	lr, ip
 80093de:	0c08      	lsrs	r0, r1, #16
 80093e0:	fa1c fc81 	uxtah	ip, ip, r1
 80093e4:	4471      	add	r1, lr
 80093e6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80093ea:	b289      	uxth	r1, r1
 80093ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80093f0:	f846 1b04 	str.w	r1, [r6], #4
 80093f4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80093f8:	e7dd      	b.n	80093b6 <__mdiff+0xd6>
 80093fa:	3f01      	subs	r7, #1
 80093fc:	e7e7      	b.n	80093ce <__mdiff+0xee>
 80093fe:	bf00      	nop
 8009400:	08009fa2 	.word	0x08009fa2
 8009404:	0800a05d 	.word	0x0800a05d

08009408 <__ulp>:
 8009408:	b082      	sub	sp, #8
 800940a:	ed8d 0b00 	vstr	d0, [sp]
 800940e:	9a01      	ldr	r2, [sp, #4]
 8009410:	4b0f      	ldr	r3, [pc, #60]	@ (8009450 <__ulp+0x48>)
 8009412:	4013      	ands	r3, r2
 8009414:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009418:	2b00      	cmp	r3, #0
 800941a:	dc08      	bgt.n	800942e <__ulp+0x26>
 800941c:	425b      	negs	r3, r3
 800941e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009422:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009426:	da04      	bge.n	8009432 <__ulp+0x2a>
 8009428:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800942c:	4113      	asrs	r3, r2
 800942e:	2200      	movs	r2, #0
 8009430:	e008      	b.n	8009444 <__ulp+0x3c>
 8009432:	f1a2 0314 	sub.w	r3, r2, #20
 8009436:	2b1e      	cmp	r3, #30
 8009438:	bfda      	itte	le
 800943a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800943e:	40da      	lsrle	r2, r3
 8009440:	2201      	movgt	r2, #1
 8009442:	2300      	movs	r3, #0
 8009444:	4619      	mov	r1, r3
 8009446:	4610      	mov	r0, r2
 8009448:	ec41 0b10 	vmov	d0, r0, r1
 800944c:	b002      	add	sp, #8
 800944e:	4770      	bx	lr
 8009450:	7ff00000 	.word	0x7ff00000

08009454 <__b2d>:
 8009454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009458:	6906      	ldr	r6, [r0, #16]
 800945a:	f100 0814 	add.w	r8, r0, #20
 800945e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009462:	1f37      	subs	r7, r6, #4
 8009464:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009468:	4610      	mov	r0, r2
 800946a:	f7ff fd53 	bl	8008f14 <__hi0bits>
 800946e:	f1c0 0320 	rsb	r3, r0, #32
 8009472:	280a      	cmp	r0, #10
 8009474:	600b      	str	r3, [r1, #0]
 8009476:	491b      	ldr	r1, [pc, #108]	@ (80094e4 <__b2d+0x90>)
 8009478:	dc15      	bgt.n	80094a6 <__b2d+0x52>
 800947a:	f1c0 0c0b 	rsb	ip, r0, #11
 800947e:	fa22 f30c 	lsr.w	r3, r2, ip
 8009482:	45b8      	cmp	r8, r7
 8009484:	ea43 0501 	orr.w	r5, r3, r1
 8009488:	bf34      	ite	cc
 800948a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800948e:	2300      	movcs	r3, #0
 8009490:	3015      	adds	r0, #21
 8009492:	fa02 f000 	lsl.w	r0, r2, r0
 8009496:	fa23 f30c 	lsr.w	r3, r3, ip
 800949a:	4303      	orrs	r3, r0
 800949c:	461c      	mov	r4, r3
 800949e:	ec45 4b10 	vmov	d0, r4, r5
 80094a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094a6:	45b8      	cmp	r8, r7
 80094a8:	bf3a      	itte	cc
 80094aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80094ae:	f1a6 0708 	subcc.w	r7, r6, #8
 80094b2:	2300      	movcs	r3, #0
 80094b4:	380b      	subs	r0, #11
 80094b6:	d012      	beq.n	80094de <__b2d+0x8a>
 80094b8:	f1c0 0120 	rsb	r1, r0, #32
 80094bc:	fa23 f401 	lsr.w	r4, r3, r1
 80094c0:	4082      	lsls	r2, r0
 80094c2:	4322      	orrs	r2, r4
 80094c4:	4547      	cmp	r7, r8
 80094c6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80094ca:	bf8c      	ite	hi
 80094cc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80094d0:	2200      	movls	r2, #0
 80094d2:	4083      	lsls	r3, r0
 80094d4:	40ca      	lsrs	r2, r1
 80094d6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80094da:	4313      	orrs	r3, r2
 80094dc:	e7de      	b.n	800949c <__b2d+0x48>
 80094de:	ea42 0501 	orr.w	r5, r2, r1
 80094e2:	e7db      	b.n	800949c <__b2d+0x48>
 80094e4:	3ff00000 	.word	0x3ff00000

080094e8 <__d2b>:
 80094e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80094ec:	460f      	mov	r7, r1
 80094ee:	2101      	movs	r1, #1
 80094f0:	ec59 8b10 	vmov	r8, r9, d0
 80094f4:	4616      	mov	r6, r2
 80094f6:	f7ff fc1b 	bl	8008d30 <_Balloc>
 80094fa:	4604      	mov	r4, r0
 80094fc:	b930      	cbnz	r0, 800950c <__d2b+0x24>
 80094fe:	4602      	mov	r2, r0
 8009500:	4b23      	ldr	r3, [pc, #140]	@ (8009590 <__d2b+0xa8>)
 8009502:	4824      	ldr	r0, [pc, #144]	@ (8009594 <__d2b+0xac>)
 8009504:	f240 310f 	movw	r1, #783	@ 0x30f
 8009508:	f000 f9aa 	bl	8009860 <__assert_func>
 800950c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009510:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009514:	b10d      	cbz	r5, 800951a <__d2b+0x32>
 8009516:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800951a:	9301      	str	r3, [sp, #4]
 800951c:	f1b8 0300 	subs.w	r3, r8, #0
 8009520:	d023      	beq.n	800956a <__d2b+0x82>
 8009522:	4668      	mov	r0, sp
 8009524:	9300      	str	r3, [sp, #0]
 8009526:	f7ff fd14 	bl	8008f52 <__lo0bits>
 800952a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800952e:	b1d0      	cbz	r0, 8009566 <__d2b+0x7e>
 8009530:	f1c0 0320 	rsb	r3, r0, #32
 8009534:	fa02 f303 	lsl.w	r3, r2, r3
 8009538:	430b      	orrs	r3, r1
 800953a:	40c2      	lsrs	r2, r0
 800953c:	6163      	str	r3, [r4, #20]
 800953e:	9201      	str	r2, [sp, #4]
 8009540:	9b01      	ldr	r3, [sp, #4]
 8009542:	61a3      	str	r3, [r4, #24]
 8009544:	2b00      	cmp	r3, #0
 8009546:	bf0c      	ite	eq
 8009548:	2201      	moveq	r2, #1
 800954a:	2202      	movne	r2, #2
 800954c:	6122      	str	r2, [r4, #16]
 800954e:	b1a5      	cbz	r5, 800957a <__d2b+0x92>
 8009550:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009554:	4405      	add	r5, r0
 8009556:	603d      	str	r5, [r7, #0]
 8009558:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800955c:	6030      	str	r0, [r6, #0]
 800955e:	4620      	mov	r0, r4
 8009560:	b003      	add	sp, #12
 8009562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009566:	6161      	str	r1, [r4, #20]
 8009568:	e7ea      	b.n	8009540 <__d2b+0x58>
 800956a:	a801      	add	r0, sp, #4
 800956c:	f7ff fcf1 	bl	8008f52 <__lo0bits>
 8009570:	9b01      	ldr	r3, [sp, #4]
 8009572:	6163      	str	r3, [r4, #20]
 8009574:	3020      	adds	r0, #32
 8009576:	2201      	movs	r2, #1
 8009578:	e7e8      	b.n	800954c <__d2b+0x64>
 800957a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800957e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009582:	6038      	str	r0, [r7, #0]
 8009584:	6918      	ldr	r0, [r3, #16]
 8009586:	f7ff fcc5 	bl	8008f14 <__hi0bits>
 800958a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800958e:	e7e5      	b.n	800955c <__d2b+0x74>
 8009590:	08009fa2 	.word	0x08009fa2
 8009594:	0800a05d 	.word	0x0800a05d

08009598 <__ratio>:
 8009598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800959c:	b085      	sub	sp, #20
 800959e:	e9cd 1000 	strd	r1, r0, [sp]
 80095a2:	a902      	add	r1, sp, #8
 80095a4:	f7ff ff56 	bl	8009454 <__b2d>
 80095a8:	9800      	ldr	r0, [sp, #0]
 80095aa:	a903      	add	r1, sp, #12
 80095ac:	ec55 4b10 	vmov	r4, r5, d0
 80095b0:	f7ff ff50 	bl	8009454 <__b2d>
 80095b4:	9b01      	ldr	r3, [sp, #4]
 80095b6:	6919      	ldr	r1, [r3, #16]
 80095b8:	9b00      	ldr	r3, [sp, #0]
 80095ba:	691b      	ldr	r3, [r3, #16]
 80095bc:	1ac9      	subs	r1, r1, r3
 80095be:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80095c2:	1a9b      	subs	r3, r3, r2
 80095c4:	ec5b ab10 	vmov	sl, fp, d0
 80095c8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	bfce      	itee	gt
 80095d0:	462a      	movgt	r2, r5
 80095d2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80095d6:	465a      	movle	r2, fp
 80095d8:	462f      	mov	r7, r5
 80095da:	46d9      	mov	r9, fp
 80095dc:	bfcc      	ite	gt
 80095de:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80095e2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80095e6:	464b      	mov	r3, r9
 80095e8:	4652      	mov	r2, sl
 80095ea:	4620      	mov	r0, r4
 80095ec:	4639      	mov	r1, r7
 80095ee:	f7f7 f945 	bl	800087c <__aeabi_ddiv>
 80095f2:	ec41 0b10 	vmov	d0, r0, r1
 80095f6:	b005      	add	sp, #20
 80095f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080095fc <__copybits>:
 80095fc:	3901      	subs	r1, #1
 80095fe:	b570      	push	{r4, r5, r6, lr}
 8009600:	1149      	asrs	r1, r1, #5
 8009602:	6914      	ldr	r4, [r2, #16]
 8009604:	3101      	adds	r1, #1
 8009606:	f102 0314 	add.w	r3, r2, #20
 800960a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800960e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009612:	1f05      	subs	r5, r0, #4
 8009614:	42a3      	cmp	r3, r4
 8009616:	d30c      	bcc.n	8009632 <__copybits+0x36>
 8009618:	1aa3      	subs	r3, r4, r2
 800961a:	3b11      	subs	r3, #17
 800961c:	f023 0303 	bic.w	r3, r3, #3
 8009620:	3211      	adds	r2, #17
 8009622:	42a2      	cmp	r2, r4
 8009624:	bf88      	it	hi
 8009626:	2300      	movhi	r3, #0
 8009628:	4418      	add	r0, r3
 800962a:	2300      	movs	r3, #0
 800962c:	4288      	cmp	r0, r1
 800962e:	d305      	bcc.n	800963c <__copybits+0x40>
 8009630:	bd70      	pop	{r4, r5, r6, pc}
 8009632:	f853 6b04 	ldr.w	r6, [r3], #4
 8009636:	f845 6f04 	str.w	r6, [r5, #4]!
 800963a:	e7eb      	b.n	8009614 <__copybits+0x18>
 800963c:	f840 3b04 	str.w	r3, [r0], #4
 8009640:	e7f4      	b.n	800962c <__copybits+0x30>

08009642 <__any_on>:
 8009642:	f100 0214 	add.w	r2, r0, #20
 8009646:	6900      	ldr	r0, [r0, #16]
 8009648:	114b      	asrs	r3, r1, #5
 800964a:	4298      	cmp	r0, r3
 800964c:	b510      	push	{r4, lr}
 800964e:	db11      	blt.n	8009674 <__any_on+0x32>
 8009650:	dd0a      	ble.n	8009668 <__any_on+0x26>
 8009652:	f011 011f 	ands.w	r1, r1, #31
 8009656:	d007      	beq.n	8009668 <__any_on+0x26>
 8009658:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800965c:	fa24 f001 	lsr.w	r0, r4, r1
 8009660:	fa00 f101 	lsl.w	r1, r0, r1
 8009664:	428c      	cmp	r4, r1
 8009666:	d10b      	bne.n	8009680 <__any_on+0x3e>
 8009668:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800966c:	4293      	cmp	r3, r2
 800966e:	d803      	bhi.n	8009678 <__any_on+0x36>
 8009670:	2000      	movs	r0, #0
 8009672:	bd10      	pop	{r4, pc}
 8009674:	4603      	mov	r3, r0
 8009676:	e7f7      	b.n	8009668 <__any_on+0x26>
 8009678:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800967c:	2900      	cmp	r1, #0
 800967e:	d0f5      	beq.n	800966c <__any_on+0x2a>
 8009680:	2001      	movs	r0, #1
 8009682:	e7f6      	b.n	8009672 <__any_on+0x30>

08009684 <__sread>:
 8009684:	b510      	push	{r4, lr}
 8009686:	460c      	mov	r4, r1
 8009688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800968c:	f000 f8a4 	bl	80097d8 <_read_r>
 8009690:	2800      	cmp	r0, #0
 8009692:	bfab      	itete	ge
 8009694:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009696:	89a3      	ldrhlt	r3, [r4, #12]
 8009698:	181b      	addge	r3, r3, r0
 800969a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800969e:	bfac      	ite	ge
 80096a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80096a2:	81a3      	strhlt	r3, [r4, #12]
 80096a4:	bd10      	pop	{r4, pc}

080096a6 <__swrite>:
 80096a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096aa:	461f      	mov	r7, r3
 80096ac:	898b      	ldrh	r3, [r1, #12]
 80096ae:	05db      	lsls	r3, r3, #23
 80096b0:	4605      	mov	r5, r0
 80096b2:	460c      	mov	r4, r1
 80096b4:	4616      	mov	r6, r2
 80096b6:	d505      	bpl.n	80096c4 <__swrite+0x1e>
 80096b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096bc:	2302      	movs	r3, #2
 80096be:	2200      	movs	r2, #0
 80096c0:	f000 f878 	bl	80097b4 <_lseek_r>
 80096c4:	89a3      	ldrh	r3, [r4, #12]
 80096c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80096ce:	81a3      	strh	r3, [r4, #12]
 80096d0:	4632      	mov	r2, r6
 80096d2:	463b      	mov	r3, r7
 80096d4:	4628      	mov	r0, r5
 80096d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096da:	f000 b89f 	b.w	800981c <_write_r>

080096de <__sseek>:
 80096de:	b510      	push	{r4, lr}
 80096e0:	460c      	mov	r4, r1
 80096e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096e6:	f000 f865 	bl	80097b4 <_lseek_r>
 80096ea:	1c43      	adds	r3, r0, #1
 80096ec:	89a3      	ldrh	r3, [r4, #12]
 80096ee:	bf15      	itete	ne
 80096f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80096f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80096f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80096fa:	81a3      	strheq	r3, [r4, #12]
 80096fc:	bf18      	it	ne
 80096fe:	81a3      	strhne	r3, [r4, #12]
 8009700:	bd10      	pop	{r4, pc}

08009702 <__sclose>:
 8009702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009706:	f000 b89b 	b.w	8009840 <_close_r>

0800970a <_realloc_r>:
 800970a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800970e:	4607      	mov	r7, r0
 8009710:	4614      	mov	r4, r2
 8009712:	460d      	mov	r5, r1
 8009714:	b921      	cbnz	r1, 8009720 <_realloc_r+0x16>
 8009716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800971a:	4611      	mov	r1, r2
 800971c:	f7ff b832 	b.w	8008784 <_malloc_r>
 8009720:	b92a      	cbnz	r2, 800972e <_realloc_r+0x24>
 8009722:	f000 f8cf 	bl	80098c4 <_free_r>
 8009726:	4625      	mov	r5, r4
 8009728:	4628      	mov	r0, r5
 800972a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800972e:	f000 f91b 	bl	8009968 <_malloc_usable_size_r>
 8009732:	4284      	cmp	r4, r0
 8009734:	4606      	mov	r6, r0
 8009736:	d802      	bhi.n	800973e <_realloc_r+0x34>
 8009738:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800973c:	d8f4      	bhi.n	8009728 <_realloc_r+0x1e>
 800973e:	4621      	mov	r1, r4
 8009740:	4638      	mov	r0, r7
 8009742:	f7ff f81f 	bl	8008784 <_malloc_r>
 8009746:	4680      	mov	r8, r0
 8009748:	b908      	cbnz	r0, 800974e <_realloc_r+0x44>
 800974a:	4645      	mov	r5, r8
 800974c:	e7ec      	b.n	8009728 <_realloc_r+0x1e>
 800974e:	42b4      	cmp	r4, r6
 8009750:	4622      	mov	r2, r4
 8009752:	4629      	mov	r1, r5
 8009754:	bf28      	it	cs
 8009756:	4632      	movcs	r2, r6
 8009758:	f7fe fb4b 	bl	8007df2 <memcpy>
 800975c:	4629      	mov	r1, r5
 800975e:	4638      	mov	r0, r7
 8009760:	f000 f8b0 	bl	80098c4 <_free_r>
 8009764:	e7f1      	b.n	800974a <_realloc_r+0x40>

08009766 <__ascii_wctomb>:
 8009766:	4603      	mov	r3, r0
 8009768:	4608      	mov	r0, r1
 800976a:	b141      	cbz	r1, 800977e <__ascii_wctomb+0x18>
 800976c:	2aff      	cmp	r2, #255	@ 0xff
 800976e:	d904      	bls.n	800977a <__ascii_wctomb+0x14>
 8009770:	228a      	movs	r2, #138	@ 0x8a
 8009772:	601a      	str	r2, [r3, #0]
 8009774:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009778:	4770      	bx	lr
 800977a:	700a      	strb	r2, [r1, #0]
 800977c:	2001      	movs	r0, #1
 800977e:	4770      	bx	lr

08009780 <memmove>:
 8009780:	4288      	cmp	r0, r1
 8009782:	b510      	push	{r4, lr}
 8009784:	eb01 0402 	add.w	r4, r1, r2
 8009788:	d902      	bls.n	8009790 <memmove+0x10>
 800978a:	4284      	cmp	r4, r0
 800978c:	4623      	mov	r3, r4
 800978e:	d807      	bhi.n	80097a0 <memmove+0x20>
 8009790:	1e43      	subs	r3, r0, #1
 8009792:	42a1      	cmp	r1, r4
 8009794:	d008      	beq.n	80097a8 <memmove+0x28>
 8009796:	f811 2b01 	ldrb.w	r2, [r1], #1
 800979a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800979e:	e7f8      	b.n	8009792 <memmove+0x12>
 80097a0:	4402      	add	r2, r0
 80097a2:	4601      	mov	r1, r0
 80097a4:	428a      	cmp	r2, r1
 80097a6:	d100      	bne.n	80097aa <memmove+0x2a>
 80097a8:	bd10      	pop	{r4, pc}
 80097aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80097b2:	e7f7      	b.n	80097a4 <memmove+0x24>

080097b4 <_lseek_r>:
 80097b4:	b538      	push	{r3, r4, r5, lr}
 80097b6:	4d07      	ldr	r5, [pc, #28]	@ (80097d4 <_lseek_r+0x20>)
 80097b8:	4604      	mov	r4, r0
 80097ba:	4608      	mov	r0, r1
 80097bc:	4611      	mov	r1, r2
 80097be:	2200      	movs	r2, #0
 80097c0:	602a      	str	r2, [r5, #0]
 80097c2:	461a      	mov	r2, r3
 80097c4:	f7f9 f80d 	bl	80027e2 <_lseek>
 80097c8:	1c43      	adds	r3, r0, #1
 80097ca:	d102      	bne.n	80097d2 <_lseek_r+0x1e>
 80097cc:	682b      	ldr	r3, [r5, #0]
 80097ce:	b103      	cbz	r3, 80097d2 <_lseek_r+0x1e>
 80097d0:	6023      	str	r3, [r4, #0]
 80097d2:	bd38      	pop	{r3, r4, r5, pc}
 80097d4:	200006a4 	.word	0x200006a4

080097d8 <_read_r>:
 80097d8:	b538      	push	{r3, r4, r5, lr}
 80097da:	4d07      	ldr	r5, [pc, #28]	@ (80097f8 <_read_r+0x20>)
 80097dc:	4604      	mov	r4, r0
 80097de:	4608      	mov	r0, r1
 80097e0:	4611      	mov	r1, r2
 80097e2:	2200      	movs	r2, #0
 80097e4:	602a      	str	r2, [r5, #0]
 80097e6:	461a      	mov	r2, r3
 80097e8:	f7f8 ff9b 	bl	8002722 <_read>
 80097ec:	1c43      	adds	r3, r0, #1
 80097ee:	d102      	bne.n	80097f6 <_read_r+0x1e>
 80097f0:	682b      	ldr	r3, [r5, #0]
 80097f2:	b103      	cbz	r3, 80097f6 <_read_r+0x1e>
 80097f4:	6023      	str	r3, [r4, #0]
 80097f6:	bd38      	pop	{r3, r4, r5, pc}
 80097f8:	200006a4 	.word	0x200006a4

080097fc <_sbrk_r>:
 80097fc:	b538      	push	{r3, r4, r5, lr}
 80097fe:	4d06      	ldr	r5, [pc, #24]	@ (8009818 <_sbrk_r+0x1c>)
 8009800:	2300      	movs	r3, #0
 8009802:	4604      	mov	r4, r0
 8009804:	4608      	mov	r0, r1
 8009806:	602b      	str	r3, [r5, #0]
 8009808:	f7f8 fff8 	bl	80027fc <_sbrk>
 800980c:	1c43      	adds	r3, r0, #1
 800980e:	d102      	bne.n	8009816 <_sbrk_r+0x1a>
 8009810:	682b      	ldr	r3, [r5, #0]
 8009812:	b103      	cbz	r3, 8009816 <_sbrk_r+0x1a>
 8009814:	6023      	str	r3, [r4, #0]
 8009816:	bd38      	pop	{r3, r4, r5, pc}
 8009818:	200006a4 	.word	0x200006a4

0800981c <_write_r>:
 800981c:	b538      	push	{r3, r4, r5, lr}
 800981e:	4d07      	ldr	r5, [pc, #28]	@ (800983c <_write_r+0x20>)
 8009820:	4604      	mov	r4, r0
 8009822:	4608      	mov	r0, r1
 8009824:	4611      	mov	r1, r2
 8009826:	2200      	movs	r2, #0
 8009828:	602a      	str	r2, [r5, #0]
 800982a:	461a      	mov	r2, r3
 800982c:	f7f8 ff96 	bl	800275c <_write>
 8009830:	1c43      	adds	r3, r0, #1
 8009832:	d102      	bne.n	800983a <_write_r+0x1e>
 8009834:	682b      	ldr	r3, [r5, #0]
 8009836:	b103      	cbz	r3, 800983a <_write_r+0x1e>
 8009838:	6023      	str	r3, [r4, #0]
 800983a:	bd38      	pop	{r3, r4, r5, pc}
 800983c:	200006a4 	.word	0x200006a4

08009840 <_close_r>:
 8009840:	b538      	push	{r3, r4, r5, lr}
 8009842:	4d06      	ldr	r5, [pc, #24]	@ (800985c <_close_r+0x1c>)
 8009844:	2300      	movs	r3, #0
 8009846:	4604      	mov	r4, r0
 8009848:	4608      	mov	r0, r1
 800984a:	602b      	str	r3, [r5, #0]
 800984c:	f7f8 ffa2 	bl	8002794 <_close>
 8009850:	1c43      	adds	r3, r0, #1
 8009852:	d102      	bne.n	800985a <_close_r+0x1a>
 8009854:	682b      	ldr	r3, [r5, #0]
 8009856:	b103      	cbz	r3, 800985a <_close_r+0x1a>
 8009858:	6023      	str	r3, [r4, #0]
 800985a:	bd38      	pop	{r3, r4, r5, pc}
 800985c:	200006a4 	.word	0x200006a4

08009860 <__assert_func>:
 8009860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009862:	4614      	mov	r4, r2
 8009864:	461a      	mov	r2, r3
 8009866:	4b09      	ldr	r3, [pc, #36]	@ (800988c <__assert_func+0x2c>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4605      	mov	r5, r0
 800986c:	68d8      	ldr	r0, [r3, #12]
 800986e:	b14c      	cbz	r4, 8009884 <__assert_func+0x24>
 8009870:	4b07      	ldr	r3, [pc, #28]	@ (8009890 <__assert_func+0x30>)
 8009872:	9100      	str	r1, [sp, #0]
 8009874:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009878:	4906      	ldr	r1, [pc, #24]	@ (8009894 <__assert_func+0x34>)
 800987a:	462b      	mov	r3, r5
 800987c:	f000 f87c 	bl	8009978 <fiprintf>
 8009880:	f000 f88c 	bl	800999c <abort>
 8009884:	4b04      	ldr	r3, [pc, #16]	@ (8009898 <__assert_func+0x38>)
 8009886:	461c      	mov	r4, r3
 8009888:	e7f3      	b.n	8009872 <__assert_func+0x12>
 800988a:	bf00      	nop
 800988c:	200001dc 	.word	0x200001dc
 8009890:	0800a0b6 	.word	0x0800a0b6
 8009894:	0800a0c3 	.word	0x0800a0c3
 8009898:	0800a0f1 	.word	0x0800a0f1

0800989c <_calloc_r>:
 800989c:	b570      	push	{r4, r5, r6, lr}
 800989e:	fba1 5402 	umull	r5, r4, r1, r2
 80098a2:	b934      	cbnz	r4, 80098b2 <_calloc_r+0x16>
 80098a4:	4629      	mov	r1, r5
 80098a6:	f7fe ff6d 	bl	8008784 <_malloc_r>
 80098aa:	4606      	mov	r6, r0
 80098ac:	b928      	cbnz	r0, 80098ba <_calloc_r+0x1e>
 80098ae:	4630      	mov	r0, r6
 80098b0:	bd70      	pop	{r4, r5, r6, pc}
 80098b2:	220c      	movs	r2, #12
 80098b4:	6002      	str	r2, [r0, #0]
 80098b6:	2600      	movs	r6, #0
 80098b8:	e7f9      	b.n	80098ae <_calloc_r+0x12>
 80098ba:	462a      	mov	r2, r5
 80098bc:	4621      	mov	r1, r4
 80098be:	f7fe fa51 	bl	8007d64 <memset>
 80098c2:	e7f4      	b.n	80098ae <_calloc_r+0x12>

080098c4 <_free_r>:
 80098c4:	b538      	push	{r3, r4, r5, lr}
 80098c6:	4605      	mov	r5, r0
 80098c8:	2900      	cmp	r1, #0
 80098ca:	d041      	beq.n	8009950 <_free_r+0x8c>
 80098cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098d0:	1f0c      	subs	r4, r1, #4
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	bfb8      	it	lt
 80098d6:	18e4      	addlt	r4, r4, r3
 80098d8:	f7ff fa1e 	bl	8008d18 <__malloc_lock>
 80098dc:	4a1d      	ldr	r2, [pc, #116]	@ (8009954 <_free_r+0x90>)
 80098de:	6813      	ldr	r3, [r2, #0]
 80098e0:	b933      	cbnz	r3, 80098f0 <_free_r+0x2c>
 80098e2:	6063      	str	r3, [r4, #4]
 80098e4:	6014      	str	r4, [r2, #0]
 80098e6:	4628      	mov	r0, r5
 80098e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098ec:	f7ff ba1a 	b.w	8008d24 <__malloc_unlock>
 80098f0:	42a3      	cmp	r3, r4
 80098f2:	d908      	bls.n	8009906 <_free_r+0x42>
 80098f4:	6820      	ldr	r0, [r4, #0]
 80098f6:	1821      	adds	r1, r4, r0
 80098f8:	428b      	cmp	r3, r1
 80098fa:	bf01      	itttt	eq
 80098fc:	6819      	ldreq	r1, [r3, #0]
 80098fe:	685b      	ldreq	r3, [r3, #4]
 8009900:	1809      	addeq	r1, r1, r0
 8009902:	6021      	streq	r1, [r4, #0]
 8009904:	e7ed      	b.n	80098e2 <_free_r+0x1e>
 8009906:	461a      	mov	r2, r3
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	b10b      	cbz	r3, 8009910 <_free_r+0x4c>
 800990c:	42a3      	cmp	r3, r4
 800990e:	d9fa      	bls.n	8009906 <_free_r+0x42>
 8009910:	6811      	ldr	r1, [r2, #0]
 8009912:	1850      	adds	r0, r2, r1
 8009914:	42a0      	cmp	r0, r4
 8009916:	d10b      	bne.n	8009930 <_free_r+0x6c>
 8009918:	6820      	ldr	r0, [r4, #0]
 800991a:	4401      	add	r1, r0
 800991c:	1850      	adds	r0, r2, r1
 800991e:	4283      	cmp	r3, r0
 8009920:	6011      	str	r1, [r2, #0]
 8009922:	d1e0      	bne.n	80098e6 <_free_r+0x22>
 8009924:	6818      	ldr	r0, [r3, #0]
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	6053      	str	r3, [r2, #4]
 800992a:	4408      	add	r0, r1
 800992c:	6010      	str	r0, [r2, #0]
 800992e:	e7da      	b.n	80098e6 <_free_r+0x22>
 8009930:	d902      	bls.n	8009938 <_free_r+0x74>
 8009932:	230c      	movs	r3, #12
 8009934:	602b      	str	r3, [r5, #0]
 8009936:	e7d6      	b.n	80098e6 <_free_r+0x22>
 8009938:	6820      	ldr	r0, [r4, #0]
 800993a:	1821      	adds	r1, r4, r0
 800993c:	428b      	cmp	r3, r1
 800993e:	bf04      	itt	eq
 8009940:	6819      	ldreq	r1, [r3, #0]
 8009942:	685b      	ldreq	r3, [r3, #4]
 8009944:	6063      	str	r3, [r4, #4]
 8009946:	bf04      	itt	eq
 8009948:	1809      	addeq	r1, r1, r0
 800994a:	6021      	streq	r1, [r4, #0]
 800994c:	6054      	str	r4, [r2, #4]
 800994e:	e7ca      	b.n	80098e6 <_free_r+0x22>
 8009950:	bd38      	pop	{r3, r4, r5, pc}
 8009952:	bf00      	nop
 8009954:	200006a0 	.word	0x200006a0

08009958 <malloc>:
 8009958:	4b02      	ldr	r3, [pc, #8]	@ (8009964 <malloc+0xc>)
 800995a:	4601      	mov	r1, r0
 800995c:	6818      	ldr	r0, [r3, #0]
 800995e:	f7fe bf11 	b.w	8008784 <_malloc_r>
 8009962:	bf00      	nop
 8009964:	200001dc 	.word	0x200001dc

08009968 <_malloc_usable_size_r>:
 8009968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800996c:	1f18      	subs	r0, r3, #4
 800996e:	2b00      	cmp	r3, #0
 8009970:	bfbc      	itt	lt
 8009972:	580b      	ldrlt	r3, [r1, r0]
 8009974:	18c0      	addlt	r0, r0, r3
 8009976:	4770      	bx	lr

08009978 <fiprintf>:
 8009978:	b40e      	push	{r1, r2, r3}
 800997a:	b503      	push	{r0, r1, lr}
 800997c:	4601      	mov	r1, r0
 800997e:	ab03      	add	r3, sp, #12
 8009980:	4805      	ldr	r0, [pc, #20]	@ (8009998 <fiprintf+0x20>)
 8009982:	f853 2b04 	ldr.w	r2, [r3], #4
 8009986:	6800      	ldr	r0, [r0, #0]
 8009988:	9301      	str	r3, [sp, #4]
 800998a:	f000 f837 	bl	80099fc <_vfiprintf_r>
 800998e:	b002      	add	sp, #8
 8009990:	f85d eb04 	ldr.w	lr, [sp], #4
 8009994:	b003      	add	sp, #12
 8009996:	4770      	bx	lr
 8009998:	200001dc 	.word	0x200001dc

0800999c <abort>:
 800999c:	b508      	push	{r3, lr}
 800999e:	2006      	movs	r0, #6
 80099a0:	f000 fa62 	bl	8009e68 <raise>
 80099a4:	2001      	movs	r0, #1
 80099a6:	f7f8 feb1 	bl	800270c <_exit>

080099aa <__sfputc_r>:
 80099aa:	6893      	ldr	r3, [r2, #8]
 80099ac:	3b01      	subs	r3, #1
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	b410      	push	{r4}
 80099b2:	6093      	str	r3, [r2, #8]
 80099b4:	da08      	bge.n	80099c8 <__sfputc_r+0x1e>
 80099b6:	6994      	ldr	r4, [r2, #24]
 80099b8:	42a3      	cmp	r3, r4
 80099ba:	db01      	blt.n	80099c0 <__sfputc_r+0x16>
 80099bc:	290a      	cmp	r1, #10
 80099be:	d103      	bne.n	80099c8 <__sfputc_r+0x1e>
 80099c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099c4:	f000 b932 	b.w	8009c2c <__swbuf_r>
 80099c8:	6813      	ldr	r3, [r2, #0]
 80099ca:	1c58      	adds	r0, r3, #1
 80099cc:	6010      	str	r0, [r2, #0]
 80099ce:	7019      	strb	r1, [r3, #0]
 80099d0:	4608      	mov	r0, r1
 80099d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099d6:	4770      	bx	lr

080099d8 <__sfputs_r>:
 80099d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099da:	4606      	mov	r6, r0
 80099dc:	460f      	mov	r7, r1
 80099de:	4614      	mov	r4, r2
 80099e0:	18d5      	adds	r5, r2, r3
 80099e2:	42ac      	cmp	r4, r5
 80099e4:	d101      	bne.n	80099ea <__sfputs_r+0x12>
 80099e6:	2000      	movs	r0, #0
 80099e8:	e007      	b.n	80099fa <__sfputs_r+0x22>
 80099ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099ee:	463a      	mov	r2, r7
 80099f0:	4630      	mov	r0, r6
 80099f2:	f7ff ffda 	bl	80099aa <__sfputc_r>
 80099f6:	1c43      	adds	r3, r0, #1
 80099f8:	d1f3      	bne.n	80099e2 <__sfputs_r+0xa>
 80099fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080099fc <_vfiprintf_r>:
 80099fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a00:	460d      	mov	r5, r1
 8009a02:	b09d      	sub	sp, #116	@ 0x74
 8009a04:	4614      	mov	r4, r2
 8009a06:	4698      	mov	r8, r3
 8009a08:	4606      	mov	r6, r0
 8009a0a:	b118      	cbz	r0, 8009a14 <_vfiprintf_r+0x18>
 8009a0c:	6a03      	ldr	r3, [r0, #32]
 8009a0e:	b90b      	cbnz	r3, 8009a14 <_vfiprintf_r+0x18>
 8009a10:	f7fd fb62 	bl	80070d8 <__sinit>
 8009a14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a16:	07d9      	lsls	r1, r3, #31
 8009a18:	d405      	bmi.n	8009a26 <_vfiprintf_r+0x2a>
 8009a1a:	89ab      	ldrh	r3, [r5, #12]
 8009a1c:	059a      	lsls	r2, r3, #22
 8009a1e:	d402      	bmi.n	8009a26 <_vfiprintf_r+0x2a>
 8009a20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a22:	f7fe f9e4 	bl	8007dee <__retarget_lock_acquire_recursive>
 8009a26:	89ab      	ldrh	r3, [r5, #12]
 8009a28:	071b      	lsls	r3, r3, #28
 8009a2a:	d501      	bpl.n	8009a30 <_vfiprintf_r+0x34>
 8009a2c:	692b      	ldr	r3, [r5, #16]
 8009a2e:	b99b      	cbnz	r3, 8009a58 <_vfiprintf_r+0x5c>
 8009a30:	4629      	mov	r1, r5
 8009a32:	4630      	mov	r0, r6
 8009a34:	f000 f938 	bl	8009ca8 <__swsetup_r>
 8009a38:	b170      	cbz	r0, 8009a58 <_vfiprintf_r+0x5c>
 8009a3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a3c:	07dc      	lsls	r4, r3, #31
 8009a3e:	d504      	bpl.n	8009a4a <_vfiprintf_r+0x4e>
 8009a40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a44:	b01d      	add	sp, #116	@ 0x74
 8009a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a4a:	89ab      	ldrh	r3, [r5, #12]
 8009a4c:	0598      	lsls	r0, r3, #22
 8009a4e:	d4f7      	bmi.n	8009a40 <_vfiprintf_r+0x44>
 8009a50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a52:	f7fe f9cd 	bl	8007df0 <__retarget_lock_release_recursive>
 8009a56:	e7f3      	b.n	8009a40 <_vfiprintf_r+0x44>
 8009a58:	2300      	movs	r3, #0
 8009a5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a5c:	2320      	movs	r3, #32
 8009a5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a62:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a66:	2330      	movs	r3, #48	@ 0x30
 8009a68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009c18 <_vfiprintf_r+0x21c>
 8009a6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a70:	f04f 0901 	mov.w	r9, #1
 8009a74:	4623      	mov	r3, r4
 8009a76:	469a      	mov	sl, r3
 8009a78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a7c:	b10a      	cbz	r2, 8009a82 <_vfiprintf_r+0x86>
 8009a7e:	2a25      	cmp	r2, #37	@ 0x25
 8009a80:	d1f9      	bne.n	8009a76 <_vfiprintf_r+0x7a>
 8009a82:	ebba 0b04 	subs.w	fp, sl, r4
 8009a86:	d00b      	beq.n	8009aa0 <_vfiprintf_r+0xa4>
 8009a88:	465b      	mov	r3, fp
 8009a8a:	4622      	mov	r2, r4
 8009a8c:	4629      	mov	r1, r5
 8009a8e:	4630      	mov	r0, r6
 8009a90:	f7ff ffa2 	bl	80099d8 <__sfputs_r>
 8009a94:	3001      	adds	r0, #1
 8009a96:	f000 80a7 	beq.w	8009be8 <_vfiprintf_r+0x1ec>
 8009a9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a9c:	445a      	add	r2, fp
 8009a9e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009aa0:	f89a 3000 	ldrb.w	r3, [sl]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	f000 809f 	beq.w	8009be8 <_vfiprintf_r+0x1ec>
 8009aaa:	2300      	movs	r3, #0
 8009aac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009ab0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ab4:	f10a 0a01 	add.w	sl, sl, #1
 8009ab8:	9304      	str	r3, [sp, #16]
 8009aba:	9307      	str	r3, [sp, #28]
 8009abc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009ac0:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ac2:	4654      	mov	r4, sl
 8009ac4:	2205      	movs	r2, #5
 8009ac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aca:	4853      	ldr	r0, [pc, #332]	@ (8009c18 <_vfiprintf_r+0x21c>)
 8009acc:	f7f6 fba0 	bl	8000210 <memchr>
 8009ad0:	9a04      	ldr	r2, [sp, #16]
 8009ad2:	b9d8      	cbnz	r0, 8009b0c <_vfiprintf_r+0x110>
 8009ad4:	06d1      	lsls	r1, r2, #27
 8009ad6:	bf44      	itt	mi
 8009ad8:	2320      	movmi	r3, #32
 8009ada:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ade:	0713      	lsls	r3, r2, #28
 8009ae0:	bf44      	itt	mi
 8009ae2:	232b      	movmi	r3, #43	@ 0x2b
 8009ae4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ae8:	f89a 3000 	ldrb.w	r3, [sl]
 8009aec:	2b2a      	cmp	r3, #42	@ 0x2a
 8009aee:	d015      	beq.n	8009b1c <_vfiprintf_r+0x120>
 8009af0:	9a07      	ldr	r2, [sp, #28]
 8009af2:	4654      	mov	r4, sl
 8009af4:	2000      	movs	r0, #0
 8009af6:	f04f 0c0a 	mov.w	ip, #10
 8009afa:	4621      	mov	r1, r4
 8009afc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b00:	3b30      	subs	r3, #48	@ 0x30
 8009b02:	2b09      	cmp	r3, #9
 8009b04:	d94b      	bls.n	8009b9e <_vfiprintf_r+0x1a2>
 8009b06:	b1b0      	cbz	r0, 8009b36 <_vfiprintf_r+0x13a>
 8009b08:	9207      	str	r2, [sp, #28]
 8009b0a:	e014      	b.n	8009b36 <_vfiprintf_r+0x13a>
 8009b0c:	eba0 0308 	sub.w	r3, r0, r8
 8009b10:	fa09 f303 	lsl.w	r3, r9, r3
 8009b14:	4313      	orrs	r3, r2
 8009b16:	9304      	str	r3, [sp, #16]
 8009b18:	46a2      	mov	sl, r4
 8009b1a:	e7d2      	b.n	8009ac2 <_vfiprintf_r+0xc6>
 8009b1c:	9b03      	ldr	r3, [sp, #12]
 8009b1e:	1d19      	adds	r1, r3, #4
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	9103      	str	r1, [sp, #12]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	bfbb      	ittet	lt
 8009b28:	425b      	neglt	r3, r3
 8009b2a:	f042 0202 	orrlt.w	r2, r2, #2
 8009b2e:	9307      	strge	r3, [sp, #28]
 8009b30:	9307      	strlt	r3, [sp, #28]
 8009b32:	bfb8      	it	lt
 8009b34:	9204      	strlt	r2, [sp, #16]
 8009b36:	7823      	ldrb	r3, [r4, #0]
 8009b38:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b3a:	d10a      	bne.n	8009b52 <_vfiprintf_r+0x156>
 8009b3c:	7863      	ldrb	r3, [r4, #1]
 8009b3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b40:	d132      	bne.n	8009ba8 <_vfiprintf_r+0x1ac>
 8009b42:	9b03      	ldr	r3, [sp, #12]
 8009b44:	1d1a      	adds	r2, r3, #4
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	9203      	str	r2, [sp, #12]
 8009b4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b4e:	3402      	adds	r4, #2
 8009b50:	9305      	str	r3, [sp, #20]
 8009b52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009c28 <_vfiprintf_r+0x22c>
 8009b56:	7821      	ldrb	r1, [r4, #0]
 8009b58:	2203      	movs	r2, #3
 8009b5a:	4650      	mov	r0, sl
 8009b5c:	f7f6 fb58 	bl	8000210 <memchr>
 8009b60:	b138      	cbz	r0, 8009b72 <_vfiprintf_r+0x176>
 8009b62:	9b04      	ldr	r3, [sp, #16]
 8009b64:	eba0 000a 	sub.w	r0, r0, sl
 8009b68:	2240      	movs	r2, #64	@ 0x40
 8009b6a:	4082      	lsls	r2, r0
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	3401      	adds	r4, #1
 8009b70:	9304      	str	r3, [sp, #16]
 8009b72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b76:	4829      	ldr	r0, [pc, #164]	@ (8009c1c <_vfiprintf_r+0x220>)
 8009b78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b7c:	2206      	movs	r2, #6
 8009b7e:	f7f6 fb47 	bl	8000210 <memchr>
 8009b82:	2800      	cmp	r0, #0
 8009b84:	d03f      	beq.n	8009c06 <_vfiprintf_r+0x20a>
 8009b86:	4b26      	ldr	r3, [pc, #152]	@ (8009c20 <_vfiprintf_r+0x224>)
 8009b88:	bb1b      	cbnz	r3, 8009bd2 <_vfiprintf_r+0x1d6>
 8009b8a:	9b03      	ldr	r3, [sp, #12]
 8009b8c:	3307      	adds	r3, #7
 8009b8e:	f023 0307 	bic.w	r3, r3, #7
 8009b92:	3308      	adds	r3, #8
 8009b94:	9303      	str	r3, [sp, #12]
 8009b96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b98:	443b      	add	r3, r7
 8009b9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b9c:	e76a      	b.n	8009a74 <_vfiprintf_r+0x78>
 8009b9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ba2:	460c      	mov	r4, r1
 8009ba4:	2001      	movs	r0, #1
 8009ba6:	e7a8      	b.n	8009afa <_vfiprintf_r+0xfe>
 8009ba8:	2300      	movs	r3, #0
 8009baa:	3401      	adds	r4, #1
 8009bac:	9305      	str	r3, [sp, #20]
 8009bae:	4619      	mov	r1, r3
 8009bb0:	f04f 0c0a 	mov.w	ip, #10
 8009bb4:	4620      	mov	r0, r4
 8009bb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bba:	3a30      	subs	r2, #48	@ 0x30
 8009bbc:	2a09      	cmp	r2, #9
 8009bbe:	d903      	bls.n	8009bc8 <_vfiprintf_r+0x1cc>
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d0c6      	beq.n	8009b52 <_vfiprintf_r+0x156>
 8009bc4:	9105      	str	r1, [sp, #20]
 8009bc6:	e7c4      	b.n	8009b52 <_vfiprintf_r+0x156>
 8009bc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bcc:	4604      	mov	r4, r0
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e7f0      	b.n	8009bb4 <_vfiprintf_r+0x1b8>
 8009bd2:	ab03      	add	r3, sp, #12
 8009bd4:	9300      	str	r3, [sp, #0]
 8009bd6:	462a      	mov	r2, r5
 8009bd8:	4b12      	ldr	r3, [pc, #72]	@ (8009c24 <_vfiprintf_r+0x228>)
 8009bda:	a904      	add	r1, sp, #16
 8009bdc:	4630      	mov	r0, r6
 8009bde:	f3af 8000 	nop.w
 8009be2:	4607      	mov	r7, r0
 8009be4:	1c78      	adds	r0, r7, #1
 8009be6:	d1d6      	bne.n	8009b96 <_vfiprintf_r+0x19a>
 8009be8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009bea:	07d9      	lsls	r1, r3, #31
 8009bec:	d405      	bmi.n	8009bfa <_vfiprintf_r+0x1fe>
 8009bee:	89ab      	ldrh	r3, [r5, #12]
 8009bf0:	059a      	lsls	r2, r3, #22
 8009bf2:	d402      	bmi.n	8009bfa <_vfiprintf_r+0x1fe>
 8009bf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009bf6:	f7fe f8fb 	bl	8007df0 <__retarget_lock_release_recursive>
 8009bfa:	89ab      	ldrh	r3, [r5, #12]
 8009bfc:	065b      	lsls	r3, r3, #25
 8009bfe:	f53f af1f 	bmi.w	8009a40 <_vfiprintf_r+0x44>
 8009c02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c04:	e71e      	b.n	8009a44 <_vfiprintf_r+0x48>
 8009c06:	ab03      	add	r3, sp, #12
 8009c08:	9300      	str	r3, [sp, #0]
 8009c0a:	462a      	mov	r2, r5
 8009c0c:	4b05      	ldr	r3, [pc, #20]	@ (8009c24 <_vfiprintf_r+0x228>)
 8009c0e:	a904      	add	r1, sp, #16
 8009c10:	4630      	mov	r0, r6
 8009c12:	f7fe feb7 	bl	8008984 <_printf_i>
 8009c16:	e7e4      	b.n	8009be2 <_vfiprintf_r+0x1e6>
 8009c18:	0800a013 	.word	0x0800a013
 8009c1c:	0800a01d 	.word	0x0800a01d
 8009c20:	00000000 	.word	0x00000000
 8009c24:	080099d9 	.word	0x080099d9
 8009c28:	0800a019 	.word	0x0800a019

08009c2c <__swbuf_r>:
 8009c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c2e:	460e      	mov	r6, r1
 8009c30:	4614      	mov	r4, r2
 8009c32:	4605      	mov	r5, r0
 8009c34:	b118      	cbz	r0, 8009c3e <__swbuf_r+0x12>
 8009c36:	6a03      	ldr	r3, [r0, #32]
 8009c38:	b90b      	cbnz	r3, 8009c3e <__swbuf_r+0x12>
 8009c3a:	f7fd fa4d 	bl	80070d8 <__sinit>
 8009c3e:	69a3      	ldr	r3, [r4, #24]
 8009c40:	60a3      	str	r3, [r4, #8]
 8009c42:	89a3      	ldrh	r3, [r4, #12]
 8009c44:	071a      	lsls	r2, r3, #28
 8009c46:	d501      	bpl.n	8009c4c <__swbuf_r+0x20>
 8009c48:	6923      	ldr	r3, [r4, #16]
 8009c4a:	b943      	cbnz	r3, 8009c5e <__swbuf_r+0x32>
 8009c4c:	4621      	mov	r1, r4
 8009c4e:	4628      	mov	r0, r5
 8009c50:	f000 f82a 	bl	8009ca8 <__swsetup_r>
 8009c54:	b118      	cbz	r0, 8009c5e <__swbuf_r+0x32>
 8009c56:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009c5a:	4638      	mov	r0, r7
 8009c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c5e:	6823      	ldr	r3, [r4, #0]
 8009c60:	6922      	ldr	r2, [r4, #16]
 8009c62:	1a98      	subs	r0, r3, r2
 8009c64:	6963      	ldr	r3, [r4, #20]
 8009c66:	b2f6      	uxtb	r6, r6
 8009c68:	4283      	cmp	r3, r0
 8009c6a:	4637      	mov	r7, r6
 8009c6c:	dc05      	bgt.n	8009c7a <__swbuf_r+0x4e>
 8009c6e:	4621      	mov	r1, r4
 8009c70:	4628      	mov	r0, r5
 8009c72:	f7ff f829 	bl	8008cc8 <_fflush_r>
 8009c76:	2800      	cmp	r0, #0
 8009c78:	d1ed      	bne.n	8009c56 <__swbuf_r+0x2a>
 8009c7a:	68a3      	ldr	r3, [r4, #8]
 8009c7c:	3b01      	subs	r3, #1
 8009c7e:	60a3      	str	r3, [r4, #8]
 8009c80:	6823      	ldr	r3, [r4, #0]
 8009c82:	1c5a      	adds	r2, r3, #1
 8009c84:	6022      	str	r2, [r4, #0]
 8009c86:	701e      	strb	r6, [r3, #0]
 8009c88:	6962      	ldr	r2, [r4, #20]
 8009c8a:	1c43      	adds	r3, r0, #1
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d004      	beq.n	8009c9a <__swbuf_r+0x6e>
 8009c90:	89a3      	ldrh	r3, [r4, #12]
 8009c92:	07db      	lsls	r3, r3, #31
 8009c94:	d5e1      	bpl.n	8009c5a <__swbuf_r+0x2e>
 8009c96:	2e0a      	cmp	r6, #10
 8009c98:	d1df      	bne.n	8009c5a <__swbuf_r+0x2e>
 8009c9a:	4621      	mov	r1, r4
 8009c9c:	4628      	mov	r0, r5
 8009c9e:	f7ff f813 	bl	8008cc8 <_fflush_r>
 8009ca2:	2800      	cmp	r0, #0
 8009ca4:	d0d9      	beq.n	8009c5a <__swbuf_r+0x2e>
 8009ca6:	e7d6      	b.n	8009c56 <__swbuf_r+0x2a>

08009ca8 <__swsetup_r>:
 8009ca8:	b538      	push	{r3, r4, r5, lr}
 8009caa:	4b29      	ldr	r3, [pc, #164]	@ (8009d50 <__swsetup_r+0xa8>)
 8009cac:	4605      	mov	r5, r0
 8009cae:	6818      	ldr	r0, [r3, #0]
 8009cb0:	460c      	mov	r4, r1
 8009cb2:	b118      	cbz	r0, 8009cbc <__swsetup_r+0x14>
 8009cb4:	6a03      	ldr	r3, [r0, #32]
 8009cb6:	b90b      	cbnz	r3, 8009cbc <__swsetup_r+0x14>
 8009cb8:	f7fd fa0e 	bl	80070d8 <__sinit>
 8009cbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cc0:	0719      	lsls	r1, r3, #28
 8009cc2:	d422      	bmi.n	8009d0a <__swsetup_r+0x62>
 8009cc4:	06da      	lsls	r2, r3, #27
 8009cc6:	d407      	bmi.n	8009cd8 <__swsetup_r+0x30>
 8009cc8:	2209      	movs	r2, #9
 8009cca:	602a      	str	r2, [r5, #0]
 8009ccc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cd0:	81a3      	strh	r3, [r4, #12]
 8009cd2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009cd6:	e033      	b.n	8009d40 <__swsetup_r+0x98>
 8009cd8:	0758      	lsls	r0, r3, #29
 8009cda:	d512      	bpl.n	8009d02 <__swsetup_r+0x5a>
 8009cdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009cde:	b141      	cbz	r1, 8009cf2 <__swsetup_r+0x4a>
 8009ce0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ce4:	4299      	cmp	r1, r3
 8009ce6:	d002      	beq.n	8009cee <__swsetup_r+0x46>
 8009ce8:	4628      	mov	r0, r5
 8009cea:	f7ff fdeb 	bl	80098c4 <_free_r>
 8009cee:	2300      	movs	r3, #0
 8009cf0:	6363      	str	r3, [r4, #52]	@ 0x34
 8009cf2:	89a3      	ldrh	r3, [r4, #12]
 8009cf4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009cf8:	81a3      	strh	r3, [r4, #12]
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	6063      	str	r3, [r4, #4]
 8009cfe:	6923      	ldr	r3, [r4, #16]
 8009d00:	6023      	str	r3, [r4, #0]
 8009d02:	89a3      	ldrh	r3, [r4, #12]
 8009d04:	f043 0308 	orr.w	r3, r3, #8
 8009d08:	81a3      	strh	r3, [r4, #12]
 8009d0a:	6923      	ldr	r3, [r4, #16]
 8009d0c:	b94b      	cbnz	r3, 8009d22 <__swsetup_r+0x7a>
 8009d0e:	89a3      	ldrh	r3, [r4, #12]
 8009d10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009d14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d18:	d003      	beq.n	8009d22 <__swsetup_r+0x7a>
 8009d1a:	4621      	mov	r1, r4
 8009d1c:	4628      	mov	r0, r5
 8009d1e:	f000 f83f 	bl	8009da0 <__smakebuf_r>
 8009d22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d26:	f013 0201 	ands.w	r2, r3, #1
 8009d2a:	d00a      	beq.n	8009d42 <__swsetup_r+0x9a>
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	60a2      	str	r2, [r4, #8]
 8009d30:	6962      	ldr	r2, [r4, #20]
 8009d32:	4252      	negs	r2, r2
 8009d34:	61a2      	str	r2, [r4, #24]
 8009d36:	6922      	ldr	r2, [r4, #16]
 8009d38:	b942      	cbnz	r2, 8009d4c <__swsetup_r+0xa4>
 8009d3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009d3e:	d1c5      	bne.n	8009ccc <__swsetup_r+0x24>
 8009d40:	bd38      	pop	{r3, r4, r5, pc}
 8009d42:	0799      	lsls	r1, r3, #30
 8009d44:	bf58      	it	pl
 8009d46:	6962      	ldrpl	r2, [r4, #20]
 8009d48:	60a2      	str	r2, [r4, #8]
 8009d4a:	e7f4      	b.n	8009d36 <__swsetup_r+0x8e>
 8009d4c:	2000      	movs	r0, #0
 8009d4e:	e7f7      	b.n	8009d40 <__swsetup_r+0x98>
 8009d50:	200001dc 	.word	0x200001dc

08009d54 <__swhatbuf_r>:
 8009d54:	b570      	push	{r4, r5, r6, lr}
 8009d56:	460c      	mov	r4, r1
 8009d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d5c:	2900      	cmp	r1, #0
 8009d5e:	b096      	sub	sp, #88	@ 0x58
 8009d60:	4615      	mov	r5, r2
 8009d62:	461e      	mov	r6, r3
 8009d64:	da0d      	bge.n	8009d82 <__swhatbuf_r+0x2e>
 8009d66:	89a3      	ldrh	r3, [r4, #12]
 8009d68:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009d6c:	f04f 0100 	mov.w	r1, #0
 8009d70:	bf14      	ite	ne
 8009d72:	2340      	movne	r3, #64	@ 0x40
 8009d74:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009d78:	2000      	movs	r0, #0
 8009d7a:	6031      	str	r1, [r6, #0]
 8009d7c:	602b      	str	r3, [r5, #0]
 8009d7e:	b016      	add	sp, #88	@ 0x58
 8009d80:	bd70      	pop	{r4, r5, r6, pc}
 8009d82:	466a      	mov	r2, sp
 8009d84:	f000 f89c 	bl	8009ec0 <_fstat_r>
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	dbec      	blt.n	8009d66 <__swhatbuf_r+0x12>
 8009d8c:	9901      	ldr	r1, [sp, #4]
 8009d8e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009d92:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009d96:	4259      	negs	r1, r3
 8009d98:	4159      	adcs	r1, r3
 8009d9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d9e:	e7eb      	b.n	8009d78 <__swhatbuf_r+0x24>

08009da0 <__smakebuf_r>:
 8009da0:	898b      	ldrh	r3, [r1, #12]
 8009da2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009da4:	079d      	lsls	r5, r3, #30
 8009da6:	4606      	mov	r6, r0
 8009da8:	460c      	mov	r4, r1
 8009daa:	d507      	bpl.n	8009dbc <__smakebuf_r+0x1c>
 8009dac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009db0:	6023      	str	r3, [r4, #0]
 8009db2:	6123      	str	r3, [r4, #16]
 8009db4:	2301      	movs	r3, #1
 8009db6:	6163      	str	r3, [r4, #20]
 8009db8:	b003      	add	sp, #12
 8009dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dbc:	ab01      	add	r3, sp, #4
 8009dbe:	466a      	mov	r2, sp
 8009dc0:	f7ff ffc8 	bl	8009d54 <__swhatbuf_r>
 8009dc4:	9f00      	ldr	r7, [sp, #0]
 8009dc6:	4605      	mov	r5, r0
 8009dc8:	4639      	mov	r1, r7
 8009dca:	4630      	mov	r0, r6
 8009dcc:	f7fe fcda 	bl	8008784 <_malloc_r>
 8009dd0:	b948      	cbnz	r0, 8009de6 <__smakebuf_r+0x46>
 8009dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dd6:	059a      	lsls	r2, r3, #22
 8009dd8:	d4ee      	bmi.n	8009db8 <__smakebuf_r+0x18>
 8009dda:	f023 0303 	bic.w	r3, r3, #3
 8009dde:	f043 0302 	orr.w	r3, r3, #2
 8009de2:	81a3      	strh	r3, [r4, #12]
 8009de4:	e7e2      	b.n	8009dac <__smakebuf_r+0xc>
 8009de6:	89a3      	ldrh	r3, [r4, #12]
 8009de8:	6020      	str	r0, [r4, #0]
 8009dea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009dee:	81a3      	strh	r3, [r4, #12]
 8009df0:	9b01      	ldr	r3, [sp, #4]
 8009df2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009df6:	b15b      	cbz	r3, 8009e10 <__smakebuf_r+0x70>
 8009df8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dfc:	4630      	mov	r0, r6
 8009dfe:	f000 f83b 	bl	8009e78 <_isatty_r>
 8009e02:	b128      	cbz	r0, 8009e10 <__smakebuf_r+0x70>
 8009e04:	89a3      	ldrh	r3, [r4, #12]
 8009e06:	f023 0303 	bic.w	r3, r3, #3
 8009e0a:	f043 0301 	orr.w	r3, r3, #1
 8009e0e:	81a3      	strh	r3, [r4, #12]
 8009e10:	89a3      	ldrh	r3, [r4, #12]
 8009e12:	431d      	orrs	r5, r3
 8009e14:	81a5      	strh	r5, [r4, #12]
 8009e16:	e7cf      	b.n	8009db8 <__smakebuf_r+0x18>

08009e18 <_raise_r>:
 8009e18:	291f      	cmp	r1, #31
 8009e1a:	b538      	push	{r3, r4, r5, lr}
 8009e1c:	4605      	mov	r5, r0
 8009e1e:	460c      	mov	r4, r1
 8009e20:	d904      	bls.n	8009e2c <_raise_r+0x14>
 8009e22:	2316      	movs	r3, #22
 8009e24:	6003      	str	r3, [r0, #0]
 8009e26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e2a:	bd38      	pop	{r3, r4, r5, pc}
 8009e2c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009e2e:	b112      	cbz	r2, 8009e36 <_raise_r+0x1e>
 8009e30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e34:	b94b      	cbnz	r3, 8009e4a <_raise_r+0x32>
 8009e36:	4628      	mov	r0, r5
 8009e38:	f000 f840 	bl	8009ebc <_getpid_r>
 8009e3c:	4622      	mov	r2, r4
 8009e3e:	4601      	mov	r1, r0
 8009e40:	4628      	mov	r0, r5
 8009e42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e46:	f000 b827 	b.w	8009e98 <_kill_r>
 8009e4a:	2b01      	cmp	r3, #1
 8009e4c:	d00a      	beq.n	8009e64 <_raise_r+0x4c>
 8009e4e:	1c59      	adds	r1, r3, #1
 8009e50:	d103      	bne.n	8009e5a <_raise_r+0x42>
 8009e52:	2316      	movs	r3, #22
 8009e54:	6003      	str	r3, [r0, #0]
 8009e56:	2001      	movs	r0, #1
 8009e58:	e7e7      	b.n	8009e2a <_raise_r+0x12>
 8009e5a:	2100      	movs	r1, #0
 8009e5c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009e60:	4620      	mov	r0, r4
 8009e62:	4798      	blx	r3
 8009e64:	2000      	movs	r0, #0
 8009e66:	e7e0      	b.n	8009e2a <_raise_r+0x12>

08009e68 <raise>:
 8009e68:	4b02      	ldr	r3, [pc, #8]	@ (8009e74 <raise+0xc>)
 8009e6a:	4601      	mov	r1, r0
 8009e6c:	6818      	ldr	r0, [r3, #0]
 8009e6e:	f7ff bfd3 	b.w	8009e18 <_raise_r>
 8009e72:	bf00      	nop
 8009e74:	200001dc 	.word	0x200001dc

08009e78 <_isatty_r>:
 8009e78:	b538      	push	{r3, r4, r5, lr}
 8009e7a:	4d06      	ldr	r5, [pc, #24]	@ (8009e94 <_isatty_r+0x1c>)
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	4604      	mov	r4, r0
 8009e80:	4608      	mov	r0, r1
 8009e82:	602b      	str	r3, [r5, #0]
 8009e84:	f7f8 fca2 	bl	80027cc <_isatty>
 8009e88:	1c43      	adds	r3, r0, #1
 8009e8a:	d102      	bne.n	8009e92 <_isatty_r+0x1a>
 8009e8c:	682b      	ldr	r3, [r5, #0]
 8009e8e:	b103      	cbz	r3, 8009e92 <_isatty_r+0x1a>
 8009e90:	6023      	str	r3, [r4, #0]
 8009e92:	bd38      	pop	{r3, r4, r5, pc}
 8009e94:	200006a4 	.word	0x200006a4

08009e98 <_kill_r>:
 8009e98:	b538      	push	{r3, r4, r5, lr}
 8009e9a:	4d07      	ldr	r5, [pc, #28]	@ (8009eb8 <_kill_r+0x20>)
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	4604      	mov	r4, r0
 8009ea0:	4608      	mov	r0, r1
 8009ea2:	4611      	mov	r1, r2
 8009ea4:	602b      	str	r3, [r5, #0]
 8009ea6:	f7f8 fc21 	bl	80026ec <_kill>
 8009eaa:	1c43      	adds	r3, r0, #1
 8009eac:	d102      	bne.n	8009eb4 <_kill_r+0x1c>
 8009eae:	682b      	ldr	r3, [r5, #0]
 8009eb0:	b103      	cbz	r3, 8009eb4 <_kill_r+0x1c>
 8009eb2:	6023      	str	r3, [r4, #0]
 8009eb4:	bd38      	pop	{r3, r4, r5, pc}
 8009eb6:	bf00      	nop
 8009eb8:	200006a4 	.word	0x200006a4

08009ebc <_getpid_r>:
 8009ebc:	f7f8 bc0e 	b.w	80026dc <_getpid>

08009ec0 <_fstat_r>:
 8009ec0:	b538      	push	{r3, r4, r5, lr}
 8009ec2:	4d07      	ldr	r5, [pc, #28]	@ (8009ee0 <_fstat_r+0x20>)
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	4604      	mov	r4, r0
 8009ec8:	4608      	mov	r0, r1
 8009eca:	4611      	mov	r1, r2
 8009ecc:	602b      	str	r3, [r5, #0]
 8009ece:	f7f8 fc6d 	bl	80027ac <_fstat>
 8009ed2:	1c43      	adds	r3, r0, #1
 8009ed4:	d102      	bne.n	8009edc <_fstat_r+0x1c>
 8009ed6:	682b      	ldr	r3, [r5, #0]
 8009ed8:	b103      	cbz	r3, 8009edc <_fstat_r+0x1c>
 8009eda:	6023      	str	r3, [r4, #0]
 8009edc:	bd38      	pop	{r3, r4, r5, pc}
 8009ede:	bf00      	nop
 8009ee0:	200006a4 	.word	0x200006a4

08009ee4 <_init>:
 8009ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ee6:	bf00      	nop
 8009ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eea:	bc08      	pop	{r3}
 8009eec:	469e      	mov	lr, r3
 8009eee:	4770      	bx	lr

08009ef0 <_fini>:
 8009ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ef2:	bf00      	nop
 8009ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ef6:	bc08      	pop	{r3}
 8009ef8:	469e      	mov	lr, r3
 8009efa:	4770      	bx	lr
